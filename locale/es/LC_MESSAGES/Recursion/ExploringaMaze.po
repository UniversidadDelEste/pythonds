# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Recursion/ExploringaMaze.rst:6
msgid "Exploring a Maze"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:8
msgid ""
"In this section we will look at a problem that has relevance to the "
"expanding world of robotics: How do you find your way out of a maze? If "
"you have a Roomba vacuum cleaner for your dorm room (don’t all college "
"students?) you will wish that you could reprogram it using what you have "
"learned in this section. The problem we want to solve is to help our "
"turtle find its way out of a virtual maze. The maze problem has roots as "
"deep as the Greek myth about Theseus who was sent into a maze to kill the"
" minotaur. Theseus used a ball of thread to help him find his way back "
"out again once he had finished off the beast. In our problem we will "
"assume that our turtle is dropped down somewhere into the middle of the "
"maze and must find its way out. Look at :ref:`Figure 2 <fig_mazescreen>` "
"to get an idea of where we are going in this section."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:26
msgid ".. image:: Recursion/Figures/maze.png"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:26
msgid "Figure 2: The Finished Maze Search Program"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:29
msgid ""
"To make it easier for us we will assume that our maze is divided up into "
"“squares.” Each square of the maze is either open or occupied by a "
"section of wall. The turtle can only pass through the open squares of the"
" maze. If the turtle bumps into a wall it must try a different direction."
" The turtle will require a systematic procedure to find its way out of "
"the maze. Here is the procedure:"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:36
msgid ""
"From our starting position we will first try going North one square and "
"then recursively try our procedure from there."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:39
msgid ""
"If we are not successful by trying a Northern path as the first step then"
" we will take a step to the South and recursively repeat our procedure."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:43
msgid ""
"If South does not work then we will try a step to the West as our first "
"step and recursively apply our procedure."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:46
msgid ""
"If North, South, and West have not been successful then apply the "
"procedure recursively from a position one step to our East."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:49
msgid ""
"If none of these directions works then there is no way to get out of the "
"maze and we fail."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:52
msgid ""
"Now, that sounds pretty easy, but there are a couple of details to talk "
"about first. Suppose we take our first recursive step by going North. By "
"following our procedure our next step would also be to the North. But if "
"the North is blocked by a wall we must look at the next step of the "
"procedure and try going to the South. Unfortunately that step to the "
"south brings us right back to our original starting place. If we apply "
"the recursive procedure from there we will just go back one step to the "
"North and be in an infinite loop. So, we must have a strategy to remember"
" where we have been. In this case we will assume that we have a bag of "
"bread crumbs we can drop along our way. If we take a step in a certain "
"direction and find that there is a bread crumb already on that square, we"
" know that we should immediately back up and try the next direction in "
"our procedure. As we will see when we look at the code for this "
"algorithm, backing up is as simple as returning from a recursive function"
" call."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:68
msgid ""
"As we do for all recursive algorithms let us review the base cases. Some "
"of them you may already have guessed based on the description in the "
"previous paragraph. In this algorithm, there are four base cases to "
"consider:"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:73
msgid ""
"The turtle has run into a wall. Since the square is occupied by a wall no"
" further exploration can take place."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:76
msgid ""
"The turtle has found a square that has already been explored. We do not "
"want to continue exploring from this position or we will get into a loop."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:80
msgid ""
"We have found an outside edge, not occupied by a wall. In other words we "
"have found an exit from the maze."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:83
msgid "We have explored a square unsuccessfully in all four directions."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:85
msgid ""
"For our program to work we will need to have a way to represent the maze."
" To make this even more interesting we are going to use the turtle module"
" to draw and explore our maze so we can watch this algorithm in action. "
"The maze object will provide the following methods for us to use in "
"writing our search algorithm:"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:91
msgid ""
"``__init__`` Reads in a data file representing a maze, initializes the "
"internal representation of the maze, and finds the starting position for "
"the turtle."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:95
msgid "``drawMaze`` Draws the maze in a window on the screen."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:97
msgid ""
"``updatePosition`` Updates the internal representation of the maze and "
"changes the position of the turtle in the window."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:100
msgid "``isExit`` Checks to see if the current position is an exit from the maze."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:103
msgid ""
"The ``Maze`` class also overloads the index operator ``[]`` so that our "
"algorithm can easily access the status of any particular square."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:106
msgid ""
"Let’s examine the code for the search function which we call "
"``searchFrom``. The code is shown in :ref:`Listing 3 <lst_mazesearch>`. "
"Notice that this function takes three parameters: a maze object, the "
"starting row, and the starting column. This is important because as a "
"recursive function the search logically starts again with each recursive "
"call."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:117
msgid "**Listing 3**"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:121
msgid ""
"def searchFrom(maze, startRow, startColumn):\n"
"    maze.updatePosition(startRow, startColumn)\n"
"   #  Check for base cases:\n"
"   #  1. We have run into an obstacle, return false\n"
"   if maze[startRow][startColumn] == OBSTACLE :\n"
"        return False\n"
"    #  2. We have found a square that has already been explored\n"
"    if maze[startRow][startColumn] == TRIED:\n"
"        return False\n"
"    # 3. Success, an outside edge not occupied by an obstacle\n"
"    if maze.isExit(startRow,startColumn):\n"
"        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n"
"        return True\n"
"    maze.updatePosition(startRow, startColumn, TRIED)\n"
"\n"
"    # Otherwise, use logical short circuiting to try each\n"
"    # direction in turn (if needed)\n"
"    found = searchFrom(maze, startRow-1, startColumn) or \\\n"
"            searchFrom(maze, startRow+1, startColumn) or \\\n"
"            searchFrom(maze, startRow, startColumn-1) or \\\n"
"            searchFrom(maze, startRow, startColumn+1)\n"
"    if found:\n"
"        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n"
"    else:\n"
"        maze.updatePosition(startRow, startColumn, DEAD_END)\n"
"    return found"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:148
msgid ""
"As you look through the algorithm you will see that the first thing the "
"code does (line 2) is call ``updatePosition``. This is simply to help you"
" visualize the algorithm so that you can watch exactly how the turtle "
"explores its way through the maze. Next the algorithm checks for the "
"first three of the four base cases: Has the turtle run into a wall (line "
"5)? Has the turtle circled back to a square already explored (line 8)? "
"Has the turtle found an exit (line 11)? If none of these conditions is "
"true then we continue the search recursively."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:157
msgid ""
"You will notice that in the recursive step there are four recursive calls"
" to ``searchFrom``. It is hard to predict how many of these recursive "
"calls will be used since they are all connected by ``or`` statements. If "
"the first call to ``searchFrom`` returns ``True`` then none of the last "
"three calls would be needed. You can interpret this as meaning that a "
"step to ``(row-1,column)`` (or North if you want to think geographically)"
" is on the path leading out of the maze. If there is not a good path "
"leading out of the maze to the North then the next recursive call is "
"tried, this one to the South. If South fails then try West, and finally "
"East. If all four recursive calls return false then we have found a dead "
"end. You should download or type in the whole program and experiment with"
" it by changing the order of these calls."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:170
msgid ""
"The code for the ``Maze`` class is shown in :ref:`Listing 4 <lst_maze>`, "
":ref:`Listing 5 <lst_maze1>`, and :ref:`Listing 6 <lst_maze2>`. The "
"``__init__`` method takes the name of a file as its only parameter. This "
"file is a text file that represents a maze by using “+” characters for "
"walls, spaces for open squares, and the letter “S” to indicate the "
"starting position. :ref:`Figure 3 <fig_exmaze>` is an example of a maze "
"data file. The internal representation of the maze is a list of lists. "
"Each row of the ``mazelist`` instance variable is also a list. This "
"secondary list contains one character per square using the characters "
"described above. For the data file in :ref:`Figure 3 <fig_exmaze>` the "
"internal representation looks like the following:"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:186
msgid ""
"[ ['+','+','+','+',...,'+','+','+','+','+','+','+'],\n"
"  ['+',' ',' ',' ',...,' ',' ',' ','+',' ',' ',' '],\n"
"  ['+',' ','+',' ',...,'+','+',' ','+',' ','+','+'],\n"
"  ['+',' ','+',' ',...,' ',' ',' ','+',' ','+','+'],\n"
"  ['+','+','+',' ',...,'+','+',' ','+',' ',' ','+'],\n"
"  ['+',' ',' ',' ',...,'+','+',' ',' ',' ',' ','+'],\n"
"  ['+','+','+','+',...,'+','+','+','+','+',' ','+'],\n"
"  ['+',' ',' ',' ',...,'+','+',' ',' ','+',' ','+'],\n"
"  ['+',' ','+','+',...,' ',' ','+',' ',' ',' ','+'],\n"
"  ['+',' ',' ',' ',...,' ',' ','+',' ','+','+','+'],\n"
"  ['+','+','+','+',...,'+','+','+',' ','+','+','+']]"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:198
msgid ""
"The ``drawMaze`` method uses this internal representation to draw the "
"initial view of the maze on the screen."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:204
msgid "Figure 3: An Example Maze Data File"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:208
msgid ""
"++++++++++++++++++++++\n"
"+   +   ++ ++     +\n"
"+ +   +       +++ + ++\n"
"+ + +  ++  ++++   + ++\n"
"+++ ++++++    +++ +  +\n"
"+          ++  ++    +\n"
"+++++ ++++++   +++++ +\n"
"+     +   +++++++  + +\n"
"+ +++++++      S +   +\n"
"+                + +++\n"
"++++++++++++++++++ +++"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:221
msgid ""
"The ``updatePosition`` method, as shown in :ref:`Listing 5 <lst_maze1>` "
"uses the same internal representation to see if the turtle has run into a"
" wall. It also updates the internal representation with a “.” or “-” to "
"indicate that the turtle has visited a particular square or if the square"
" is part of a dead end. In addition, the ``updatePosition`` method uses "
"two helper methods, ``moveTurtle`` and ``dropBreadCrumb``, to update the "
"view on the screen."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:229
msgid ""
"Finally, the ``isExit`` method uses the current position of the turtle to"
" test for an exit condition. An exit condition is whenever the turtle has"
" navigated to the edge of the maze, either row zero or column zero, or "
"the far right column or the bottom row."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:236
msgid "**Listing 4**"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:243
msgid ""
"class Maze:\n"
"    def __init__(self,mazeFileName):\n"
"        rowsInMaze = 0\n"
"        columnsInMaze = 0\n"
"        self.mazelist = []\n"
"        mazeFile = open(mazeFileName,'r')\n"
"        rowsInMaze = 0\n"
"        for line in mazeFile:\n"
"            rowList = []\n"
"            col = 0\n"
"            for ch in line[:-1]:\n"
"                rowList.append(ch)\n"
"                if ch == 'S':\n"
"                    self.startRow = rowsInMaze\n"
"                    self.startCol = col\n"
"                col = col + 1\n"
"            rowsInMaze = rowsInMaze + 1\n"
"            self.mazelist.append(rowList)\n"
"            columnsInMaze = len(rowList)\n"
"\n"
"        self.rowsInMaze = rowsInMaze\n"
"        self.columnsInMaze = columnsInMaze\n"
"        self.xTranslate = -columnsInMaze/2\n"
"        self.yTranslate = rowsInMaze/2\n"
"        self.t = Turtle(shape='turtle')\n"
"        setup(width=600,height=600)\n"
"        setworldcoordinates(-(columnsInMaze-1)/2-.5,\n"
"                            -(rowsInMaze-1)/2-.5,\n"
"                            (columnsInMaze-1)/2+.5,\n"
"                            (rowsInMaze-1)/2+.5)"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:276
msgid "**Listing 5**"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:280
msgid ""
"def drawMaze(self):\n"
"    for y in range(self.rowsInMaze):\n"
"        for x in range(self.columnsInMaze):\n"
"            if self.mazelist[y][x] == OBSTACLE:\n"
"                self.drawCenteredBox(x+self.xTranslate,\n"
"                                     -y+self.yTranslate,\n"
"                                     'tan')\n"
"    self.t.color('black','blue')\n"
"\n"
"def drawCenteredBox(self,x,y,color):\n"
"    tracer(0)\n"
"    self.t.up()\n"
"    self.t.goto(x-.5,y-.5)\n"
"    self.t.color('black',color)\n"
"    self.t.setheading(90)\n"
"    self.t.down()\n"
"    self.t.begin_fill()\n"
"    for i in range(4):\n"
"        self.t.forward(1)\n"
"        self.t.right(90)\n"
"    self.t.end_fill()\n"
"    update()\n"
"    tracer(1)\n"
"\n"
"def moveTurtle(self,x,y):\n"
"    self.t.up()\n"
"    self.t.setheading(self.t.towards(x+self.xTranslate,\n"
"                                     -y+self.yTranslate))\n"
"    self.t.goto(x+self.xTranslate,-y+self.yTranslate)\n"
"\n"
"def dropBreadcrumb(self,color):\n"
"    self.t.dot(color)\n"
"\n"
"def updatePosition(self,row,col,val=None):\n"
"    if val:\n"
"        self.mazelist[row][col] = val\n"
"    self.moveTurtle(col,row)\n"
"\n"
"    if val == PART_OF_PATH:\n"
"        color = 'green'\n"
"    elif val == OBSTACLE:\n"
"        color = 'red'\n"
"    elif val == TRIED:\n"
"        color = 'black'\n"
"    elif val == DEAD_END:\n"
"        color = 'red'\n"
"    else:\n"
"        color = None\n"
"\n"
"    if color:\n"
"        self.dropBreadcrumb(color)"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:334
msgid "**Listing 6**"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:338
msgid ""
"def isExit(self,row,col):\n"
"     return (row == 0 or\n"
"             row == self.rowsInMaze-1 or\n"
"             col == 0 or\n"
"             col == self.columnsInMaze-1 )\n"
"\n"
"def __getitem__(self,idx):\n"
"     return self.mazelist[idx]"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:348
msgid ""
"The complete program is shown in ActiveCode 1.  This program uses the "
"data file ``maze2.txt`` shown below. Note that it is a much more simple "
"example file in that the exit is very close to the starting position of "
"the turtle."
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:351
msgid ""
"      <pre id=\"maze2.txt\">\n"
"++++++++++++++++++++++\n"
"+   +   ++ ++        +\n"
"      +     ++++++++++\n"
"+ +    ++  ++++ +++ ++\n"
"+ +   + + ++    +++  +\n"
"+          ++  ++  + +\n"
"+++++ + +      ++  + +\n"
"+++++ +++  + +  ++   +\n"
"+          + + S+ +  +\n"
"+++++ +  + + +     + +\n"
"++++++++++++++++++++++\n"
"  </pre>"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:503
msgid "data-caption='Complete Maze Solver'"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:503
msgid ""
"import turtle\n"
"\n"
"PART_OF_PATH = 'O'\n"
"TRIED = '.'\n"
"OBSTACLE = '+'\n"
"DEAD_END = '-'\n"
"\n"
"class Maze:\n"
"    def __init__(self,mazeFileName):\n"
"        rowsInMaze = 0\n"
"        columnsInMaze = 0\n"
"        self.mazelist = []\n"
"        mazeFile = open(mazeFileName,'r')\n"
"        rowsInMaze = 0\n"
"        for line in mazeFile:\n"
"            rowList = []\n"
"            col = 0\n"
"            for ch in line[:-1]:\n"
"                rowList.append(ch)\n"
"                if ch == 'S':\n"
"                    self.startRow = rowsInMaze\n"
"                    self.startCol = col\n"
"                col = col + 1\n"
"            rowsInMaze = rowsInMaze + 1\n"
"            self.mazelist.append(rowList)\n"
"            columnsInMaze = len(rowList)\n"
"\n"
"        self.rowsInMaze = rowsInMaze\n"
"        self.columnsInMaze = columnsInMaze\n"
"        self.xTranslate = -columnsInMaze/2\n"
"        self.yTranslate = rowsInMaze/2\n"
"        self.t = turtle.Turtle()\n"
"        self.t.shape('turtle')\n"
"        self.wn = turtle.Screen()\n"
"        "
"self.wn.setworldcoordinates(-(columnsInMaze-1)/2-.5,-(rowsInMaze-1)/2-.5,(columnsInMaze-1)/2+.5,(rowsInMaze-1)/2+.5)"
"\n"
"\n"
"    def drawMaze(self):\n"
"        self.t.speed(10)\n"
"        self.wn.tracer(0)\n"
"        for y in range(self.rowsInMaze):\n"
"            for x in range(self.columnsInMaze):\n"
"                if self.mazelist[y][x] == OBSTACLE:\n"
"                    "
"self.drawCenteredBox(x+self.xTranslate,-y+self.yTranslate,'orange')\n"
"        self.t.color('black')\n"
"        self.t.fillcolor('blue')\n"
"        self.wn.update()\n"
"        self.wn.tracer(1)\n"
"\n"
"    def drawCenteredBox(self,x,y,color):\n"
"        self.t.up()\n"
"        self.t.goto(x-.5,y-.5)\n"
"        self.t.color(color)\n"
"        self.t.fillcolor(color)\n"
"        self.t.setheading(90)\n"
"        self.t.down()\n"
"        self.t.begin_fill()\n"
"        for i in range(4):\n"
"            self.t.forward(1)\n"
"            self.t.right(90)\n"
"        self.t.end_fill()\n"
"\n"
"    def moveTurtle(self,x,y):\n"
"        self.t.up()\n"
"        "
"self.t.setheading(self.t.towards(x+self.xTranslate,-y+self.yTranslate))\n"
"        self.t.goto(x+self.xTranslate,-y+self.yTranslate)\n"
"\n"
"    def dropBreadcrumb(self,color):\n"
"        self.t.dot(10,color)\n"
"\n"
"    def updatePosition(self,row,col,val=None):\n"
"        if val:\n"
"            self.mazelist[row][col] = val\n"
"        self.moveTurtle(col,row)\n"
"\n"
"        if val == PART_OF_PATH:\n"
"            color = 'green'\n"
"        elif val == OBSTACLE:\n"
"            color = 'red'\n"
"        elif val == TRIED:\n"
"            color = 'black'\n"
"        elif val == DEAD_END:\n"
"            color = 'red'\n"
"        else:\n"
"            color = None\n"
"\n"
"        if color:\n"
"            self.dropBreadcrumb(color)\n"
"\n"
"    def isExit(self,row,col):\n"
"        return (row == 0 or\n"
"                row == self.rowsInMaze-1 or\n"
"                col == 0 or\n"
"                col == self.columnsInMaze-1 )\n"
"\n"
"    def __getitem__(self,idx):\n"
"        return self.mazelist[idx]\n"
"\n"
"\n"
"def searchFrom(maze, startRow, startColumn):\n"
"    # try each of four directions from this point until we find a way "
"out.\n"
"    # base Case return values:\n"
"    #  1. We have run into an obstacle, return false\n"
"    maze.updatePosition(startRow, startColumn)\n"
"    if maze[startRow][startColumn] == OBSTACLE :\n"
"        return False\n"
"    #  2. We have found a square that has already been explored\n"
"    if maze[startRow][startColumn] == TRIED or "
"maze[startRow][startColumn] == DEAD_END:\n"
"        return False\n"
"    # 3. We have found an outside edge not occupied by an obstacle\n"
"    if maze.isExit(startRow,startColumn):\n"
"        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n"
"        return True\n"
"    maze.updatePosition(startRow, startColumn, TRIED)\n"
"    # Otherwise, use logical short circuiting to try each direction\n"
"    # in turn (if needed)\n"
"    found = searchFrom(maze, startRow-1, startColumn) or \\\n"
"            searchFrom(maze, startRow+1, startColumn) or \\\n"
"            searchFrom(maze, startRow, startColumn-1) or \\\n"
"            searchFrom(maze, startRow, startColumn+1)\n"
"    if found:\n"
"        maze.updatePosition(startRow, startColumn, PART_OF_PATH)\n"
"    else:\n"
"        maze.updatePosition(startRow, startColumn, DEAD_END)\n"
"    return found\n"
"\n"
"\n"
"myMaze = Maze('maze2.txt')\n"
"myMaze.drawMaze()\n"
"myMaze.updatePosition(myMaze.startRow,myMaze.startCol)\n"
"\n"
"searchFrom(myMaze, myMaze.startRow, myMaze.startCol)"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:504
msgid "Self Check"
msgstr ""

#: ../../_sources/Recursion/ExploringaMaze.rst:506
msgid ""
"Modify the maze search program so that the calls to searchFrom are in a "
"different order.  Watch the program run. Can you explain why the behavior"
" is different?  Can you predict what path the turtle will follow for a "
"given change in order?"
msgstr ""

