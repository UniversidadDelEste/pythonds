# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: 2017-05-06 14:34-0500\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"Last-Translator: Francisco Silva G. <francisco.silva.garces@gmail.com>\n"
"Language-Team: \n"
"X-Generator: Poedit 2.0.1\n"
"Language: es\n"

#: ../../_sources/Introduction/WhatIsProgramming.rst:6
msgid "What Is Programming?"
msgstr "¿ Qué es la Programación ?"

#: ../../_sources/Introduction/WhatIsProgramming.rst:8
msgid ""
"**Programming** is the process of taking an algorithm and encoding it "
"into a notation, a programming language, so that it can be executed by a "
"computer. Although many programming languages and many different types "
"of computers exist, the important first step is the need to have the "
"solution. Without an algorithm there can be no program."
msgstr ""
"**Programación** es el proceso de tomar un algoritmo y codificarlo en "
"una notación, un lenguaje de programación, para que pueda ser ejecutado "
"por un ordenador. Aunque existen muchos lenguajes de programación y "
"muchos tipos diferentes de computadoras, el primer paso importante es la "
"necesidad de tener la solución. Sin un algoritmo no puede haber ningún "
"programa."

#: ../../_sources/Introduction/WhatIsProgramming.rst:14
msgid ""
"Computer science is not the study of programming. Programming, however, "
"is an important part of what a computer scientist does. Programming is "
"often the way that we create a representation for our solutions. "
"Therefore, this language representation and the process of creating it "
"becomes a fundamental part of the discipline."
msgstr ""
"La Ciencia de la computación no es el estudio de la programación. La "
"programación, sin embargo, es una parte importante de lo que hace un "
"científico de la computación. La programación es a menudo la forma en "
"que creamos una representación para nuestras soluciones. Por lo tanto, "
"esta representación del lenguaje y el proceso de su creación se "
"convierte en una parte fundamental de la disciplina."

#: ../../_sources/Introduction/WhatIsProgramming.rst:20
msgid ""
"Algorithms describe the solution to a problem in terms of the data "
"needed to represent the problem instance and the set of steps necessary "
"to produce the intended result. Programming languages must provide a "
"notational way to represent both the process and the data. To this end, "
"languages provide control constructs and data types."
msgstr ""
"Los algoritmos describen la solución a un problema en términos de los "
"datos necesarios para representar la instancia del problema y el "
"conjunto de pasos necesarios para producir el resultado deseado. Los "
"lenguajes de programación deben proporcionar una forma de notación para "
"representar tanto el proceso como los datos. Con este fin, los lenguajes "
"proporcionan construcciones de control y tipos de datos."

#: ../../_sources/Introduction/WhatIsProgramming.rst:26
msgid ""
"Control constructs allow algorithmic steps to be represented in a "
"convenient yet unambiguous way. At a minimum, algorithms require "
"constructs that perform sequential processing, selection for decision-"
"making, and iteration for repetitive control. As long as the language "
"provides these basic statements, it can be used for algorithm "
"representation."
msgstr ""
"Las construcciones de control permiten que los pasos algorítmicos sean "
"representados de una manera conveniente pero no ambigua. Como mínimo, "
"los algoritmos requieren construcciones que realizan procesamiento "
"secuencial, selección para la toma de decisiones e iteración para el "
"control repetitivo. Mientras el lenguaje proporcione estas declaraciones "
"básicas, se puede utilizar para la representación del algoritmo."

#: ../../_sources/Introduction/WhatIsProgramming.rst:33
msgid ""
"All data items in the computer are represented as strings of binary "
"digits. In order to give these strings meaning, we need to have **data "
"types**. Data types provide an interpretation for this binary data so "
"that we can think about the data in terms that make sense with respect "
"to the problem being solved. These low-level, built-in data types "
"(sometimes called the primitive data types) provide the building blocks "
"for algorithm development."
msgstr ""
"Todos los elementos de datos de la computadora se representan como "
"cadenas de dígitos binarios. Con el fin de dar sentido a estas cadenas, "
"necesitamos tener **tipos de datos**. Los tipos de datos proporcionan "
"una interpretación para estos datos binarios para que podamos pensar en "
"los datos en términos que tengan sentido con respecto al problema que se "
"está resolviendo. Estos tipos de datos integrados de bajo nivel (a veces "
"denominados tipos de datos primitivos) proporcionan los elementos "
"básicos para el desarrollo de algoritmos."

#: ../../_sources/Introduction/WhatIsProgramming.rst:41
msgid ""
"For example, most programming languages provide a data type for "
"integers. Strings of binary digits in the computer’s memory can be "
"interpreted as integers and given the typical meanings that we commonly "
"associate with integers (e.g. 23, 654, and -19). In addition, a data "
"type also provides a description of the operations that the data items "
"can participate in. With integers, operations such as addition, "
"subtraction, and multiplication are common. We have come to expect that "
"numeric types of data can participate in these arithmetic operations."
msgstr ""
"Por ejemplo, la mayoría de los lenguajes de programación proporcionan un "
"tipo de datos para enteros. Las cadenas de dígitos binarios en la "
"memoria del computador pueden interpretarse como números enteros y darse "
"los significados típicos que comúnmente se asocian con números enteros "
"(por ejemplo, 23, 654 y -19). Además, un tipo de datos también "
"proporciona una descripción de las operaciones en las que pueden "
"participar los elementos de datos. Con enteros, las operaciones tales "
"como suma, resta y multiplicación son comunes. Hemos llegado a esperar "
"que los tipos numéricos de datos puedan participar en estas operaciones "
"aritméticas."

#: ../../_sources/Introduction/WhatIsProgramming.rst:50
msgid ""
"The difficulty that often arises for us is the fact that problems and "
"their solutions are very complex. These simple, language-provided "
"constructs and data types, although certainly sufficient to represent "
"complex solutions, are typically at a disadvantage as we work through "
"the problem-solving process. We need ways to control this complexity and "
"assist with the creation of solutions."
msgstr ""
"La dificultad que a menudo surge para nosotros es el hecho de que los "
"problemas y sus soluciones son muy complejos. Estos simples, constructos "
"proporcionado por el lenguaje y tipos de datos,  aunque ciertamente "
"suficientes para representar soluciones complejas, suelen estar en "
"desventaja a medida que trabajamos a través del proceso de resolución de "
"problemas. Necesitamos maneras de controlar esta complejidad y ayudar "
"con la creación de soluciones."
