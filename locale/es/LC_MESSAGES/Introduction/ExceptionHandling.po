# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: 2017-05-06 14:21-0300\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"Last-Translator: Mariano Reingart <reingart@gmail.com>\n"
"Language-Team: \n"
"Language: es_AR\n"
"X-Generator: Poedit 1.8.7.1\n"

#: ../../_sources/Introduction/ExceptionHandling.rst:6
msgid "Exception Handling"
msgstr "Manejo de excepciones"

#: ../../_sources/Introduction/ExceptionHandling.rst:8
msgid ""
"There are two types of errors that typically occur when writing "
"programs. The first, known as a syntax error, simply means that the "
"programmer has made a mistake in the structure of a statement or "
"expression. For example, it is incorrect to write a for statement and "
"forget the colon."
msgstr ""
"Hay dos tipos de errores que normalmente ocurren al escribir programas. "
"El primero, conocido como un error de sintaxis, simplemente significa "
"que el programador ha cometido un error en la estructura de una "
"sentencia o expresión. Por ejemplo, es incorrecto escribir una "
"instrucción ``for`` y olvidar los dos puntos."

#: ../../_sources/Introduction/ExceptionHandling.rst:16
msgid ""
">>> for i in range(10)\n"
"SyntaxError: invalid syntax (<pyshell#61>, line 1)"
msgstr ""
">>> for i in range(10)\n"
"SyntaxError: invalid syntax (<pyshell#61>, line 1)"

#: ../../_sources/Introduction/ExceptionHandling.rst:19
msgid ""
"In this case, the Python interpreter has found that it cannot complete "
"the processing of this instruction since it does not conform to the "
"rules of the language. Syntax errors are usually more frequent when you "
"are first learning a language."
msgstr ""
"En este caso, el intérprete de Python ha encontrado que no puede "
"completar el procesamiento de esta instrucción ya que no se ajusta a las "
"reglas del lenguaje. Los errores de sintaxis suelen ser más frecuentes "
"cuando se está aprendiendo un lenguaje de programación."

#: ../../_sources/Introduction/ExceptionHandling.rst:24
msgid ""
"The other type of error, known as a logic error, denotes a situation "
"where the program executes but gives the wrong result. This can be due "
"to an error in the underlying algorithm or an error in your translation "
"of that algorithm. In some cases, logic errors lead to very bad "
"situations such as trying to divide by zero or trying to access an item "
"in a list where the index of the item is outside the bounds of the list. "
"In this case, the logic error leads to a runtime error that causes the "
"program to terminate. These types of runtime errors are typically called "
"**exceptions**."
msgstr ""
"El otro tipo de error, conocido como un error lógico, denota una "
"situación en la que el programa se ejecuta pero da el resultado "
"incorrecto. Esto puede deberse a un error en el algoritmo subyacente o a "
"un error en la traducción de ese algoritmo. En algunos casos, los "
"errores lógicos conducen a situaciones muy malas, como tratar de dividir "
"por cero o tratar de acceder a un elemento en una lista donde el índice "
"del elemento está fuera de los límites de la lista. En este caso, el "
"error lógico conduce a un error de tiempo de ejecución que hace que el "
"programa termine. Estos tipos de errores de tiempo de ejecución suelen "
"llamarse **excepciones**."

#: ../../_sources/Introduction/ExceptionHandling.rst:34
msgid ""
"Most of the time, beginning programmers simply think of exceptions as "
"fatal runtime errors that cause the end of execution. However, most "
"programming languages provide a way to deal with these errors that will "
"allow the programmer to have some type of intervention if they so "
"choose. In addition, programmers can create their own exceptions if they "
"detect a situation in the program execution that warrants it."
msgstr ""
"La mayoría de las veces, los programadores principiantes simplemente "
"piensan en excepciones como errores de ejecución fatales que causan el "
"final de la ejecución. Sin embargo, la mayoría de los lenguajes de "
"programación proporcionan una manera de lidiar con estos errores que "
"permitirán al programador tener algún tipo de intervención si así lo "
"desean. Además, los programadores pueden crear sus propias excepciones "
"si detectan una situación en la ejecución del programa que lo justifique."

#: ../../_sources/Introduction/ExceptionHandling.rst:41
msgid ""
"When an exception occurs, we say that it has been “raised.” You can "
"“handle” the exception that has been raised by using a ``try`` "
"statement. For example, consider the following session that asks the "
"user for an integer and then calls the square root function from the "
"math library. If the user enters a value that is greater than or equal "
"to 0, the print will show the square root. However, if the user enters a "
"negative value, the square root function will report a ``ValueError`` "
"exception."
msgstr ""
"Cuando se produce una excepción, decimos que se ha ”elevado”. Puede "
"”manejar” la excepción que se ha planteado utilizando una instrucción "
"``try``. Por ejemplo, considere la siguiente sesión que solicita al "
"usuario un número entero y luego llama a la función raíz cuadrada de la "
"biblioteca de matemáticas. Si el usuario introduce un valor mayor o "
"igual a 0, la impresión mostrará la raíz cuadrada. Sin embargo, si el "
"usuario introduce un valor negativo, la función raíz cuadrada informará "
"una excepción ``ValueError``."

#: ../../_sources/Introduction/ExceptionHandling.rst:52
msgid ""
">>> anumber = int(input(\"Please enter an integer \"))\n"
"Please enter an integer -23\n"
">>> print(math.sqrt(anumber))\n"
"Traceback (most recent call last):\n"
"  File \"<pyshell#102>\", line 1, in <module>\n"
"    print(math.sqrt(anumber))\n"
"ValueError: math domain error\n"
">>>"
msgstr ""
">>> unnumero = int(input(\"Por favor, ingrese un nro entero \"))\n"
"Por favor, ingrese un nro entero -23\n"
">>> print(math.sqrt(unnumero))\n"
"Traceback (most recent call last):\n"
"  File \"<pyshell#102>\", line 1, in <module>\n"
"    print(math.sqrt(unnumero))\n"
"ValueError: math domain error\n"
">>>"

#: ../../_sources/Introduction/ExceptionHandling.rst:61
msgid ""
"We can handle this exception by calling the print function from within a "
"``try`` block. A corresponding ``except`` block “catches” the exception "
"and prints a message back to the user in the event that an exception "
"occurs. For example:"
msgstr ""
"Podemos manejar esta excepción llamando a la función de impresión desde "
"dentro de un bloque ``try``. Un bloque ``except`` correspondiente "
"captura la excepción e imprime un mensaje al usuario en caso de que se "
"produzca una excepción. Por ejemplo:"

#: ../../_sources/Introduction/ExceptionHandling.rst:68
msgid ""
">>> try:\n"
"       print(math.sqrt(anumber))\n"
"    except:\n"
"       print(\"Bad Value for square root\")\n"
"       print(\"Using absolute value instead\")\n"
"       print(math.sqrt(abs(anumber)))\n"
"\n"
"Bad Value for square root\n"
"Using absolute value instead\n"
"4.79583152331\n"
">>>"
msgstr ""
">>> try:\n"
"       print(math.sqrt(unnumero))\n"
"    except:\n"
"       print(\"Valor incorrecto para raíz cuadrada\")\n"
"       print(\"Utilizar valor absoluto en su lugar\")\n"
"       print(math.sqrt(abs(unnumero)))\n"
"\n"
"Valor incorrecto para raíz cuadrada\n"
"Utilizar valor absoluto en su lugar\n"
"4.79583152331\n"
">>>"

#: ../../_sources/Introduction/ExceptionHandling.rst:80
msgid ""
"will catch the fact that an exception is raised by ``sqrt`` and will "
"instead print the messages back to the user and use the absolute value "
"to be sure that we are taking the square root of a non-negative number. "
"This means that the program will not terminate but instead will continue "
"on to the next statements."
msgstr ""
"captará el hecho de que una excepción es planteada por ``sqrt`` e "
"imprimirá los mensajes de nuevo al usuario y utilizará el valor absoluto "
"para asegurarse de que estamos tomando la raíz cuadrada de un número no "
"negativo. Esto significa que el programa no finalizará, sino que "
"continuará con las siguientes instrucciones."

#: ../../_sources/Introduction/ExceptionHandling.rst:86
msgid ""
"It is also possible for a programmer to cause a runtime exception by "
"using the ``raise`` statement. For example, instead of calling the "
"square root function with a negative number, we could have checked the "
"value first and then raised our own exception. The code fragment below "
"shows the result of creating a new ``RuntimeError`` exception. Note that "
"the program would still terminate but now the exception that caused the "
"termination is something explicitly created by the programmer."
msgstr ""
"También es posible que un programador cause una excepción de tiempo de "
"ejecución utilizando la instrucción ``raise``. Por ejemplo, en lugar de "
"llamar a la función de raíz cuadrada con un número negativo, podríamos "
"haber comprobado primero el valor y luego haber aumentado nuestra propia "
"excepción. El fragmento de código siguiente muestra el resultado de la "
"creación de una nueva excepción ``RuntimeError``. Tenga en cuenta que el "
"programa aún terminaría, pero ahora la excepción que causó la "
"terminación es algo creado explícitamente por el programador."

#: ../../_sources/Introduction/ExceptionHandling.rst:96
msgid ""
">>> if anumber < 0:\n"
"...    raise RuntimeError(\"You can't use a negative number\")\n"
"... else:\n"
"...    print(math.sqrt(anumber))\n"
"...\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 2, in <module>\n"
"RuntimeError: You can't use a negative number\n"
">>>"
msgstr ""
">>> if unnumero < 0:\n"
"...    raise RuntimeError(\"No puede utilizar un número negativo\")\n"
"... else:\n"
"...    print(math.sqrt(unnumero))\n"
"...\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 2, in <module>\n"
"RuntimeError: No puede utilizar un número negativo\n"
">>>"

# Carlos Sisek
# carlos.sisek@gmail.com
# Diplomatura en Software Libre
# Universidad del Este
# 2017
#: ../../_sources/Introduction/ExceptionHandling.rst:106
msgid ""
"There are many kinds of exceptions that can be raised in addition to the "
"``RuntimeError`` shown above. See the Python reference manual for a list "
"of all the available exception types and for how to create your own."
msgstr ""
"Existen muchos tipos de excepciones que pueden generarse además del "
"``RuntimeError`` mostrado anteriormente. Consulte el manual de "
"referencia de Python para obtener una lista de todos los tipos de "
"excepción disponibles y cómo crear sus propios."
