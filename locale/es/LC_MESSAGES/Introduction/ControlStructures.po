msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: 2017-04-10 22:20-0300\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"Last-Translator: Carlos Sisek <carlos.sisek@gmail.com>\n"
"Language-Team: \n"
"Language: es_AR\n"
"X-Generator: Poedit 1.8.9\n"

#: ../../_sources/Introduction/ControlStructures.rst:6
msgid "Control Structures"
msgstr "Estructuras de control"

#: ../../_sources/Introduction/ControlStructures.rst:8
msgid ""
"As we noted earlier, algorithms require two important control "
"structures: iteration and selection. Both of these are supported by "
"Python in various forms. The programmer can choose the statement that is "
"most useful for the given circumstance."
msgstr ""
"Como señalamos anteriormente, los algoritmos requieren dos estructuras "
"de control importantes: la iteración y la selección. Ambos son "
"compatibles con Python en varias formas. El programador puede elegir la "
"declaración que es más útil para la circunstancia dada."

#: ../../_sources/Introduction/ControlStructures.rst:13
msgid ""
"For iteration, Python provides a standard ``while`` statement and a very "
"powerful ``for`` statement. The while statement repeats a body of code "
"as long as a condition is true. For example,"
msgstr ""
"Para la iteración, Python proporciona una sentencia `` while`` y una "
"sentencia `` for`` muy potente. La sentencia while repite un cuerpo de "
"código siempre que una condición sea verdadera. Por ejemplo,"

#: ../../_sources/Introduction/ControlStructures.rst:19
msgid ""
">>> counter = 1\n"
">>> while counter <= 5:\n"
"...     print(\"Hello, world\")\n"
"...     counter = counter + 1\n"
"\n"
"\n"
"Hello, world\n"
"Hello, world\n"
"Hello, world\n"
"Hello, world\n"
"Hello, world"
msgstr ""
">>> contador = 1\n"
">>> while contador <= 5:\n"
"...     print(\"Hola, mundo\")\n"
"...     contador = contador + 1\n"
"\n"
"\n"
"Hola, mundo\n"
"Hola, mundo\n"
"Hola, mundo\n"
"Hola, mundo\n"
"Hola, mundo"

#: ../../_sources/Introduction/ControlStructures.rst:31
msgid ""
"prints out the phrase “Hello, world” five times. The condition on the "
"``while`` statement is evaluated at the start of each repetition. If the "
"condition is ``True``, the body of the statement will execute. It is "
"easy to see the structure of a Python ``while`` statement due to the "
"mandatory indentation pattern that the language enforces."
msgstr ""
"Imprime la frase \"Hola, mundo\" cinco veces. La condición en la "
"sentencia `` while`` se evalúa al inicio de cada repetición. Si la "
"condición es `` True``, el cuerpo de la sentencia se ejecutará. Es fácil "
"ver la estructura de una sentencia `` while`` de Python debido al patrón "
"de indentación obligatorio que el lenguaje hace cumplir."

#: ../../_sources/Introduction/ControlStructures.rst:37
msgid ""
"The ``while`` statement is a very general purpose iterative structure "
"that we will use in a number of different algorithms. In many cases, a "
"compound condition will control the iteration. A fragment such as"
msgstr ""
"La sentencia `` while`` es una estructura iterativa de propósito general "
"que usaremos en una serie de algoritmos diferentes. En muchos casos, una "
"condición compuesta controlará la iteración. Un fragmento tal como"

#: ../../_sources/Introduction/ControlStructures.rst:43
msgid ""
"while counter <= 10 and not done:\n"
"..."
msgstr ""
"while contador <= 10 and not done:\n"
"..."

#: ../../_sources/Introduction/ControlStructures.rst:46
msgid ""
"would cause the body of the statement to be executed only in the case "
"where both parts of the condition are satisfied. The value of the "
"variable ``counter`` would need to be less than or equal to 10 and the "
"value of the variable ``done`` would need to be ``False`` (``not False`` "
"is ``True``) so that ``True and True`` results in ``True``."
msgstr ""
"haría que el cuerpo de la declaración fuera ejecutado sólo en el caso en "
"que se cumplan ambas partes de la condición. El valor de la variable `` "
"contador`` tendría que ser menor o igual a 10 y el valor de la variable "
"`` done`` tendría que ser `` False`` (`` not False`` es `` True``) de "
"modo que `` True y True`` da como resultado `` True``."

#: ../../_sources/Introduction/ControlStructures.rst:52
msgid ""
"Even though this type of construct is very useful in a wide variety of "
"situations, another iterative structure, the ``for`` statement, can be "
"used in conjunction with many of the Python collections. The ``for`` "
"statement can be used to iterate over the members of a collection, so "
"long as the collection is a sequence. So, for example,"
msgstr ""
"Aunque este tipo de construcción es muy útil en una amplia variedad de "
"situaciones, otra estructura iterativa, la sentencia `` for``, puede "
"usarse junto con muchas de las colecciones de Python. La sentencia `` "
"for`` puede usarse para iterar sobre los miembros de una colección, "
"siempre y cuando la colección sea una secuencia. Así por ejemplo,"

#: ../../_sources/Introduction/ControlStructures.rst:60
msgid ""
">>> for item in [1,3,6,2,5]:\n"
"...    print(item)\n"
"...\n"
"1\n"
"3\n"
"6\n"
"2\n"
"5"
msgstr ""
">>> for valor in [1,3,6,2,5]:\n"
"...    print(valor)\n"
"...\n"
"1\n"
"3\n"
"6\n"
"2\n"
"5"

#: ../../_sources/Introduction/ControlStructures.rst:69
msgid ""
"assigns the variable ``item`` to be each successive value in the list "
"[1,3,6,2,5]. The body of the iteration is then executed. This works for "
"any collection that is a sequence (lists, tuples, and strings)."
msgstr ""
"Asigna la variable `` valor`` a cada valor sucesivo de la lista "
"[1,3,6,2,5]. Entonces se ejecuta el cuerpo de la iteración. Esto "
"funciona para cualquier colección que es una secuencia (listas, tuplas y "
"cadenas)."

#: ../../_sources/Introduction/ControlStructures.rst:73
msgid ""
"A common use of the ``for`` statement is to implement definite iteration "
"over a range of values. The statement"
msgstr ""
"Un uso común de la instrucción `` for`` es implementar una iteración "
"definida sobre un rango de valores. La declaración"

#: ../../_sources/Introduction/ControlStructures.rst:78
msgid ""
">>> for item in range(5):\n"
"...    print(item**2)\n"
"...\n"
"0\n"
"1\n"
"4\n"
"9\n"
"16\n"
">>>"
msgstr ""
">>> for valor in range(5):\n"
"...    print(valor**2)\n"
"...\n"
"0\n"
"1\n"
"4\n"
"9\n"
"16\n"
">>>"

#: ../../_sources/Introduction/ControlStructures.rst:88
msgid ""
"will perform the ``print`` function five times. The ``range`` function "
"will return a range object representing the sequence 0,1,2,3,4 and each "
"value will be assigned to the variable ``item``. This value is then "
"squared and printed."
msgstr ""
"realizará la función `` print`` cinco veces. La función `` range`` "
"devolverá un objeto de rango que representa la secuencia 0,1,2,3,4 y "
"cada valor se asignará a la variable `` valor``. Este valor es entonces "
"impreso."

#: ../../_sources/Introduction/ControlStructures.rst:93
msgid ""
"The other very useful version of this iteration structure is used to "
"process each character of a string. The following code fragment iterates "
"over a list of strings and for each string processes each character by "
"appending it to a list. The result is a list of all the letters in all "
"of the words."
msgstr ""
"La otra versión muy útil de esta estructura de iteración se utiliza para "
"procesar cada carácter de una cadena. El siguiente fragmento de código "
"itera sobre una lista de cadenas y para cada cadena procesa cada "
"carácter añadiéndolo a una lista. El resultado es una lista de todas las "
"letras en todas las palabras."

#: ../../_sources/Introduction/ControlStructures.rst:109
msgid "data-caption='Processing Each Character in a List of Strings'"
msgstr ""
"data-caption = 'Procesamiento de cada carácter en una lista de cadenas'"

#: ../../_sources/Introduction/ControlStructures.rst:109
msgid ""
"wordlist = ['cat','dog','rabbit']\n"
"letterlist = [ ]\n"
"for aword in wordlist:\n"
"    for aletter in aword:\n"
"        letterlist.append(aletter)\n"
"print(letterlist)"
msgstr ""
"listadepalabras = ['gato','perro','conejo']\n"
"listadeletras = [ ]\n"
"for aword in listadepalabras:\n"
"    for aletter in aword:\n"
"        listadeletras.append(aletter)\n"
"print(listadeletras)"

#: ../../_sources/Introduction/ControlStructures.rst:110
msgid ""
"Selection statements allow programmers to ask questions and then, based "
"on the result, perform different actions. Most programming languages "
"provide two versions of this useful construct: the ``ifelse`` and the "
"``if``. A simple example of a binary selection uses the ``ifelse`` "
"statement."
msgstr ""
"Las sentencias de selección permiten a los programadores hacer preguntas "
"y luego, basándose en el resultado, realizar diferentes acciones. La "
"mayoría de los lenguajes de programación proporcionan dos versiones de "
"esta construcción útil: el `` ifelse`` y el `` if``. Un ejemplo simple "
"de una selección binaria utiliza la instrucción `` ifelse``."

#: ../../_sources/Introduction/ControlStructures.rst:118
msgid ""
"if n<0:\n"
"   print(\"Sorry, value is negative\")\n"
"else:\n"
"   print(math.sqrt(n))"
msgstr ""
"if n<0:\n"
"   print(\"Lo siento, el valor es negativo\")\n"
"else:\n"
"   print(math.sqrt(n))"

#: ../../_sources/Introduction/ControlStructures.rst:123
msgid ""
"In this example, the object referred to by ``n`` is checked to see if it "
"is less than zero. If it is, a message is printed stating that it is "
"negative. If it is not, the statement performs the ``else`` clause and "
"computes the square root."
msgstr ""
"En este ejemplo, el objeto referido por `` n`` se comprueba para ver si "
"es menor que cero. Si lo es, se imprime un mensaje indicando que es "
"negativo. Si no es así, la instrucción realiza la cláusula `` else`` y "
"calcula la raíz cuadrada."

#: ../../_sources/Introduction/ControlStructures.rst:128
msgid ""
"Selection constructs, as with any control construct, can be nested so "
"that the result of one question helps decide whether to ask the next. "
"For example, assume that ``score`` is a variable holding a reference to "
"a score for a computer science test."
msgstr ""
"Las estructuras de selección, como con cualquier estructura de control, "
"pueden anidarse de modo que el resultado de una pregunta ayude a decidir "
"si se pregunta al siguiente. Por ejemplo, suponga que `` puntos`` es una "
"variable que contiene una referencia a una puntuación para una prueba de "
"ciencias de la computación."

#: ../../_sources/Introduction/ControlStructures.rst:135
msgid ""
"if score >= 90:\n"
"   print('A')\n"
"else:\n"
"   if score >=80:\n"
"      print('B')\n"
"   else:\n"
"      if score >= 70:\n"
"         print('C')\n"
"      else:\n"
"         if score >= 60:\n"
"            print('D')\n"
"         else:\n"
"            print('F')"
msgstr ""
"if puntos >= 90:\n"
"   print('A')\n"
"else:\n"
"   if puntos >=80:\n"
"      print('B')\n"
"   else:\n"
"      if puntos >= 70:\n"
"         print('C')\n"
"      else:\n"
"         if puntos >= 60:\n"
"            print('D')\n"
"         else:\n"
"            print('F')"

#: ../../_sources/Introduction/ControlStructures.rst:149
msgid ""
"This fragment will classify a value called ``score`` by printing the "
"letter grade earned. If the score is greater than or equal to 90, the "
"statement will print ``A``. If it is not (``else``), the next question "
"is asked. If the score is greater than or equal to 80 then it must be "
"between 80 and 89 since the answer to the first question was false. In "
"this case print ``B`` is printed. You can see that the Python "
"indentation pattern helps to make sense of the association between "
"``if`` and ``else`` without requiring any additional syntactic elements."
msgstr ""
"Este fragmento clasificará un valor llamado `` puntos`` mediante la "
"impresión del grado de letra obtenido. Si la puntuación es mayor o igual "
"a 90, la sentencia imprimirá `` A``. Si no es (`` else``), la siguiente "
"pregunta es hecha. Si la puntuación es mayor o igual a 80, entonces debe "
"estar entre 80 y 89, ya que la respuesta a la primera pregunta era "
"falsa. En este caso se imprimirá la letra \"B\". Puede ver que el patrón "
"de indentación de Python ayuda a dar sentido a la asociación entre `` "
"if`` y `` else`` sin necesidad de elementos sintácticos adicionales."

#: ../../_sources/Introduction/ControlStructures.rst:158
msgid ""
"An alternative syntax for this type of nested selection uses the "
"``elif`` keyword. The ``else`` and the next ``if`` are combined so as to "
"eliminate the need for additional nesting levels. Note that the final "
"``else`` is still necessary to provide the default case if all other "
"conditions fail."
msgstr ""
"Una sintaxis alternativa para este tipo de selección anidada utiliza la "
"palabra clave `` elif``. El `` else`` y el siguiente `` if`` se combinan "
"para eliminar la necesidad de niveles de anidamiento adicionales. Tenga "
"en cuenta que el final `` else`` sigue siendo necesario para "
"proporcionar el caso por defecto si todas las demás condiciones fallan."

#: ../../_sources/Introduction/ControlStructures.rst:166
msgid ""
"if score >= 90:\n"
"   print('A')\n"
"elif score >=80:\n"
"   print('B')\n"
"elif score >= 70:\n"
"   print('C')\n"
"elif score >= 60:\n"
"   print('D')\n"
"else:\n"
"   print('F')"
msgstr ""
"if puntos >= 90:\n"
"   print('A')\n"
"elif puntos >=80:\n"
"   print('B')\n"
"elif puntos >= 70:\n"
"   print('C')\n"
"elif puntos >= 60:\n"
"   print('D')\n"
"else:\n"
"   print('F')"

#: ../../_sources/Introduction/ControlStructures.rst:177
msgid ""
"Python also has a single way selection construct, the ``if`` statement. "
"With this statement, if the condition is true, an action is performed. "
"In the case where the condition is false, processing simply continues on "
"to the next statement after the ``if``. For example, the following "
"fragment will first check to see if the value of a variable ``n`` is "
"negative. If it is, then it is modified by the absolute value function. "
"Regardless, the next action is to compute the square root."
msgstr ""
"Python también tiene una construcción de selección de una sola vía, la "
"instrucción `` if``. Con esta sentencia, si la condición es verdadera, "
"se realiza una acción. En el caso de que la condición sea falsa, el "
"procesamiento simplemente continúa con la siguiente declaración después "
"de `` if``. Por ejemplo, el siguiente fragmento comprobará primero si el "
"valor de una variable `` n`` es negativo. Si lo es, entonces es "
"modificado por la función de valor absoluto. Independientemente, la "
"siguiente acción es calcular la raíz cuadrada."

#: ../../_sources/Introduction/ControlStructures.rst:187
msgid ""
"if n<0:\n"
"   n = abs(n)\n"
"print(math.sqrt(n))"
msgstr ""
"if n<0:\n"
"   n = abs(n)\n"
"print(math.sqrt(n))"

#: ../../_sources/Introduction/ControlStructures.rst:192
#: ../../_sources/Introduction/ControlStructures.rst:262
msgid "Self Check"
msgstr "Autochequeo o verificación"

#: ../../_sources/Introduction/ControlStructures.rst:194
msgid ""
"Test your understanding of what we have covered so far by trying the "
"following exercise.  Modify the code from Activecode 8 so that the final "
"list only contains a single copy of each letter."
msgstr ""
"Pruebe su comprensión de lo que hemos cubierto hasta ahora al intentar "
"el siguiente ejercicio. Modifique el código de Activecode 8 para que la "
"lista final sólo contenga una sola copia de cada letra."

#: ../../_sources/Introduction/ControlStructures.rst:200
msgid "# the answer is: ['c', 'a', 't', 'd', 'o', 'g', 'r', 'b', 'i']"
msgstr "# la respuesta es: ['c', 'a', 't', 'd', 'o', 'g', 'r', 'b', 'i']"

msgid ""
"<div id=\"list_unique\" class=\"video_popup\" >\n"
"<video controls preload=\"none\"  poster=\"../_static/videothumb.png\">\n"
"    <source src=\"http://media.interactivepython.org/pythondsVideos/"
"list_unique.mov\" type=\"video/mp4\"></source>\n"
"    <source src=\"http://media.interactivepython.org/pythondsVideos/"
"list_unique.webm\" type=\"video/webm\"></source>\n"
"    No supported video types\n"
"</video>\n"
"</div>\n"
"<script>\n"
"   jQuery(function($) {\n"
"      var rb = new RunestoneBase();\n"
"      $('#list_unique_thumb').click(function(e) {\n"
"         $('#list_unique').show();\n"
"         $('#list_unique_thumb').hide();\n"
"         rb.logBookEvent({'event':'video','act':'play','div_id': "
"'list_unique'});\n"
"         // Log the run event\n"
"      });\n"
"      $('#list_unique video').one(\"click\", function(){\n"
"        this.play();\n"
"      });\n"
"      $('#list_unique video').one(\"play\", function(){\n"
"        rb.logBookEvent({'event':'video','act':'play','div_id': "
"'list_unique'});\n"
"      });\n"
"   });\n"
"</script>\n"
msgstr ""
"<div id=\"list_unique\" class=\"video_popup\" >\n"
"<video controls preload=\"none\"  poster=\"../_static/videothumb.png\">\n"
"    <source src=\"http://media.interactivepython.org/pythondsVideos/"
"list_unique.mov\" type=\"video/mp4\"></source>\n"
"    <source src=\"http://media.interactivepython.org/pythondsVideos/"
"list_unique.webm\" type=\"video/webm\"></source>\n"
"    Tipo de video no soportado\n"
"</video>\n"
"</div>\n"
"<script>\n"
"   jQuery(function($) {\n"
"      var rb = new RunestoneBase();\n"
"      $('#list_unique_thumb').click(function(e) {\n"
"         $('#list_unique').show();\n"
"         $('#list_unique_thumb').hide();\n"
"         rb.logBookEvent({'event':'video','act':'play','div_id': "
"'list_unique'});\n"
"         // Log the run event\n"
"      });\n"
"      $('#list_unique video').one(\"click\", function(){\n"
"        this.play();\n"
"      });\n"
"      $('#list_unique video').one(\"play\", function(){\n"
"        rb.logBookEvent({'event':'video','act':'play','div_id': "
"'list_unique'});\n"
"      });\n"
"   });\n"
"</script>\n"

#: ../../_sources/Introduction/ControlStructures.rst:212
msgid ""
"Returning to lists, there is an alternative method for creating a list "
"that uses iteration and selection constructs known as a **list "
"comprehension**. A list comprehension allows you to easily create a list "
"based on some processing or selection criteria. For example, if we would "
"like to create a list of the first 10 perfect squares, we could use a "
"``for`` statement:"
msgstr ""
"Regresando a las listas, existe un método alternativo para crear una "
"lista que usa construcciones de iteración y selección conocidas como ** "
"comprensión de listas **. Una comprensión de la lista le permite crear "
"fácilmente una lista basada en algunos criterios de procesamiento o "
"selección. Por ejemplo, si queremos crear una lista de los primeros 10 "
"cuadrados perfectos, podríamos usar una sentencia `` for``:"

#: ../../_sources/Introduction/ControlStructures.rst:221
msgid ""
">>> sqlist=[]\n"
">>> for x in range(1,11):\n"
"         sqlist.append(x*x)\n"
"\n"
">>> sqlist\n"
"[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"
">>>"
msgstr ""
">>> sqlist=[]\n"
">>> for x in range(1,11):\n"
"         sqlist.append(x*x)\n"
"\n"
">>> sqlist\n"
"[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"
">>>"

#: ../../_sources/Introduction/ControlStructures.rst:229
msgid "Using a list comprehension, we can do this in one step as"
msgstr ""
"Usando una lista de comprensión, podemos hacer esto en un paso como"

#: ../../_sources/Introduction/ControlStructures.rst:233
msgid ""
">>> sqlist=[x*x for x in range(1,11)]\n"
">>> sqlist\n"
"[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"
">>>"
msgstr ""
">>> sqlist=[x*x for x in range(1,11)]\n"
">>> sqlist\n"
"[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"
">>>"

#: ../../_sources/Introduction/ControlStructures.rst:238
msgid ""
"The variable ``x`` takes on the values 1 through 10 as specified by the "
"``for`` construct. The value of ``x*x`` is then computed and added to "
"the list that is being constructed. The general syntax for a list "
"comprehension also allows a selection criteria to be added so that only "
"certain items get added. For example,"
msgstr ""
"La variable `` x`` toma los valores de 1 a 10 especificados por el "
"constructor `` for``. El valor de `` x * x`` se calcula y se agrega a la "
"lista que se está construyendo. La sintaxis general para una comprensión "
"de listas también permite agregar un criterio de selección para que solo "
"se agreguen ciertos elementos. Por ejemplo,"

#: ../../_sources/Introduction/ControlStructures.rst:246
msgid ""
">>> sqlist=[x*x for x in range(1,11) if x%2 != 0]\n"
">>> sqlist\n"
"[1, 9, 25, 49, 81]\n"
">>>"
msgstr ""
">>> sqlist=[x*x for x in range(1,11) if x%2 != 0]\n"
">>> sqlist\n"
"[1, 9, 25, 49, 81]\n"
">>>"

#: ../../_sources/Introduction/ControlStructures.rst:251
msgid ""
"This list comprehension constructed a list that only contained the "
"squares of the odd numbers in the range from 1 to 10. Any sequence that "
"supports iteration can be used within a list comprehension to construct "
"a new list."
msgstr ""
"Esta lista de comprensión construyó una lista que sólo contenía los "
"cuadrados de los números impares en el rango de 1 a 10. Cualquier "
"secuencia que apoya la iteración se puede utilizar dentro de una lista "
"de comprensión para construir una nueva lista."

#: ../../_sources/Introduction/ControlStructures.rst:258
msgid ""
">>>[ch.upper() for ch in 'comprehension' if ch not in 'aeiou']\n"
"['C', 'M', 'P', 'R', 'H', 'N', 'S', 'N']\n"
">>>"
msgstr ""
">>>[ch.upper() for ch in 'comprehension' if ch not in 'aeiou']\n"
"['C', 'M', 'P', 'R', 'H', 'N', 'S', 'N']\n"
">>>"

#: ../../_sources/Introduction/ControlStructures.rst:264
msgid ""
"Test your understanding of list comprehensions by redoing Activecode 8 "
"using list comprehensions.  For an extra challenge, see if you can "
"figure out how to remove the duplicates."
msgstr ""
"Pruebe su comprensión de las listas de comprensiones rehaciendo "
"Activecode 8 utilizando listas comprensivas. Para un desafío adicional, "
"vea si puede averiguar cómo eliminar los duplicados."

#: ../../_sources/Introduction/ControlStructures.rst:270
msgid ""
"# the answer is: ['c', 'a', 't', 'd', 'o', 'g', 'r', 'a', 'b', 'b', 'i', "
"'t']"
msgstr ""
"# la respuesta es: ['c', 'a', 't', 'd', 'o', 'g', 'r', 'a', 'b', 'b', "
"'i', 't']"

# Carlos Sisek
# carlos.sisek@gmail.com
# Diplomatura en Software Libre
# Universidad del Este
# 2017
msgid ""
"<div id=\"listcomp\" class=\"video_popup\" >\n"
"<video controls preload=\"none\"  poster=\"../_static/videothumb.png\">\n"
"    <source src=\"http://media.interactivepython.org/pythondsVideos/"
"listcomp.mov\" type=\"video/mp4\"></source>\n"
"    <source src=\"http://media.interactivepython.org/pythondsVideos/"
"listcomp.webm\" type=\"video/webm\"></source>\n"
"    No supported video types\n"
"</video>\n"
"</div>\n"
"<script>\n"
"   jQuery(function($) {\n"
"      var rb = new RunestoneBase();\n"
"      $('#listcomp_thumb').click(function(e) {\n"
"         $('#listcomp').show();\n"
"         $('#listcomp_thumb').hide();\n"
"         rb.logBookEvent({'event':'video','act':'play','div_id': "
"'listcomp'});\n"
"         // Log the run event\n"
"      });\n"
"      $('#listcomp video').one(\"click\", function(){\n"
"        this.play();\n"
"      });\n"
"      $('#listcomp video').one(\"play\", function(){\n"
"        rb.logBookEvent({'event':'video','act':'play','div_id': "
"'listcomp'});\n"
"      });\n"
"   });\n"
"</script>\n"
msgstr ""
"<div id=\"listcomp\" class=\"video_popup\" >\n"
"<video controls preload=\"none\"  poster=\"../_static/videothumb.png\">\n"
"    <source src=\"http://media.interactivepython.org/pythondsVideos/"
"listcomp.mov\" type=\"video/mp4\"></source>\n"
"    <source src=\"http://media.interactivepython.org/pythondsVideos/"
"listcomp.webm\" type=\"video/webm\"></source>\n"
"    Tipo de video no soportado\n"
"</video>\n"
"</div>\n"
"<script>\n"
"   jQuery(function($) {\n"
"      var rb = new RunestoneBase();\n"
"      $('#listcomp_thumb').click(function(e) {\n"
"         $('#listcomp').show();\n"
"         $('#listcomp_thumb').hide();\n"
"         rb.logBookEvent({'event':'video','act':'play','div_id': "
"'listcomp'});\n"
"         // Log the run event\n"
"      });\n"
"      $('#listcomp video').one(\"click\", function(){\n"
"        this.play();\n"
"      });\n"
"      $('#listcomp video').one(\"play\", function(){\n"
"        rb.logBookEvent({'event':'video','act':'play','div_id': "
"'listcomp'});\n"
"      });\n"
"   });\n"
"</script>\n"
