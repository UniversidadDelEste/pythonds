# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: 2017-05-06 15:22-0500\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"Last-Translator: Francisco Silva G. <francisco.silva.garces@gmail.com>\n"
"Language-Team: \n"
"Language: es\n"
"X-Generator: Poedit 2.0.1\n"

#: ../../_sources/Introduction/WhyStudyDataStructuresandAbstractDataTypes.rst:6
msgid "Why Study Data Structures and Abstract Data Types?"
msgstr ""
"¿Por qué estudiar Estructuras de Datos y Tipos de Datos Abstractos?"

#: ../../_sources/Introduction/WhyStudyDataStructuresandAbstractDataTypes.rst:8
msgid ""
"To manage the complexity of problems and the problem-solving process, "
"computer scientists use abstractions to allow them to focus on the “big "
"picture” without getting lost in the details. By creating models of the "
"problem domain, we are able to utilize a better and more efficient "
"problem-solving process. These models allow us to describe the data that "
"our algorithms will manipulate in a much more consistent way with "
"respect to the problem itself."
msgstr ""
"Para manejar la complejidad de los problemas y el proceso de resolución "
"de problemas, los científicos de la computación usan abstracciones para "
"permitirles concentrarse en el \"panorama general\" sin perderse en los "
"detalles. Al crear modelos del dominio del problema, podemos utilizar un "
"mejor y más eficiente proceso de resolución de problemas. Estos modelos "
"nos permiten describir los datos que nuestros algoritmos manipularán de "
"una manera mucho más consistente con respecto al problema mismo."

#: ../../_sources/Introduction/WhyStudyDataStructuresandAbstractDataTypes.rst:16
msgid ""
"Earlier, we referred to procedural abstraction as a process that hides "
"the details of a particular function to allow the user or client to view "
"it at a very high level. We now turn our attention to a similar idea, "
"that of **data abstraction**. An **abstract data type**, sometimes "
"abbreviated **ADT**, is a logical description of how we view the data "
"and the operations that are allowed without regard to how they will be "
"implemented. This means that we are concerned only with what the data is "
"representing and not with how it will eventually be constructed. By "
"providing this level of abstraction, we are creating an "
"**encapsulation** around the data. The idea is that by encapsulating the "
"details of the implementation, we are hiding them from the user’s view. "
"This is called **information hiding**."
msgstr ""
"Anteriormente, nos referíamos a la abstracción de procedimiento como un "
"proceso que oculta los detalles de una función particular para permitir "
"que el usuario o cliente lo vea a un nivel muy alto. Ahora volvemos "
"nuestra atención a una idea similar, la de **abstracción de datos**. Un "
"**tipo de datos abstractos**, a veces abreviado **TDA**, es una "
"descripción lógica de cómo vemos los datos y las operaciones que se "
"permiten sin tener en cuenta cómo se implementarán. Esto significa que "
"sólo nos interesa lo que los datos representan y no la forma en que "
"finalmente se construirán. Al proporcionar este nivel de abstracción, "
"estamos creando una **encapsulación** alrededor de los datos. La idea es "
"que, al encapsular los detalles de la implementación, los estamos "
"escondiendo de la vista del usuario. A esto se le llama **ocultación de "
"información**."

#: ../../_sources/Introduction/WhyStudyDataStructuresandAbstractDataTypes.rst:29
msgid ""
":ref:`Figure 2 <fig_adt>` shows a picture of what an abstract data type "
"is and how it operates. The user interacts with the interface, using the "
"operations that have been specified by the abstract data type. The "
"abstract data type is the shell that the user interacts with. The "
"implementation is hidden one level deeper. The user is not concerned "
"with the details of the implementation."
msgstr ""
":ref:`Figura 2 <fig_adt>` muestra una imagen de lo que es un tipo de "
"datos abstractos y cómo funciona. El usuario interactúa con la interfaz, "
"utilizando las operaciones que han sido especificadas por el tipo de "
"datos abstractos. El tipo de datos abstracto es la capa o cascarón con "
"el que el usuario interactúa. La implementación está oculta un nivel más "
"profundo. El usuario no está interesado en los detalles de la "
"implementación."

#: ../../_sources/Introduction/WhyStudyDataStructuresandAbstractDataTypes.rst:42
msgid ".. image:: Introduction/Figures/adt.png"
msgstr ""

#: ../../_sources/Introduction/WhyStudyDataStructuresandAbstractDataTypes.rst:42
msgid "Figure 2: Abstract Data Type"
msgstr "Figura 2: Tipo de Dato Abstracto"

#: ../../_sources/Introduction/WhyStudyDataStructuresandAbstractDataTypes.rst:44
msgid ""
"The implementation of an abstract data type, often referred to as a "
"**data structure**, will require that we provide a physical view of the "
"data using some collection of programming constructs and primitive data "
"types. As we discussed earlier, the separation of these two perspectives "
"will allow us to define the complex data models for our problems without "
"giving any indication as to the details of how the model will actually "
"be built. This provides an **implementation-independent** view of the "
"data. Since there will usually be many different ways to implement an "
"abstract data type, this implementation independence allows the "
"programmer to switch the details of the implementation without changing "
"the way the user of the data interacts with it. The user can remain "
"focused on the problem-solving process."
msgstr ""
"La implementación de un tipo de dato abstracto, a menudo denominado "
"**estructura de datos**, requerirá que proporcionemos una vista física "
"de los datos usando alguna colección de construcciones de programación y "
"tipos de datos primitivos. Como hemos visto anteriormente, la separación "
"de estas dos perspectivas nos permitirá definir los modelos de datos "
"complejos para nuestros problemas sin dar ninguna indicación sobre los "
"detalles de cómo se construirá realmente el modelo. Esto proporciona una "
"vista de los datos **independiente de la implementación**. Dado que "
"normalmente habrá muchas maneras diferentes de implementar un tipo de "
"datos abstracto, esta independencia de implementación permite al "
"programador cambiar los detalles de la implementación sin cambiar la "
"forma en que el usuario de los datos interactúa con él. El usuario puede "
"permanecer centrado en el proceso de resolución de problemas."
