# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: 2017-05-06 14:27-0300\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"Last-Translator: Mariano Reingart <reingart@gmail.com>\n"
"Language-Team: \n"
"Language: es_AR\n"
"X-Generator: Poedit 1.8.7.1\n"

#: ../../_sources/Introduction/InputandOutput.rst:6
msgid "Input and Output"
msgstr "Entrada y salida"

#: ../../_sources/Introduction/InputandOutput.rst:8
msgid ""
"We often have a need to interact with users, either to get data or to provide "
"some sort of result. Most programs today use a dialog box as a way of asking "
"the user to provide some type of input. While Python does have a way to "
"create dialog boxes, there is a much simpler function that we can use. Python "
"provides us with a function that allows us to ask a user to enter some data "
"and returns a reference to the data in the form of a string. The function is "
"called ``input``."
msgstr ""
"A menudo tenemos la necesidad de interactuar con los usuarios, ya sea para "
"obtener datos o para proporcionar algún tipo de resultado. La mayoría de los "
"programas de hoy en día utilizan un cuadro de diálogo como una forma de pedir "
"al usuario para proporcionar algún tipo de entrada. Aunque Python tiene una "
"forma de crear cuadros de diálogo, hay una función mucho más simple que "
"podemos usar. Python nos proporciona una función que nos permite pedirle a un "
"usuario que introduzca algunos datos y devuelva una referencia a los datos en "
"forma de cadena. La función se llama ``input``."

#: ../../_sources/Introduction/InputandOutput.rst:17
msgid ""
"Python’s input function takes a single parameter that is a string. This "
"string is often called the **prompt** because it contains some helpful text "
"prompting the user to enter something. For example, you might call input as "
"follows:"
msgstr ""
"La función de entrada de Python toma un solo parámetro que es una cadena. "
"Esta cadena a menudo se denomina **prompt** (indicador) porque contiene algún "
"texto útil que le pide al usuario que introduzca algo. Por ejemplo, puede "
"llamar a la entrada de la siguiente manera:"

#: ../../_sources/Introduction/InputandOutput.rst:24
msgid "aName = input('Please enter your name: ')"
msgstr "unNombre = input('Por favor, ingrese su nombre: ')"

#: ../../_sources/Introduction/InputandOutput.rst:26
msgid ""
"Now whatever the user types after the prompt will be stored in the ``aName`` "
"variable. Using the input function, we can easily write instructions that "
"will prompt the user to enter data and then incorporate that data into "
"further processing. For example, in the following two statements, the first "
"asks the user for their name and the second prints the result of some simple "
"processing based on the string that is provided."
msgstr ""
"Ahora cualquiera que sea el tipo de usuario después de la solicitud, se "
"almacenará en la variable ``unNombre``. Usando la función de entrada, podemos "
"escribir fácilmente instrucciones que le pedirán al usuario que introduzca "
"datos y luego incorpore esos datos al proceso posterior. Por ejemplo, en las "
"siguientes dos sentencias, la primera pregunta al usuario por su nombre y la "
"segunda imprime el resultado de algún procesamiento simple basado en la "
"cadena que se proporciona."

#: ../../_sources/Introduction/InputandOutput.rst:40
msgid "data-caption='The input Function Returns a String'"
msgstr "data-caption='La función de entrada devuelve una cadena'"

#: ../../_sources/Introduction/InputandOutput.rst:40
msgid ""
"aName = input(\"Please enter your name \")\n"
"print(\"Your name in all capitals is\",aName.upper(),\n"
"      \"and has length\", len(aName))"
msgstr ""
"unNombre = input(\"Por favor, ingrese su nombre \")\n"
"print(\"Su nombre en mayúsculas es\", unNombre.upper(),\n"
"      \"y tiene una longitud de \", len(nombre))"

#: ../../_sources/Introduction/InputandOutput.rst:41
msgid ""
"It is important to note that the value returned from the ``input`` function "
"will be a string representing the exact characters that were entered after "
"the prompt. If you want this string interpreted as another type, you must "
"provide the type conversion explicitly. In the statements below, the string "
"that is entered by the user is converted to a float so that it can be used in "
"further arithmetic processing."
msgstr ""
"Es importante tener en cuenta que el valor devuelto por la función ``input`` "
"será una cadena que representa los caracteres exactos que se ingresaron "
"después del indicador. Si desea que esta cadena sea interpretada como otro "
"tipo, debe proporcionar la conversión de tipo de forma explícita. En las "
"instrucciones a continuación, la cadena que se introduce por el usuario se "
"convierte en un flotador para que pueda utilizarse en otro procesamiento "
"aritmético."

#: ../../_sources/Introduction/InputandOutput.rst:50
msgid ""
"sradius = input(\"Please enter the radius of the circle \")\n"
"radius = float(sradius)\n"
"diameter = 2 * radius"
msgstr ""
"sradio = input(\"Por favor, ingrese el radio del círculo \")\n"
"radios = float(sradio)\n"
"diametro = 2 * radios"

#: ../../_sources/Introduction/InputandOutput.rst:55
msgid "String Formatting"
msgstr "Dando formato a las cadenas"

#: ../../_sources/Introduction/InputandOutput.rst:57
msgid ""
"We have already seen that the ``print`` function provides a very simple way "
"to output values from a Python program. ``print`` takes zero or more "
"parameters and displays them using a single blank as the default separator. "
"It is possible to change the separator character by setting the ``sep`` "
"argument. In addition, each print ends with a newline character by default. "
"This behavior can be changed by setting the ``end`` argument. These "
"variations are shown in the following session:"
msgstr ""
"Ya hemos visto que la función ``print`` proporciona una forma muy sencilla de "
"generar valores desde un programa Python. ``print`` toma cero o más "
"parámetros y los muestra usando un solo espacio en blanco como el separador "
"predeterminado. Es posible cambiar el carácter separador estableciendo el "
"argumento ``sep``. Además, cada impresión finaliza con un carácter de nueva "
"línea de forma predeterminada. Este comportamiento se puede cambiar "
"estableciendo el argumento ``end``. Estas variaciones se muestran en la "
"siguiente sesión:"

#: ../../_sources/Introduction/InputandOutput.rst:68
msgid ""
">>> print(\"Hello\")\n"
"Hello\n"
">>> print(\"Hello\",\"World\")\n"
"Hello World\n"
">>> print(\"Hello\",\"World\", sep=\"***\")\n"
"Hello***World\n"
">>> print(\"Hello\",\"World\", end=\"***\")\n"
"Hello World***>>>"
msgstr ""
">>> print(\"Hola\")\n"
"Hola\n"
">>> print(\"Hola\",\"Mundo\")\n"
"Hola Mundo\n"
">>> print(\"Hola\",\"Mundo\", sep=\"***\")\n"
"Hola***Mundo\n"
">>> print(\"Hola\",\"Mundo\", end=\"***\")\n"
"Hello World***"

#: ../../_sources/Introduction/InputandOutput.rst:77
msgid ""
"It is often useful to have more control over the look of your output. "
"Fortunately, Python provides us with an alternative called **formatted "
"strings**. A formatted string is a template in which words or spaces that "
"will remain constant are combined with placeholders for variables that will "
"be inserted into the string. For example, the statement"
msgstr ""
"A menudo es útil tener más control sobre la apariencia de su salida. "
"Afortunadamente, Python nos proporciona una alternativa llamada **cadenas "
"formateadas**. Una cadena formateada es una plantilla en la que las palabras "
"o espacios que permanecen constantes se combinan con marcadores de posición "
"para variables que se insertarán en la cadena. Por ejemplo, la declaración"

#: ../../_sources/Introduction/InputandOutput.rst:85
msgid "print(aName, \"is\", age, \"years old.\")"
msgstr "print(unNombre, \"tiene\", edad, \"años.\")"

#: ../../_sources/Introduction/InputandOutput.rst:87
msgid ""
"contains the words ``is`` and ``years old``, but the name and the age will "
"change depending on the variable values at the time of execution. Using a "
"formatted string, we write the previous statement as"
msgstr ""
"Contiene las palabras ``tiene`` y ``años``, pero el nombre y la edad "
"cambiarán dependiendo de los valores de la variable en el momento de la "
"ejecución. Usando una cadena formateada, escribimos la sentencia anterior como"

#: ../../_sources/Introduction/InputandOutput.rst:93
#, python-format
msgid "print(\"%s is %d years old.\" % (aName, age))"
msgstr "print(\"%s tiene %d años.\" % (unNombre, edad))"

#: ../../_sources/Introduction/InputandOutput.rst:95
msgid ""
"This simple example illustrates a new string expression. The ``%`` operator "
"is a string operator called the **format operator**. The left side of the "
"expression holds the template or format string, and the right side holds a "
"collection of values that will be substituted into the format string. Note "
"that the number of values in the collection on the right side corresponds "
"with the number of ``%`` characters in the format string. Values are taken—in "
"order, left to right—from the collection and inserted into the format string."
msgstr ""
"Este ejemplo simple ilustra una nueva expresión de cadena. El operador ``%`` "
"es un operador de cadena llamado **operador de formato**. El lado izquierdo "
"de la expresión contiene la cadena de formato o formato y el lado derecho "
"contiene una colección de valores que se sustituirá en la cadena de formato. "
"Tenga en cuenta que el número de valores en la colección en el lado derecho "
"corresponde con el número de caracteres ``%`` en la cadena de formato. Los "
"valores se toman en orden, izquierda a derecha de la colección y se inserta "
"en la cadena de formato."

#: ../../_sources/Introduction/InputandOutput.rst:104
#, python-format
msgid ""
"Let’s look at both sides of this formatting expression in more detail. The "
"format string may contain one or more conversion specifications. A conversion "
"character tells the format operator what type of value is going to be "
"inserted into that position in the string. In the example above, the ``%s`` "
"specifies a string, while the ``%d`` specifies an integer. Other possible "
"type specifications include ``i``, ``u``, ``f``, ``e``, ``g``, ``c``, or ``"
"%``. :ref:`Table 9 <tab_fmta>` summarizes all of the various type "
"specifications."
msgstr ""
"Echemos un vistazo a ambos lados de esta expresión de formato con más "
"detalle. La cadena de formato puede contener una o más especificaciones de "
"conversión. Un carácter de conversión indica al operador de formato qué tipo "
"de valor se va a insertar en esa posición en la cadena. En el ejemplo "
"anterior, el ``%s`` especifica una cadena, mientras que el ``%d`` especifica "
"un entero. Otras posibles especificaciones de tipo son ``i``, ``u``, ``f``, "
"``e``, ``g ``, ``c`` o ``%``. :ref:`Tabla 9 <tab_fmta>` resume todas las "
"especificaciones de los distintos tipos."

#: ../../_sources/Introduction/InputandOutput.rst:115
msgid "**Table 9: String Formatting Conversion Characters**"
msgstr "**Tabla 9: Caracteres de conversión de formato de cadena**"

#: ../../_sources/Introduction/InputandOutput.rst:118
msgid "**Character**"
msgstr "**Caracter**"

#: ../../_sources/Introduction/InputandOutput.rst:118
msgid "**Output Format**"
msgstr "**Formato de salida**"

#: ../../_sources/Introduction/InputandOutput.rst:120
msgid "``d``, ``i``"
msgstr "``d``, ``i``"

#: ../../_sources/Introduction/InputandOutput.rst:120
msgid "Integer"
msgstr "entero"

#: ../../_sources/Introduction/InputandOutput.rst:121
msgid "``u``"
msgstr "``u``"

#: ../../_sources/Introduction/InputandOutput.rst:121
msgid "Unsigned integer"
msgstr "Entero sin signo"

#: ../../_sources/Introduction/InputandOutput.rst:122
msgid "``f``"
msgstr "``f``"

#: ../../_sources/Introduction/InputandOutput.rst:122
msgid "Floating point as m.ddddd"
msgstr "Punto flotante como m.ddddd"

#: ../../_sources/Introduction/InputandOutput.rst:123
msgid "``e``"
msgstr "``e``"

#: ../../_sources/Introduction/InputandOutput.rst:123
msgid "Floating point as m.ddddde+/-xx"
msgstr "Punto flotante como m.ddddde+/-xx"

#: ../../_sources/Introduction/InputandOutput.rst:124
msgid "``E``"
msgstr "``E``"

#: ../../_sources/Introduction/InputandOutput.rst:124
msgid "Floating point as m.dddddE+/-xx"
msgstr "Punto flotante como m.dddddE+/-xx"

#: ../../_sources/Introduction/InputandOutput.rst:125
msgid "``g``"
msgstr "``g``"

#: ../../_sources/Introduction/InputandOutput.rst:125
#, python-format
msgid ""
"Use ``%e`` for exponents less than :math:`-4` or greater than :math:`+5`, "
"otherwise use ``%f``"
msgstr ""
"Utilice ``% e`` para exponentes menores que: math: `-4` o mayor que: math:` + "
"5`, de lo contrario use ``% f``"

#: ../../_sources/Introduction/InputandOutput.rst:126
msgid "``c``"
msgstr "``c``"

#: ../../_sources/Introduction/InputandOutput.rst:126
msgid "Single character"
msgstr "Caracter simple"

#: ../../_sources/Introduction/InputandOutput.rst:127
msgid "``s``"
msgstr "``s``"

#: ../../_sources/Introduction/InputandOutput.rst:127
msgid ""
"String, or any Python data object that can be converted to a string by using "
"the ``str`` function."
msgstr ""
"String o cualquier objeto de datos de Python que pueda convertirse en una "
"cadena usando la función `` str``."

#: ../../_sources/Introduction/InputandOutput.rst:128
msgid "``%``"
msgstr "``%``"

#: ../../_sources/Introduction/InputandOutput.rst:128
#, python-format
msgid "Insert a literal % character"
msgstr "Inserta un literal % caracter"

#: ../../_sources/Introduction/InputandOutput.rst:132
msgid ""
"In addition to the format character, you can also include a format modifier "
"between the ``%`` and the format character. Format modifiers may be used to "
"left-justify or right-justifiy the value with a specified field width. "
"Modifiers can also be used to specify the field width along with a number of "
"digits after the decimal point. :ref:`Table 10 <tab_fmtaddsa>` explains these "
"format modifiers"
msgstr ""
"Además del carácter de formato, también puede incluir un modificador de "
"formato entre el ``%`` y el carácter de formato. Los modificadores de formato "
"se pueden utilizar para justificar a la izquierda o justificar a la derecha "
"el valor con un ancho de campo especificado. Los modificadores también se "
"pueden utilizar para especificar el ancho del campo junto con un número de "
"dígitos después del punto decimal. :ref:`Tabla 10 <tab_fmtaddsa>` explica "
"estos modificadores de formato"

#: ../../_sources/Introduction/InputandOutput.rst:141
msgid "**Table 10: Additional formatting options**"
msgstr "**Tabla 10: Opciones adicionales de formato**"

#: ../../_sources/Introduction/InputandOutput.rst:144
msgid "**Modifier**"
msgstr "**Modificador**"

#: ../../_sources/Introduction/InputandOutput.rst:144
msgid "**Example**"
msgstr "**Ejemplo**"

#: ../../_sources/Introduction/InputandOutput.rst:144
msgid "**Description**"
msgstr "**Descripción**"

#: ../../_sources/Introduction/InputandOutput.rst:146
msgid "number"
msgstr "número"

#: ../../_sources/Introduction/InputandOutput.rst:146
#, python-format
msgid "``%20d``"
msgstr "``%20d``"

#: ../../_sources/Introduction/InputandOutput.rst:146
msgid "Put the value in a field width of 20"
msgstr "Coloque el valor en un ancho de campo de 20"

#: ../../_sources/Introduction/InputandOutput.rst:147
msgid "``-``"
msgstr "``-``"

#: ../../_sources/Introduction/InputandOutput.rst:147
#, python-format
msgid "``%-20d``"
msgstr "``%-20d``"

#: ../../_sources/Introduction/InputandOutput.rst:147
msgid "Put the value in a field 20 characters wide, left-justified"
msgstr "Coloque el valor en un campo de 20 caracteres de ancho, a la izquierda"

#: ../../_sources/Introduction/InputandOutput.rst:148
msgid "``+``"
msgstr "``+``"

#: ../../_sources/Introduction/InputandOutput.rst:148
#, python-format
msgid "``%+20d``"
msgstr "``%+20d``"

#: ../../_sources/Introduction/InputandOutput.rst:148
msgid "Put the value in a field 20 characters wide, right-justified"
msgstr "Coloque el valor en un campo de 20 caracteres de ancho, a la derecha"

#: ../../_sources/Introduction/InputandOutput.rst:149
msgid "``0``"
msgstr "``0``"

#: ../../_sources/Introduction/InputandOutput.rst:149
#, python-format
msgid "``%020d``"
msgstr "``%020d``"

#: ../../_sources/Introduction/InputandOutput.rst:149
msgid "Put the value in a field 20 characters wide, fill in with leading zeros."
msgstr ""
"Coloque el valor en un campo de 20 caracteres de ancho, rellenar con ceros a "
"la izquierda."

#: ../../_sources/Introduction/InputandOutput.rst:150
msgid "``.``"
msgstr "``.``"

#: ../../_sources/Introduction/InputandOutput.rst:150
#, python-format
msgid "``%20.2f``"
msgstr "``%20.2f``"

#: ../../_sources/Introduction/InputandOutput.rst:150
msgid ""
"Put the value in a field 20 characters wide with 2 characters to the right of "
"the decimal point."
msgstr ""
"Coloque el valor en un campo de 20 caracteres de ancho con 2 caracteres a la "
"derecha del punto decimal."

#: ../../_sources/Introduction/InputandOutput.rst:151
msgid "``(name)``"
msgstr "``(name)``"

#: ../../_sources/Introduction/InputandOutput.rst:151
#, python-format
msgid "``%(name)d``"
msgstr "``%(name)d``"

#: ../../_sources/Introduction/InputandOutput.rst:151
msgid "Get the value from the supplied dictionary using ``name`` as the key."
msgstr ""
"Obtenga el valor del diccionario suministrado usando ``name`` como clave."

#: ../../_sources/Introduction/InputandOutput.rst:155
msgid ""
"The right side of the format operator is a collection of values that will be "
"inserted into the format string. The collection will be either a tuple or a "
"dictionary. If the collection is a tuple, the values are inserted in order of "
"position. That is, the first element in the tuple corresponds to the first "
"format character in the format string. If the collection is a dictionary, the "
"values are inserted according to their keys. In this case all format "
"characters must use the ``(name)`` modifier to specify the name of the key."
msgstr ""
"El lado derecho del operador de formato es una colección de valores que se "
"insertarán en la cadena de formato. La colección será una tupla o un "
"diccionario. Si la colección es una tupla, los valores se insertan en orden "
"de posición. Es decir, el primer elemento de la tupla corresponde al primer "
"carácter de formato en la cadena de formato. Si la colección es un "
"diccionario, los valores se insertan de acuerdo con sus claves. En este caso, "
"todos los caracteres de formato deben utilizar el modificador ``(nombre)`` "
"para especificar el nombre de la clave."

#: ../../_sources/Introduction/InputandOutput.rst:166
#, python-format
msgid ""
">>> price = 24\n"
">>> item = \"banana\"\n"
">>> print(\"The %s costs %d cents\"%(item,price))\n"
"The banana costs 24 cents\n"
">>> print(\"The %+10s costs %5.2f cents\"%(item,price))\n"
"The     banana costs 24.00 cents\n"
">>> print(\"The %+10s costs %10.2f cents\"%(item,price))\n"
"The     banana costs      24.00 cents\n"
">>> itemdict = {\"item\":\"banana\",\"cost\":24}\n"
">>> print(\"The %(item)s costs %(cost)7.1f cents\"%itemdict)\n"
"The banana costs    24.0 cents\n"
">>>"
msgstr ""
">>> precio = 24\n"
">>> item = \"banana\"\n"
">>> print(\"La %s cuesta %d centavos\"%(item,price))\n"
"La banana cuesta 24 centavos\n"
">>> print(\"La %+10s cuesta %5.2f centavoss\"%(item,price))\n"
"La     banana cuesta 24.00 centavoss\n"
">>> print(\"La %+10s cuesta %10.2f centavoss\"%(item,price))\n"
"La     banana cuesta      24.00 centavoss\n"
">>> itemdiccionario = {\"item\":\"banana\",\"costo\":24}\n"
">>> print(\"La %(item)s cuesta %(cost)7.1f centavos\"%itemdict)\n"
"La banana cuesta    24.0 centavos\n"
">>>"

# Carlos Sisek
# carlos.sisek@gmail.com
# Diplomatura en Software Libre
# Universidad del Este
# 2017
#: ../../_sources/Introduction/InputandOutput.rst:179
msgid ""
"In addition to format strings that use format characters and format "
"modifiers, Python strings also include a ``format`` method that can be used "
"in conjunction with a new ``Formatter`` class to implement complex string "
"formatting. More about these features can be found in the Python library "
"reference manual."
msgstr ""
"Además de las cadenas de formato que utilizan caracteres de formato y "
"modificadores de formato, las cadenas Python también incluyen un método "
"``format`` que se puede usar junto con una nueva clase ``Formatter`` para "
"implementar el formato de cadenas complejas. Más información sobre estas "
"características se puede encontrar en el manual de referencia de la "
"biblioteca de Python."
