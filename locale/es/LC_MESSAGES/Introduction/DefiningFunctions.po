# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Introduction/DefiningFunctions.rst:6
msgid "Defining Functions"
msgstr ""

#: ../../_sources/Introduction/DefiningFunctions.rst:8
msgid ""
"The earlier example of procedural abstraction called upon a Python "
"function called ``sqrt`` from the math module to compute the square root."
" In general, we can hide the details of any computation by defining a "
"function. A function definition requires a name, a group of parameters, "
"and a body. It may also explicitly return a value. For example, the "
"simple function defined below returns the square of the value you pass "
"into it."
msgstr ""

#: ../../_sources/Introduction/DefiningFunctions.rst:18
msgid ""
">>> def square(n):\n"
"...    return n**2\n"
"...\n"
">>> square(3)\n"
"9\n"
">>> square(square(3))\n"
"81\n"
">>>"
msgstr ""

#: ../../_sources/Introduction/DefiningFunctions.rst:27
msgid ""
"The syntax for this function definition includes the name, ``square``, "
"and a parenthesized list of formal parameters. For this function, ``n`` "
"is the only formal parameter, which suggests that ``square`` needs only "
"one piece of data to do its work. The details, hidden “inside the box,” "
"simply compute the result of ``n**2`` and return it. We can invoke or "
"call the ``square`` function by asking the Python environment to evaluate"
" it, passing an actual parameter value, in this case, ``3``. Note that "
"the call to ``square`` returns an integer that can in turn be passed to "
"another invocation."
msgstr ""

#: ../../_sources/Introduction/DefiningFunctions.rst:37
msgid ""
"We could implement our own square root function by using a well-known "
"technique called “Newton’s Method.” Newton’s Method for approximating "
"square roots performs an iterative computation that converges on the "
"correct value. The equation :math:`newguess = \\frac {1}{2} * (oldguess +"
" \\frac {n}{oldguess})` takes a value :math:`n` and repeatedly guesses "
"the square root by making each :math:`newguess` the :math:`oldguess` in "
"the subsequent iteration. The initial guess used here is :math:`\\frac "
"{n}{2}`. :ref:`Listing 1 <lst_root>` shows a function definition that "
"accepts a value :math:`n` and returns the square root of :math:`n` after "
"making 20 guesses. Again, the details of Newton’s Method are hidden "
"inside the function definition and the user does not have to know "
"anything about the implementation to use the function for its intended "
"purpose. :ref:`Listing 1 <lst_root>` also shows the use of the # "
"character as a comment marker. Any characters that follow the # on a line"
" are ignored."
msgstr ""

#: ../../_sources/Introduction/DefiningFunctions.rst:58
msgid "**Listing 1**"
msgstr ""

#: ../../_sources/Introduction/DefiningFunctions.rst:60
msgid ""
"def squareroot(n):\n"
"    root = n/2    #initial guess will be 1/2 of n\n"
"    for k in range(20):\n"
"        root = (1/2)*(root + (n / root))\n"
"\n"
"    return root"
msgstr ""

#: ../../_sources/Introduction/DefiningFunctions.rst:72
msgid ""
">>>squareroot(9)\n"
"3.0\n"
">>>squareroot(4563)\n"
"67.549981495186216\n"
">>>"
msgstr ""

#: ../../_sources/Introduction/DefiningFunctions.rst:78
msgid "Self Check"
msgstr ""

#: ../../_sources/Introduction/DefiningFunctions.rst:80
msgid ""
"Here's a self check that really covers everything so far.  You may have "
"heard of the infinite monkey theorem?  The theorem states that a monkey "
"hitting keys at random on a typewriter keyboard for an infinite amount of"
" time will almost surely type a given text, such as the complete works of"
" William Shakespeare.  Well, suppose we replace a monkey with a Python "
"function.  How long do you think it would take for a Python function to "
"generate just one sentence of Shakespeare?  The sentence we'll shoot for "
"is:  \"methinks it is like a weasel\""
msgstr ""

#: ../../_sources/Introduction/DefiningFunctions.rst:83
msgid ""
"You're not going to want to run this one in the browser, so fire up your "
"favorite Python IDE.  The way we'll simulate this is to write a function "
"that generates a string that is 27 characters long by choosing random "
"letters from the 26 letters in the alphabet plus the space.  We'll write "
"another function that will score each generated string by comparing the "
"randomly generated string to the goal."
msgstr ""

#: ../../_sources/Introduction/DefiningFunctions.rst:85
#, python-format
msgid ""
"A third function will repeatedly call generate and score, then if 100% of"
" the letters are correct we are done.  If the letters are not correct "
"then we will generate a whole new string.To make it easier to follow your"
" program's progress this third function should print out the best string "
"generated so far and its score every 1000 tries."
msgstr ""

#: ../../_sources/Introduction/DefiningFunctions.rst:88
msgid "Self Check Challenge"
msgstr ""

#: ../../_sources/Introduction/DefiningFunctions.rst:90
msgid ""
"See if you can improve upon the program in the self check by keeping "
"letters that are correct and only modifying one character in the best "
"string so far.  This is a type of algorithm in the class of 'hill "
"climbing' algorithms, that is we only keep the result if it is better "
"than the previous one."
msgstr ""

msgid ""
"<div id=\"monkeyvid\" class=\"video_popup\" >\n"
"<video controls preload=\"none\"  poster=\"../_static/videothumb.png\">\n"
"    <source "
"src=\"http://media.interactivepython.org/pythondsVideos/monkeys.mov\" "
"type=\"video/mp4\"></source>\n"
"    <source "
"src=\"http://media.interactivepython.org/pythondsVideos/monkeys.webm\" "
"type=\"video/webm\"></source>\n"
"    No supported video types\n"
"</video>\n"
"</div>\n"
"<script>\n"
"   jQuery(function($) {\n"
"      var rb = new RunestoneBase();\n"
"      $('#monkeyvid_thumb').click(function(e) {\n"
"         $('#monkeyvid').show();\n"
"         $('#monkeyvid_thumb').hide();\n"
"         rb.logBookEvent({'event':'video','act':'play','div_id': "
"'monkeyvid'});\n"
"         // Log the run event\n"
"      });\n"
"      $('#monkeyvid video').one(\"click\", function(){\n"
"        this.play();\n"
"      });\n"
"      $('#monkeyvid video').one(\"play\", function(){\n"
"        rb.logBookEvent({'event':'video','act':'play','div_id': "
"'monkeyvid'});\n"
"      });\n"
"   });\n"
"</script>\n"
msgstr ""

