# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Introduction/ProgrammingExercises.rst:6
msgid "Programming Exercises"
msgstr ""

#: ../../_sources/Introduction/ProgrammingExercises.rst:8
msgid ""
"Implement the simple methods ``getNum`` and ``getDen`` that will return "
"the numerator and denominator of a fraction."
msgstr ""

#: ../../_sources/Introduction/ProgrammingExercises.rst:11
msgid ""
"In many ways it would be better if all fractions were maintained in "
"lowest terms right from the start. Modify the constructor for the "
"``Fraction`` class so that ``GCD`` is used to reduce fractions "
"immediately. Notice that this means the ``__add__`` function no longer "
"needs to reduce. Make the necessary modifications."
msgstr ""

#: ../../_sources/Introduction/ProgrammingExercises.rst:17
msgid ""
"Implement the remaining simple arithmetic operators (``__sub__``, "
"``__mul__``, and ``__truediv__``)."
msgstr ""

#: ../../_sources/Introduction/ProgrammingExercises.rst:20
msgid ""
"Implement the remaining relational operators (``__gt__``, ``__ge__``, "
"``__lt__``, ``__le__``, and ``__ne__``)"
msgstr ""

#: ../../_sources/Introduction/ProgrammingExercises.rst:23
msgid ""
"Modify the constructor for the fraction class so that it checks to make "
"sure that the numerator and denominator are both integers. If either is "
"not an integer the constructor should raise an exception."
msgstr ""

#: ../../_sources/Introduction/ProgrammingExercises.rst:27
msgid ""
"In the definition of fractions we assumed that negative fractions have a "
"negative numerator and a positive denominator. Using a negative "
"denominator would cause some of the relational operators to give "
"incorrect results. In general, this is an unnecessary constraint. Modify "
"the constructor to allow the user to pass a negative denominator so that "
"all of the operators continue to work properly."
msgstr ""

#: ../../_sources/Introduction/ProgrammingExercises.rst:35
msgid ""
"Research the ``__radd__`` method. How does it differ from ``__add__``? "
"When is it used? Implement ``__radd__``."
msgstr ""

#: ../../_sources/Introduction/ProgrammingExercises.rst:38
msgid "Repeat the last question but this time consider the ``__iadd__`` method."
msgstr ""

#: ../../_sources/Introduction/ProgrammingExercises.rst:41
msgid ""
"Research the ``__repr__`` method. How does it differ from ``__str__``? "
"When is it used? Implement ``__repr__``."
msgstr ""

#: ../../_sources/Introduction/ProgrammingExercises.rst:44
msgid ""
"Research other types of gates that exist (such as NAND, NOR, and XOR). "
"Add them to the circuit hierarchy. How much additional coding did you "
"need to do?"
msgstr ""

#: ../../_sources/Introduction/ProgrammingExercises.rst:48
msgid ""
"The most simple arithmetic circuit is known as the half-adder. Research "
"the simple half-adder circuit. Implement this circuit."
msgstr ""

#: ../../_sources/Introduction/ProgrammingExercises.rst:51
msgid "Now extend that circuit and implement an 8 bit full-adder."
msgstr ""

#: ../../_sources/Introduction/ProgrammingExercises.rst:53
msgid ""
"The circuit simulation shown in this chapter works in a backward "
"direction. In other words, given a circuit, the output is produced by "
"working back through the input values, which in turn cause other outputs "
"to be queried. This continues until external input lines are found, at "
"which point the user is asked for values. Modify the implementation so "
"that the action is in the forward direction; upon receiving inputs the "
"circuit produces an output."
msgstr ""

#: ../../_sources/Introduction/ProgrammingExercises.rst:61
msgid ""
"Design a class to represent a playing card. Now design a class to "
"represent a deck of cards. Using these two classes, implement a favorite "
"card game."
msgstr ""

#: ../../_sources/Introduction/ProgrammingExercises.rst:65
msgid ""
"Find a Sudoku puzzle in the local newspaper. Write a program to solve the"
" puzzle."
msgstr ""

