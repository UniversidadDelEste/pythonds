# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:6
msgid "Simple Balanced Parentheses"
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:8
msgid ""
"We now turn our attention to using stacks to solve real computer science "
"problems. You have no doubt written arithmetic expressions such as"
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:11
msgid ":math:`(5+6)*(7+8)/(4+3)`"
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:13
msgid ""
"where parentheses are used to order the performance of operations. You "
"may also have some experience programming in a language such as Lisp with"
" constructs like"
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:19
msgid ""
"(defun square(n)\n"
"     (* n n))"
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:22
msgid ""
"This defines a function called ``square`` that will return the square of "
"its argument ``n``. Lisp is notorious for using lots and lots of "
"parentheses."
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:26
msgid ""
"In both of these examples, parentheses must appear in a balanced fashion."
" **Balanced parentheses** means that each opening symbol has a "
"corresponding closing symbol and the pairs of parentheses are properly "
"nested. Consider the following correctly balanced strings of parentheses:"
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:34
msgid ""
"(()()()())\n"
"\n"
"(((())))\n"
"\n"
"(()((())()))"
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:40
msgid "Compare those with the following, which are not balanced:"
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:44
msgid ""
"((((((())\n"
"\n"
"()))\n"
"\n"
"(()()(()"
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:50
msgid ""
"The ability to differentiate between parentheses that are correctly "
"balanced and those that are unbalanced is an important part of "
"recognizing many programming language structures."
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:54
msgid ""
"The challenge then is to write an algorithm that will read a string of "
"parentheses from left to right and decide whether the symbols are "
"balanced. To solve this problem we need to make an important observation."
" As you process symbols from left to right, the most recent opening "
"parenthesis must match the next closing symbol (see :ref:`Figure 4 "
"<fig_parmatch>`). Also, the first opening symbol processed may have to "
"wait until the very last symbol for its match. Closing symbols match "
"opening symbols in the reverse order of their appearance; they match from"
" the inside out. This is a clue that stacks can be used to solve the "
"problem."
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:70
msgid ".. image:: BasicDS/Figures/simpleparcheck.png"
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:70
msgid "Figure 4: Matching Parentheses"
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:72
msgid ""
"Once you agree that a stack is the appropriate data structure for keeping"
" the parentheses, the statement of the algorithm is straightforward. "
"Starting with an empty stack, process the parenthesis strings from left "
"to right. If a symbol is an opening parenthesis, push it on the stack as "
"a signal that a corresponding closing symbol needs to appear later. If, "
"on the other hand, a symbol is a closing parenthesis, pop the stack. As "
"long as it is possible to pop the stack to match every closing symbol, "
"the parentheses remain balanced. If at any time there is no opening "
"symbol on the stack to match a closing symbol, the string is not balanced"
" properly. At the end of the string, when all symbols have been "
"processed, the stack should be empty. The Python code to implement this "
"algorithm is shown in :ref:`ActiveCode 1 <lst_parcheck1>`."
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:117
msgid "data-caption='Solving the Balanced Parentheses Problem'"
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:117
msgid ""
"from pythonds.basic.stack import Stack\n"
"\n"
"def parChecker(symbolString):\n"
"    s = Stack()\n"
"    balanced = True\n"
"    index = 0\n"
"    while index < len(symbolString) and balanced:\n"
"        symbol = symbolString[index]\n"
"        if symbol == \"(\":\n"
"            s.push(symbol)\n"
"        else:\n"
"            if s.isEmpty():\n"
"                balanced = False\n"
"            else:\n"
"                s.pop()\n"
"\n"
"        index = index + 1\n"
"\n"
"    if balanced and s.isEmpty():\n"
"        return True\n"
"    else:\n"
"        return False\n"
"\n"
"print(parChecker('((()))'))\n"
"print(parChecker('(()'))"
msgstr ""

#: ../../_sources/BasicDS/SimpleBalancedParentheses.rst:118
msgid ""
"This function, ``parChecker``, assumes that a ``Stack`` class is "
"available and returns a boolean result as to whether the string of "
"parentheses is balanced. Note that the boolean variable ``balanced`` is "
"initialized to ``True`` as there is no reason to assume otherwise at the "
"start. If the current symbol is ``(``, then it is pushed on the stack "
"(lines 9–10). Note also in line 15 that ``pop`` simply removes a symbol "
"from the stack. The returned value is not used since we know it must be "
"an opening symbol seen earlier. At the end (lines 19–22), as long as the "
"expression is balanced and the stack has been completely cleaned off, the"
" string represents a correctly balanced sequence of parentheses."
msgstr ""

