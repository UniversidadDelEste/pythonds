# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:6
msgid "Implementing a Queue in Python"
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:8
msgid ""
"It is again appropriate to create a new class for the implementation of "
"the abstract data type queue. As before, we will use the power and "
"simplicity of the list collection to build the internal representation of"
" the queue."
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:13
msgid ""
"We need to decide which end of the list to use as the rear and which to "
"use as the front. The implementation shown in :ref:`Listing 1 "
"<lst_queuecode>` assumes that the rear is at position 0 in the list. This"
" allows us to use the ``insert`` function on lists to add new elements to"
" the rear of the queue. The ``pop`` operation can be used to remove the "
"front element (the last element of the list). Recall that this also means"
" that enqueue will be O(n) and dequeue will be O(1)."
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:23
msgid "**Listing 1**"
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:27
msgid ""
"class Queue:\n"
"    def __init__(self):\n"
"        self.items = []\n"
"\n"
"    def isEmpty(self):\n"
"        return self.items == []\n"
"\n"
"    def enqueue(self, item):\n"
"        self.items.insert(0,item)\n"
"\n"
"    def dequeue(self):\n"
"        return self.items.pop()\n"
"\n"
"    def size(self):\n"
"        return len(self.items)"
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:43
msgid ""
"CodeLens 1 shows the ``Queue`` class in action as we perform the sequence"
" of operations from :ref:`Table 1 <tbl_queueoperations>`."
msgstr ""

msgid ""
"\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"ququeuetest\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\">Example Queue "
"Operations (ququeuetest)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var ququeuetest_trace = {\"code\": \"class Queue:\\n    def "
"__init__(self):\\n        self.items = []\\n\\n    def isEmpty(self):\\n"
"        return self.items == []\\n\\n    def enqueue(self, item):\\n"
"        self.items.insert(0,item)\\n\\n    def dequeue(self):\\n        "
"return self.items.pop()\\n\\n    def size(self):\\n        return "
"len(self.items)\\n\\nq=Queue()\\n\\nq.enqueue(4)\\nq.enqueue('dog')\\nq.enqueue(True)\\nprint(q.size())\","
" \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, "
"\"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"Queue\"], \"stdout\": \"\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"Queue\": [\"REF\", 1]}, "
"\"heap\": {\"1\": [\"CLASS\", \"Queue\", [], [\"__init__\", [\"REF\", "
"2]], [\"dequeue\", [\"REF\", 3]], [\"enqueue\", [\"REF\", 4]], "
"[\"isEmpty\", [\"REF\", 5]], [\"size\", [\"REF\", 6]]], \"2\": "
"[\"FUNCTION\", \"__init__(self)\", null], \"3\": [\"FUNCTION\", "
"\"dequeue(self)\", null], \"4\": [\"FUNCTION\", \"enqueue(self, item)\", "
"null], \"5\": [\"FUNCTION\", \"isEmpty(self)\", null], \"6\": "
"[\"FUNCTION\", \"size(self)\", null]}, \"line\": 17, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"Queue\"], \"stdout\": \"\", "
"\"func_name\": \"__init__\", \"stack_to_render\": [{\"frame_id\": 1, "
"\"encoded_locals\": {\"self\": [\"REF\", 7]}, \"is_highlighted\": true, "
"\"is_parent\": false, \"func_name\": \"__init__\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"__init___f1\", "
"\"ordered_varnames\": [\"self\"]}], \"globals\": {\"Queue\": [\"REF\", "
"1]}, \"heap\": {\"1\": [\"CLASS\", \"Queue\", [], [\"__init__\", "
"[\"REF\", 2]], [\"dequeue\", [\"REF\", 3]], [\"enqueue\", [\"REF\", 4]], "
"[\"isEmpty\", [\"REF\", 5]], [\"size\", [\"REF\", 6]]], \"2\": "
"[\"FUNCTION\", \"__init__(self)\", null], \"3\": [\"FUNCTION\", "
"\"dequeue(self)\", null], \"4\": [\"FUNCTION\", \"enqueue(self, item)\", "
"null], \"5\": [\"FUNCTION\", \"isEmpty(self)\", null], \"6\": "
"[\"FUNCTION\", \"size(self)\", null], \"7\": [\"INSTANCE\", \"Queue\"]}, "
"\"line\": 2, \"event\": \"call\"}, {\"ordered_globals\": [\"Queue\"], "
"\"stdout\": \"\", \"func_name\": \"__init__\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"self\": [\"REF\", 7]}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"__init__\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"__init___f1\", \"ordered_varnames\": [\"self\"]}], "
"\"globals\": {\"Queue\": [\"REF\", 1]}, \"heap\": {\"1\": [\"CLASS\", "
"\"Queue\", [], [\"__init__\", [\"REF\", 2]], [\"dequeue\", [\"REF\", 3]],"
" [\"enqueue\", [\"REF\", 4]], [\"isEmpty\", [\"REF\", 5]], [\"size\", "
"[\"REF\", 6]]], \"2\": [\"FUNCTION\", \"__init__(self)\", null], \"3\": "
"[\"FUNCTION\", \"dequeue(self)\", null], \"4\": [\"FUNCTION\", "
"\"enqueue(self, item)\", null], \"5\": [\"FUNCTION\", \"isEmpty(self)\", "
"null], \"6\": [\"FUNCTION\", \"size(self)\", null], \"7\": [\"INSTANCE\","
" \"Queue\"]}, \"line\": 3, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"Queue\"], \"stdout\": \"\", \"func_name\": "
"\"__init__\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\":"
" {\"__return__\": null, \"self\": [\"REF\", 7]}, \"is_highlighted\": "
"true, \"is_parent\": false, \"func_name\": \"__init__\", \"is_zombie\": "
"false, \"parent_frame_id_list\": [], \"unique_hash\": \"__init___f1\", "
"\"ordered_varnames\": [\"self\", \"__return__\"]}], \"globals\": "
"{\"Queue\": [\"REF\", 1]}, \"heap\": {\"1\": [\"CLASS\", \"Queue\", [], "
"[\"__init__\", [\"REF\", 2]], [\"dequeue\", [\"REF\", 3]], [\"enqueue\", "
"[\"REF\", 4]], [\"isEmpty\", [\"REF\", 5]], [\"size\", [\"REF\", 6]]], "
"\"2\": [\"FUNCTION\", \"__init__(self)\", null], \"3\": [\"FUNCTION\", "
"\"dequeue(self)\", null], \"4\": [\"FUNCTION\", \"enqueue(self, item)\", "
"null], \"5\": [\"FUNCTION\", \"isEmpty(self)\", null], \"6\": "
"[\"FUNCTION\", \"size(self)\", null], \"7\": [\"INSTANCE\", \"Queue\", "
"[\"items\", [\"REF\", 8]]], \"8\": [\"LIST\"]}, \"line\": 3, \"event\": "
"\"return\"}, {\"ordered_globals\": [\"Queue\", \"q\"], \"stdout\": \"\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"q\": [\"REF\", 7], \"Queue\": [\"REF\", 1]}, \"heap\": {\"1\": "
"[\"CLASS\", \"Queue\", [], [\"__init__\", [\"REF\", 2]], [\"dequeue\", "
"[\"REF\", 3]], [\"enqueue\", [\"REF\", 4]], [\"isEmpty\", [\"REF\", 5]], "
"[\"size\", [\"REF\", 6]]], \"2\": [\"FUNCTION\", \"__init__(self)\", "
"null], \"3\": [\"FUNCTION\", \"dequeue(self)\", null], \"4\": "
"[\"FUNCTION\", \"enqueue(self, item)\", null], \"5\": [\"FUNCTION\", "
"\"isEmpty(self)\", null], \"6\": [\"FUNCTION\", \"size(self)\", null], "
"\"7\": [\"INSTANCE\", \"Queue\", [\"items\", [\"REF\", 8]]], \"8\": "
"[\"LIST\"]}, \"line\": 19, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"Queue\", \"q\"], \"stdout\": \"\", "
"\"func_name\": \"enqueue\", \"stack_to_render\": [{\"frame_id\": 2, "
"\"encoded_locals\": {\"item\": 4, \"self\": [\"REF\", 7]}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"enqueue\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"enqueue_f2\", \"ordered_varnames\": [\"self\", "
"\"item\"]}], \"globals\": {\"q\": [\"REF\", 7], \"Queue\": [\"REF\", 1]},"
" \"heap\": {\"1\": [\"CLASS\", \"Queue\", [], [\"__init__\", [\"REF\", "
"2]], [\"dequeue\", [\"REF\", 3]], [\"enqueue\", [\"REF\", 4]], "
"[\"isEmpty\", [\"REF\", 5]], [\"size\", [\"REF\", 6]]], \"2\": "
"[\"FUNCTION\", \"__init__(self)\", null], \"3\": [\"FUNCTION\", "
"\"dequeue(self)\", null], \"4\": [\"FUNCTION\", \"enqueue(self, item)\", "
"null], \"5\": [\"FUNCTION\", \"isEmpty(self)\", null], \"6\": "
"[\"FUNCTION\", \"size(self)\", null], \"7\": [\"INSTANCE\", \"Queue\", "
"[\"items\", [\"REF\", 8]]], \"8\": [\"LIST\"]}, \"line\": 8, \"event\": "
"\"call\"}, {\"ordered_globals\": [\"Queue\", \"q\"], \"stdout\": \"\", "
"\"func_name\": \"enqueue\", \"stack_to_render\": [{\"frame_id\": 2, "
"\"encoded_locals\": {\"item\": 4, \"self\": [\"REF\", 7]}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"enqueue\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"enqueue_f2\", \"ordered_varnames\": [\"self\", "
"\"item\"]}], \"globals\": {\"q\": [\"REF\", 7], \"Queue\": [\"REF\", 1]},"
" \"heap\": {\"1\": [\"CLASS\", \"Queue\", [], [\"__init__\", [\"REF\", "
"2]], [\"dequeue\", [\"REF\", 3]], [\"enqueue\", [\"REF\", 4]], "
"[\"isEmpty\", [\"REF\", 5]], [\"size\", [\"REF\", 6]]], \"2\": "
"[\"FUNCTION\", \"__init__(self)\", null], \"3\": [\"FUNCTION\", "
"\"dequeue(self)\", null], \"4\": [\"FUNCTION\", \"enqueue(self, item)\", "
"null], \"5\": [\"FUNCTION\", \"isEmpty(self)\", null], \"6\": "
"[\"FUNCTION\", \"size(self)\", null], \"7\": [\"INSTANCE\", \"Queue\", "
"[\"items\", [\"REF\", 8]]], \"8\": [\"LIST\"]}, \"line\": 9, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"Queue\", \"q\"], \"stdout\": "
"\"\", \"func_name\": \"enqueue\", \"stack_to_render\": [{\"frame_id\": 2,"
" \"encoded_locals\": {\"__return__\": null, \"item\": 4, \"self\": "
"[\"REF\", 7]}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"enqueue\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"enqueue_f2\", "
"\"ordered_varnames\": [\"self\", \"item\", \"__return__\"]}], "
"\"globals\": {\"q\": [\"REF\", 7], \"Queue\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"CLASS\", \"Queue\", [], [\"__init__\", [\"REF\", 2]], "
"[\"dequeue\", [\"REF\", 3]], [\"enqueue\", [\"REF\", 4]], [\"isEmpty\", "
"[\"REF\", 5]], [\"size\", [\"REF\", 6]]], \"2\": [\"FUNCTION\", "
"\"__init__(self)\", null], \"3\": [\"FUNCTION\", \"dequeue(self)\", "
"null], \"4\": [\"FUNCTION\", \"enqueue(self, item)\", null], \"5\": "
"[\"FUNCTION\", \"isEmpty(self)\", null], \"6\": [\"FUNCTION\", "
"\"size(self)\", null], \"7\": [\"INSTANCE\", \"Queue\", [\"items\", "
"[\"REF\", 8]]], \"8\": [\"LIST\", 4]}, \"line\": 9, \"event\": "
"\"return\"}, {\"ordered_globals\": [\"Queue\", \"q\"], \"stdout\": \"\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"q\": [\"REF\", 7], \"Queue\": [\"REF\", 1]}, \"heap\": {\"1\": "
"[\"CLASS\", \"Queue\", [], [\"__init__\", [\"REF\", 2]], [\"dequeue\", "
"[\"REF\", 3]], [\"enqueue\", [\"REF\", 4]], [\"isEmpty\", [\"REF\", 5]], "
"[\"size\", [\"REF\", 6]]], \"2\": [\"FUNCTION\", \"__init__(self)\", "
"null], \"3\": [\"FUNCTION\", \"dequeue(self)\", null], \"4\": "
"[\"FUNCTION\", \"enqueue(self, item)\", null], \"5\": [\"FUNCTION\", "
"\"isEmpty(self)\", null], \"6\": [\"FUNCTION\", \"size(self)\", null], "
"\"7\": [\"INSTANCE\", \"Queue\", [\"items\", [\"REF\", 8]]], \"8\": "
"[\"LIST\", 4]}, \"line\": 20, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"Queue\", \"q\"], \"stdout\": \"\", "
"\"func_name\": \"enqueue\", \"stack_to_render\": [{\"frame_id\": 3, "
"\"encoded_locals\": {\"item\": \"dog\", \"self\": [\"REF\", 7]}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"enqueue\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"enqueue_f3\", \"ordered_varnames\": [\"self\", "
"\"item\"]}], \"globals\": {\"q\": [\"REF\", 7], \"Queue\": [\"REF\", 1]},"
" \"heap\": {\"1\": [\"CLASS\", \"Queue\", [], [\"__init__\", [\"REF\", "
"2]], [\"dequeue\", [\"REF\", 3]], [\"enqueue\", [\"REF\", 4]], "
"[\"isEmpty\", [\"REF\", 5]], [\"size\", [\"REF\", 6]]], \"2\": "
"[\"FUNCTION\", \"__init__(self)\", null], \"3\": [\"FUNCTION\", "
"\"dequeue(self)\", null], \"4\": [\"FUNCTION\", \"enqueue(self, item)\", "
"null], \"5\": [\"FUNCTION\", \"isEmpty(self)\", null], \"6\": "
"[\"FUNCTION\", \"size(self)\", null], \"7\": [\"INSTANCE\", \"Queue\", "
"[\"items\", [\"REF\", 8]]], \"8\": [\"LIST\", 4]}, \"line\": 8, "
"\"event\": \"call\"}, {\"ordered_globals\": [\"Queue\", \"q\"], "
"\"stdout\": \"\", \"func_name\": \"enqueue\", \"stack_to_render\": "
"[{\"frame_id\": 3, \"encoded_locals\": {\"item\": \"dog\", \"self\": "
"[\"REF\", 7]}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"enqueue\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"enqueue_f3\", "
"\"ordered_varnames\": [\"self\", \"item\"]}], \"globals\": {\"q\": "
"[\"REF\", 7], \"Queue\": [\"REF\", 1]}, \"heap\": {\"1\": [\"CLASS\", "
"\"Queue\", [], [\"__init__\", [\"REF\", 2]], [\"dequeue\", [\"REF\", 3]],"
" [\"enqueue\", [\"REF\", 4]], [\"isEmpty\", [\"REF\", 5]], [\"size\", "
"[\"REF\", 6]]], \"2\": [\"FUNCTION\", \"__init__(self)\", null], \"3\": "
"[\"FUNCTION\", \"dequeue(self)\", null], \"4\": [\"FUNCTION\", "
"\"enqueue(self, item)\", null], \"5\": [\"FUNCTION\", \"isEmpty(self)\", "
"null], \"6\": [\"FUNCTION\", \"size(self)\", null], \"7\": [\"INSTANCE\","
" \"Queue\", [\"items\", [\"REF\", 8]]], \"8\": [\"LIST\", 4]}, \"line\": "
"9, \"event\": \"step_line\"}, {\"ordered_globals\": [\"Queue\", \"q\"], "
"\"stdout\": \"\", \"func_name\": \"enqueue\", \"stack_to_render\": "
"[{\"frame_id\": 3, \"encoded_locals\": {\"__return__\": null, \"item\": "
"\"dog\", \"self\": [\"REF\", 7]}, \"is_highlighted\": true, "
"\"is_parent\": false, \"func_name\": \"enqueue\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"enqueue_f3\", "
"\"ordered_varnames\": [\"self\", \"item\", \"__return__\"]}], "
"\"globals\": {\"q\": [\"REF\", 7], \"Queue\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"CLASS\", \"Queue\", [], [\"__init__\", [\"REF\", 2]], "
"[\"dequeue\", [\"REF\", 3]], [\"enqueue\", [\"REF\", 4]], [\"isEmpty\", "
"[\"REF\", 5]], [\"size\", [\"REF\", 6]]], \"2\": [\"FUNCTION\", "
"\"__init__(self)\", null], \"3\": [\"FUNCTION\", \"dequeue(self)\", "
"null], \"4\": [\"FUNCTION\", \"enqueue(self, item)\", null], \"5\": "
"[\"FUNCTION\", \"isEmpty(self)\", null], \"6\": [\"FUNCTION\", "
"\"size(self)\", null], \"7\": [\"INSTANCE\", \"Queue\", [\"items\", "
"[\"REF\", 8]]], \"8\": [\"LIST\", \"dog\", 4]}, \"line\": 9, \"event\": "
"\"return\"}, {\"ordered_globals\": [\"Queue\", \"q\"], \"stdout\": \"\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"q\": [\"REF\", 7], \"Queue\": [\"REF\", 1]}, \"heap\": {\"1\": "
"[\"CLASS\", \"Queue\", [], [\"__init__\", [\"REF\", 2]], [\"dequeue\", "
"[\"REF\", 3]], [\"enqueue\", [\"REF\", 4]], [\"isEmpty\", [\"REF\", 5]], "
"[\"size\", [\"REF\", 6]]], \"2\": [\"FUNCTION\", \"__init__(self)\", "
"null], \"3\": [\"FUNCTION\", \"dequeue(self)\", null], \"4\": "
"[\"FUNCTION\", \"enqueue(self, item)\", null], \"5\": [\"FUNCTION\", "
"\"isEmpty(self)\", null], \"6\": [\"FUNCTION\", \"size(self)\", null], "
"\"7\": [\"INSTANCE\", \"Queue\", [\"items\", [\"REF\", 8]]], \"8\": "
"[\"LIST\", \"dog\", 4]}, \"line\": 21, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"Queue\", \"q\"], \"stdout\": \"\", "
"\"func_name\": \"enqueue\", \"stack_to_render\": [{\"frame_id\": 4, "
"\"encoded_locals\": {\"item\": true, \"self\": [\"REF\", 7]}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"enqueue\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"enqueue_f4\", \"ordered_varnames\": [\"self\", "
"\"item\"]}], \"globals\": {\"q\": [\"REF\", 7], \"Queue\": [\"REF\", 1]},"
" \"heap\": {\"1\": [\"CLASS\", \"Queue\", [], [\"__init__\", [\"REF\", "
"2]], [\"dequeue\", [\"REF\", 3]], [\"enqueue\", [\"REF\", 4]], "
"[\"isEmpty\", [\"REF\", 5]], [\"size\", [\"REF\", 6]]], \"2\": "
"[\"FUNCTION\", \"__init__(self)\", null], \"3\": [\"FUNCTION\", "
"\"dequeue(self)\", null], \"4\": [\"FUNCTION\", \"enqueue(self, item)\", "
"null], \"5\": [\"FUNCTION\", \"isEmpty(self)\", null], \"6\": "
"[\"FUNCTION\", \"size(self)\", null], \"7\": [\"INSTANCE\", \"Queue\", "
"[\"items\", [\"REF\", 8]]], \"8\": [\"LIST\", \"dog\", 4]}, \"line\": 8, "
"\"event\": \"call\"}, {\"ordered_globals\": [\"Queue\", \"q\"], "
"\"stdout\": \"\", \"func_name\": \"enqueue\", \"stack_to_render\": "
"[{\"frame_id\": 4, \"encoded_locals\": {\"item\": true, \"self\": "
"[\"REF\", 7]}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"enqueue\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"enqueue_f4\", "
"\"ordered_varnames\": [\"self\", \"item\"]}], \"globals\": {\"q\": "
"[\"REF\", 7], \"Queue\": [\"REF\", 1]}, \"heap\": {\"1\": [\"CLASS\", "
"\"Queue\", [], [\"__init__\", [\"REF\", 2]], [\"dequeue\", [\"REF\", 3]],"
" [\"enqueue\", [\"REF\", 4]], [\"isEmpty\", [\"REF\", 5]], [\"size\", "
"[\"REF\", 6]]], \"2\": [\"FUNCTION\", \"__init__(self)\", null], \"3\": "
"[\"FUNCTION\", \"dequeue(self)\", null], \"4\": [\"FUNCTION\", "
"\"enqueue(self, item)\", null], \"5\": [\"FUNCTION\", \"isEmpty(self)\", "
"null], \"6\": [\"FUNCTION\", \"size(self)\", null], \"7\": [\"INSTANCE\","
" \"Queue\", [\"items\", [\"REF\", 8]]], \"8\": [\"LIST\", \"dog\", 4]}, "
"\"line\": 9, \"event\": \"step_line\"}, {\"ordered_globals\": [\"Queue\","
" \"q\"], \"stdout\": \"\", \"func_name\": \"enqueue\", "
"\"stack_to_render\": [{\"frame_id\": 4, \"encoded_locals\": "
"{\"__return__\": null, \"item\": true, \"self\": [\"REF\", 7]}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"enqueue\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"enqueue_f4\", \"ordered_varnames\": [\"self\", "
"\"item\", \"__return__\"]}], \"globals\": {\"q\": [\"REF\", 7], "
"\"Queue\": [\"REF\", 1]}, \"heap\": {\"1\": [\"CLASS\", \"Queue\", [], "
"[\"__init__\", [\"REF\", 2]], [\"dequeue\", [\"REF\", 3]], [\"enqueue\", "
"[\"REF\", 4]], [\"isEmpty\", [\"REF\", 5]], [\"size\", [\"REF\", 6]]], "
"\"2\": [\"FUNCTION\", \"__init__(self)\", null], \"3\": [\"FUNCTION\", "
"\"dequeue(self)\", null], \"4\": [\"FUNCTION\", \"enqueue(self, item)\", "
"null], \"5\": [\"FUNCTION\", \"isEmpty(self)\", null], \"6\": "
"[\"FUNCTION\", \"size(self)\", null], \"7\": [\"INSTANCE\", \"Queue\", "
"[\"items\", [\"REF\", 8]]], \"8\": [\"LIST\", true, \"dog\", 4]}, "
"\"line\": 9, \"event\": \"return\"}, {\"ordered_globals\": [\"Queue\", "
"\"q\"], \"stdout\": \"\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"q\": [\"REF\", 7], \"Queue\": "
"[\"REF\", 1]}, \"heap\": {\"1\": [\"CLASS\", \"Queue\", [], "
"[\"__init__\", [\"REF\", 2]], [\"dequeue\", [\"REF\", 3]], [\"enqueue\", "
"[\"REF\", 4]], [\"isEmpty\", [\"REF\", 5]], [\"size\", [\"REF\", 6]]], "
"\"2\": [\"FUNCTION\", \"__init__(self)\", null], \"3\": [\"FUNCTION\", "
"\"dequeue(self)\", null], \"4\": [\"FUNCTION\", \"enqueue(self, item)\", "
"null], \"5\": [\"FUNCTION\", \"isEmpty(self)\", null], \"6\": "
"[\"FUNCTION\", \"size(self)\", null], \"7\": [\"INSTANCE\", \"Queue\", "
"[\"items\", [\"REF\", 8]]], \"8\": [\"LIST\", true, \"dog\", 4]}, "
"\"line\": 22, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"Queue\", \"q\"], \"stdout\": \"\", \"func_name\": \"size\", "
"\"stack_to_render\": [{\"frame_id\": 5, \"encoded_locals\": {\"self\": "
"[\"REF\", 7]}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"size\", \"is_zombie\": false, \"parent_frame_id_list\": "
"[], \"unique_hash\": \"size_f5\", \"ordered_varnames\": [\"self\"]}], "
"\"globals\": {\"q\": [\"REF\", 7], \"Queue\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"CLASS\", \"Queue\", [], [\"__init__\", [\"REF\", 2]], "
"[\"dequeue\", [\"REF\", 3]], [\"enqueue\", [\"REF\", 4]], [\"isEmpty\", "
"[\"REF\", 5]], [\"size\", [\"REF\", 6]]], \"2\": [\"FUNCTION\", "
"\"__init__(self)\", null], \"3\": [\"FUNCTION\", \"dequeue(self)\", "
"null], \"4\": [\"FUNCTION\", \"enqueue(self, item)\", null], \"5\": "
"[\"FUNCTION\", \"isEmpty(self)\", null], \"6\": [\"FUNCTION\", "
"\"size(self)\", null], \"7\": [\"INSTANCE\", \"Queue\", [\"items\", "
"[\"REF\", 8]]], \"8\": [\"LIST\", true, \"dog\", 4]}, \"line\": 14, "
"\"event\": \"call\"}, {\"ordered_globals\": [\"Queue\", \"q\"], "
"\"stdout\": \"\", \"func_name\": \"size\", \"stack_to_render\": "
"[{\"frame_id\": 5, \"encoded_locals\": {\"self\": [\"REF\", 7]}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"size\", "
"\"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": "
"\"size_f5\", \"ordered_varnames\": [\"self\"]}], \"globals\": {\"q\": "
"[\"REF\", 7], \"Queue\": [\"REF\", 1]}, \"heap\": {\"1\": [\"CLASS\", "
"\"Queue\", [], [\"__init__\", [\"REF\", 2]], [\"dequeue\", [\"REF\", 3]],"
" [\"enqueue\", [\"REF\", 4]], [\"isEmpty\", [\"REF\", 5]], [\"size\", "
"[\"REF\", 6]]], \"2\": [\"FUNCTION\", \"__init__(self)\", null], \"3\": "
"[\"FUNCTION\", \"dequeue(self)\", null], \"4\": [\"FUNCTION\", "
"\"enqueue(self, item)\", null], \"5\": [\"FUNCTION\", \"isEmpty(self)\", "
"null], \"6\": [\"FUNCTION\", \"size(self)\", null], \"7\": [\"INSTANCE\","
" \"Queue\", [\"items\", [\"REF\", 8]]], \"8\": [\"LIST\", true, \"dog\", "
"4]}, \"line\": 15, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"Queue\", \"q\"], \"stdout\": \"\", \"func_name\": \"size\", "
"\"stack_to_render\": [{\"frame_id\": 5, \"encoded_locals\": "
"{\"__return__\": 3, \"self\": [\"REF\", 7]}, \"is_highlighted\": true, "
"\"is_parent\": false, \"func_name\": \"size\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"size_f5\", "
"\"ordered_varnames\": [\"self\", \"__return__\"]}], \"globals\": {\"q\": "
"[\"REF\", 7], \"Queue\": [\"REF\", 1]}, \"heap\": {\"1\": [\"CLASS\", "
"\"Queue\", [], [\"__init__\", [\"REF\", 2]], [\"dequeue\", [\"REF\", 3]],"
" [\"enqueue\", [\"REF\", 4]], [\"isEmpty\", [\"REF\", 5]], [\"size\", "
"[\"REF\", 6]]], \"2\": [\"FUNCTION\", \"__init__(self)\", null], \"3\": "
"[\"FUNCTION\", \"dequeue(self)\", null], \"4\": [\"FUNCTION\", "
"\"enqueue(self, item)\", null], \"5\": [\"FUNCTION\", \"isEmpty(self)\", "
"null], \"6\": [\"FUNCTION\", \"size(self)\", null], \"7\": [\"INSTANCE\","
" \"Queue\", [\"items\", [\"REF\", 8]]], \"8\": [\"LIST\", true, \"dog\", "
"4]}, \"line\": 15, \"event\": \"return\"}, {\"ordered_globals\": "
"[\"Queue\", \"q\"], \"stdout\": \"3\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"q\": [\"REF\", 7], \"Queue\": "
"[\"REF\", 1]}, \"heap\": {\"1\": [\"CLASS\", \"Queue\", [], "
"[\"__init__\", [\"REF\", 2]], [\"dequeue\", [\"REF\", 3]], [\"enqueue\", "
"[\"REF\", 4]], [\"isEmpty\", [\"REF\", 5]], [\"size\", [\"REF\", 6]]], "
"\"2\": [\"FUNCTION\", \"__init__(self)\", null], \"3\": [\"FUNCTION\", "
"\"dequeue(self)\", null], \"4\": [\"FUNCTION\", \"enqueue(self, item)\", "
"null], \"5\": [\"FUNCTION\", \"isEmpty(self)\", null], \"6\": "
"[\"FUNCTION\", \"size(self)\", null], \"7\": [\"INSTANCE\", \"Queue\", "
"[\"items\", [\"REF\", 8]]], \"8\": [\"LIST\", true, \"dog\", 4]}, "
"\"line\": 22, \"event\": \"return\"}]};\n"
"var ququeuetest_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        ququeuetest_vis = new "
"ExecutionVisualizer('ququeuetest',ququeuetest_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: "
"redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(ququeuetest_vis,'ququeuetest');\n"
"        styleButtons('ququeuetest');\n"
"        allVisualizers.push(ququeuetest_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component "
"ququeuetest_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#ququeuetest_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', "
"'div_id':'ququeuetest'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (ququeuetest_vis) {\n"
"        ququeuetest_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:74
msgid "Further manipulation of this queue would give the following results:"
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:79
msgid ""
">>> q.size()\n"
"3\n"
">>> q.isEmpty()\n"
"False\n"
">>> q.enqueue(8.4)\n"
">>> q.dequeue()\n"
"4\n"
">>> q.dequeue()\n"
"'dog'\n"
">>> q.size()\n"
"2"
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:91
msgid "Self Check"
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:114
msgid "'hello', 'dog'"
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:114
msgid "'dog', 3"
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:114
msgid "'hello', 3"
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:114
msgid "'hello', 'dog', 3"
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:114
msgid ""
"Remember the first thing added to the queue is the first thing removed.  "
"FIFO"
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:114
msgid "Yes, first in first out means that hello is gone"
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:114
msgid ""
"Queues, and Stacks are both data structures where you can only access the"
" first and the last thing."
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:114
msgid "Ooops, maybe you missed the dequeue call at the end?"
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:104
msgid "Q-6: Suppose you have the following series of queue operations."
msgstr ""

#: ../../_sources/BasicDS/ImplementingaQueueinPython.rst:114
msgid "What items are left on the queue?"
msgstr ""

