# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/BasicDS/TheOrderedListAbstractDataType.rst:6
msgid "The Ordered List Abstract Data Type"
msgstr ""

#: ../../_sources/BasicDS/TheOrderedListAbstractDataType.rst:8
msgid ""
"We will now consider a type of list known as an ordered list. For "
"example, if the list of integers shown above were an ordered list "
"(ascending order), then it could be written as 17, 26, 31, 54, 77, and "
"93. Since 17 is the smallest item, it occupies the first position in the "
"list. Likewise, since 93 is the largest, it occupies the last position."
msgstr ""

#: ../../_sources/BasicDS/TheOrderedListAbstractDataType.rst:14
msgid ""
"The structure of an ordered list is a collection of items where each item"
" holds a relative position that is based upon some underlying "
"characteristic of the item. The ordering is typically either ascending or"
" descending and we assume that list items have a meaningful comparison "
"operation that is already defined. Many of the ordered list operations "
"are the same as those of the unordered list."
msgstr ""

#: ../../_sources/BasicDS/TheOrderedListAbstractDataType.rst:21
msgid ""
"``OrderedList()`` creates a new ordered list that is empty. It needs no "
"parameters and returns an empty list."
msgstr ""

#: ../../_sources/BasicDS/TheOrderedListAbstractDataType.rst:24
msgid ""
"``add(item)`` adds a new item to the list making sure that the order is "
"preserved. It needs the item and returns nothing. Assume the item is not "
"already in the list."
msgstr ""

#: ../../_sources/BasicDS/TheOrderedListAbstractDataType.rst:28
msgid ""
"``remove(item)`` removes the item from the list. It needs the item and "
"modifies the list. Assume the item is present in the list."
msgstr ""

#: ../../_sources/BasicDS/TheOrderedListAbstractDataType.rst:31
msgid ""
"``search(item)`` searches for the item in the list. It needs the item and"
" returns a boolean value."
msgstr ""

#: ../../_sources/BasicDS/TheOrderedListAbstractDataType.rst:34
msgid ""
"``isEmpty()`` tests to see whether the list is empty. It needs no "
"parameters and returns a boolean value."
msgstr ""

#: ../../_sources/BasicDS/TheOrderedListAbstractDataType.rst:37
msgid ""
"``size()`` returns the number of items in the list. It needs no "
"parameters and returns an integer."
msgstr ""

#: ../../_sources/BasicDS/TheOrderedListAbstractDataType.rst:40
msgid ""
"``index(item)`` returns the position of item in the list. It needs the "
"item and returns the index. Assume the item is in the list."
msgstr ""

#: ../../_sources/BasicDS/TheOrderedListAbstractDataType.rst:43
msgid ""
"``pop()`` removes and returns the last item in the list. It needs nothing"
" and returns an item. Assume the list has at least one item."
msgstr ""

#: ../../_sources/BasicDS/TheOrderedListAbstractDataType.rst:46
msgid ""
"``pop(pos)`` removes and returns the item at position pos. It needs the "
"position and returns the item. Assume the item is in the list."
msgstr ""

