# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/BasicDS/WhatIsaQueue.rst:6
msgid "What Is a Queue?"
msgstr ""

#: ../../_sources/BasicDS/WhatIsaQueue.rst:8
msgid ""
"A queue is an ordered collection of items where the addition of new items"
" happens at one end, called the “rear,” and the removal of existing items"
" occurs at the other end, commonly called the “front.” As an element "
"enters the queue it starts at the rear and makes its way toward the "
"front, waiting until that time when it is the next element to be removed."
msgstr ""

#: ../../_sources/BasicDS/WhatIsaQueue.rst:15
msgid ""
"The most recently added item in the queue must wait at the end of the "
"collection. The item that has been in the collection the longest is at "
"the front. This ordering principle is sometimes called **FIFO**, **first-"
"in first-out**. It is also known as “first-come first-served.”"
msgstr ""

#: ../../_sources/BasicDS/WhatIsaQueue.rst:20
msgid ""
"The simplest example of a queue is the typical line that we all "
"participate in from time to time. We wait in a line for a movie, we wait "
"in the check-out line at a grocery store, and we wait in the cafeteria "
"line (so that we can pop the tray stack). Well-behaved lines, or queues, "
"are very restrictive in that they have only one way in and only one way "
"out. There is no jumping in the middle and no leaving before you have "
"waited the necessary amount of time to get to the front. :ref:`Figure 1 "
"<fig_qubasicqueue>` shows a simple queue of Python data objects."
msgstr ""

#: ../../_sources/BasicDS/WhatIsaQueue.rst:34
msgid ".. image:: BasicDS/Figures/basicqueue.png"
msgstr ""

#: ../../_sources/BasicDS/WhatIsaQueue.rst:34
msgid "Figure 1: A Queue of Python Data Objects"
msgstr ""

#: ../../_sources/BasicDS/WhatIsaQueue.rst:37
msgid ""
"Computer science also has common examples of queues. Our computer "
"laboratory has 30 computers networked with a single printer. When "
"students want to print, their print tasks “get in line” with all the "
"other printing tasks that are waiting. The first task in is the next to "
"be completed. If you are last in line, you must wait for all the other "
"tasks to print ahead of you. We will explore this interesting example in "
"more detail later."
msgstr ""

#: ../../_sources/BasicDS/WhatIsaQueue.rst:45
msgid ""
"In addition to printing queues, operating systems use a number of "
"different queues to control processes within a computer. The scheduling "
"of what gets done next is typically based on a queuing algorithm that "
"tries to execute programs as quickly as possible and serve as many users "
"as it can. Also, as we type, sometimes keystrokes get ahead of the "
"characters that appear on the screen. This is due to the computer doing "
"other work at that moment. The keystrokes are being placed in a queue-"
"like buffer so that they can eventually be displayed on the screen in the"
" proper order."
msgstr ""

