# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:6
msgid "Implementing an Ordered List"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:8
msgid ""
"In order to implement the ordered list, we must remember that the "
"relative positions of the items are based on some underlying "
"characteristic. The ordered list of integers given above (17, 26, 31, 54,"
" 77, and 93) can be represented by a linked structure as shown in "
":ref:`Figure 15 <fig_orderlinked>`. Again, the node and link structure is"
" ideal for representing the relative positioning of the items."
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:20
msgid ".. image:: BasicDS/Figures/orderlinkedlist.png"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:20
msgid "Figure 15: An Ordered Linked List"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:23
msgid ""
"To implement the ``OrderedList`` class, we will use the same technique as"
" seen previously with unordered lists. Once again, an empty list will be "
"denoted by a ``head`` reference to ``None`` (see :ref:`Listing 8 "
"<lst_orderlist>`)."
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:30
msgid "**Listing 8**"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:34
msgid ""
"class OrderedList:\n"
"    def __init__(self):\n"
"        self.head = None"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:38
msgid ""
"As we consider the operations for the ordered list, we should note that "
"the ``isEmpty`` and ``size`` methods can be implemented the same as with "
"unordered lists since they deal only with the number of nodes in the list"
" without regard to the actual item values. Likewise, the ``remove`` "
"method will work just fine since we still need to find the item and then "
"link around the node to remove it. The two remaining methods, ``search`` "
"and ``add``, will require some modification."
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:46
msgid ""
"The search of an unordered linked list required that we traverse the "
"nodes one at a time until we either find the item we are looking for or "
"run out of nodes (``None``). It turns out that the same approach would "
"actually work with the ordered list and in fact in the case where we find"
" the item it is exactly what we need. However, in the case where the item"
" is not in the list, we can take advantage of the ordering to stop the "
"search as soon as possible."
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:54
msgid ""
"For example, :ref:`Figure 16 <fig_stopearly>` shows the ordered linked "
"list as a search is looking for the value 45. As we traverse, starting at"
" the head of the list, we first compare against 17. Since 17 is not the "
"item we are looking for, we move to the next node, in this case 26. "
"Again, this is not what we want, so we move on to 31 and then on to 54. "
"Now, at this point, something is different. Since 54 is not the item we "
"are looking for, our former strategy would be to move forward. However, "
"due to the fact that this is an ordered list, that will not be necessary."
" Once the value in the node becomes greater than the item we are "
"searching for, the search can stop and return ``False``. There is no way "
"the item could exist further out in the linked list."
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:71
msgid ".. image:: BasicDS/Figures/orderedsearch.png"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:71
msgid "Figure 16: Searching an Ordered Linked List"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:74
msgid ""
":ref:`Listing 9 <lst_ordersearch>` shows the complete ``search`` method. "
"It is easy to incorporate the new condition discussed above by adding "
"another boolean variable, ``stop``, and initializing it to ``False`` "
"(line 4). While ``stop`` is ``False`` (not ``stop``) we can continue to "
"look forward in the list (line 5). If any node is ever discovered that "
"contains data greater than the item we are looking for, we will set "
"``stop`` to ``True`` (lines 9–10). The remaining lines are identical to "
"the unordered list search."
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:85
msgid "**Listing 9**"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:91
msgid ""
"def search(self,item):\n"
"    current = self.head\n"
"    found = False\n"
"    stop = False\n"
"    while current != None and not found and not stop:\n"
"        if current.getData() == item:\n"
"            found = True\n"
"        else:\n"
"            if current.getData() > item:\n"
"                stop = True\n"
"            else:\n"
"                current = current.getNext()\n"
"\n"
"    return found"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:106
msgid ""
"The most significant method modification will take place in ``add``. "
"Recall that for unordered lists, the ``add`` method could simply place a "
"new node at the head of the list. It was the easiest point of access. "
"Unfortunately, this will no longer work with ordered lists. It is now "
"necessary that we discover the specific place where a new item belongs in"
" the existing ordered list."
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:113
msgid ""
"Assume we have the ordered list consisting of 17, 26, 54, 77, and 93 and "
"we want to add the value 31. The ``add`` method must decide that the new "
"item belongs between 26 and 54. :ref:`Figure 17 <fig_orderinsert>` shows "
"the setup that we need. As we explained earlier, we need to traverse the "
"linked list looking for the place where the new node will be added. We "
"know we have found that place when either we run out of nodes "
"(``current`` becomes ``None``) or the value of the current node becomes "
"greater than the item we wish to add. In our example, seeing the value 54"
" causes us to stop."
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:128
msgid ".. image:: BasicDS/Figures/linkedlistinsert.png"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:128
msgid "Figure 17: Adding an Item to an Ordered Linked List"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:131
msgid ""
"As we saw with unordered lists, it is necessary to have an additional "
"reference, again called ``previous``, since ``current`` will not provide "
"access to the node that must be modified. :ref:`Listing 10 "
"<lst_orderadd>` shows the complete ``add`` method. Lines 2–3 set up the "
"two external references and lines 9–10 again allow ``previous`` to follow"
" one node behind ``current`` every time through the iteration. The "
"condition (line 5) allows the iteration to continue as long as there are "
"more nodes and the value in the current node is not larger than the item."
" In either case, when the iteration fails, we have found the location for"
" the new node."
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:142
msgid ""
"The remainder of the method completes the two-step process shown in "
":ref:`Figure 17 <fig_orderinsert>`. Once a new node has been created for "
"the item, the only remaining question is whether the new node will be "
"added at the beginning of the linked list or some place in the middle. "
"Again, ``previous == None`` (line 13) can be used to provide the answer."
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:150
msgid "**Listing 10**"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:154
msgid ""
"def add(self,item):\n"
"    current = self.head\n"
"    previous = None\n"
"    stop = False\n"
"    while current != None and not stop:\n"
"        if current.getData() > item:\n"
"            stop = True\n"
"        else:\n"
"            previous = current\n"
"            current = current.getNext()\n"
"\n"
"    temp = Node(item)\n"
"    if previous == None:\n"
"        temp.setNext(self.head)\n"
"        self.head = temp\n"
"    else:\n"
"        temp.setNext(current)\n"
"        previous.setNext(temp)"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:173
msgid ""
"The ``OrderedList`` class with methods discussed thus far can be found in"
" ActiveCode 1. We leave the remaining methods as exercises. You should "
"carefully consider whether the unordered implementations will work given "
"that the list is now ordered."
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:266
msgid "data-caption='OrderedList Class Thus Far'"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:266
msgid ""
"class Node:\n"
"    def __init__(self,initdata):\n"
"        self.data = initdata\n"
"        self.next = None\n"
"\n"
"    def getData(self):\n"
"        return self.data\n"
"\n"
"    def getNext(self):\n"
"        return self.next\n"
"\n"
"    def setData(self,newdata):\n"
"        self.data = newdata\n"
"\n"
"    def setNext(self,newnext):\n"
"        self.next = newnext\n"
"\n"
"\n"
"class OrderedList:\n"
"    def __init__(self):\n"
"        self.head = None\n"
"\n"
"    def search(self,item):\n"
"        current = self.head\n"
"        found = False\n"
"        stop = False\n"
"        while current != None and not found and not stop:\n"
"            if current.getData() == item:\n"
"                found = True\n"
"            else:\n"
"                if current.getData() > item:\n"
"                    stop = True\n"
"                else:\n"
"                    current = current.getNext()\n"
"\n"
"        return found\n"
"\n"
"    def add(self,item):\n"
"        current = self.head\n"
"        previous = None\n"
"        stop = False\n"
"        while current != None and not stop:\n"
"            if current.getData() > item:\n"
"                stop = True\n"
"            else:\n"
"                previous = current\n"
"                current = current.getNext()\n"
"\n"
"        temp = Node(item)\n"
"        if previous == None:\n"
"            temp.setNext(self.head)\n"
"            self.head = temp\n"
"        else:\n"
"            temp.setNext(current)\n"
"            previous.setNext(temp)\n"
"\n"
"    def isEmpty(self):\n"
"        return self.head == None\n"
"\n"
"    def size(self):\n"
"        current = self.head\n"
"        count = 0\n"
"        while current != None:\n"
"            count = count + 1\n"
"            current = current.getNext()\n"
"\n"
"        return count\n"
"\n"
"\n"
"mylist = OrderedList()\n"
"mylist.add(31)\n"
"mylist.add(77)\n"
"mylist.add(17)\n"
"mylist.add(93)\n"
"mylist.add(26)\n"
"mylist.add(54)\n"
"\n"
"print(mylist.size())\n"
"print(mylist.search(93))\n"
"print(mylist.search(100))"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:268
msgid "Analysis of Linked Lists"
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:270
msgid ""
"To analyze the complexity of the linked list operations, we need to "
"consider whether they require traversal. Consider a linked list that has "
"*n* nodes. The ``isEmpty`` method is :math:`O(1)` since it requires one "
"step to check the head reference for ``None``. ``size``, on the other "
"hand, will always require *n* steps since there is no way to know how "
"many nodes are in the linked list without traversing from head to end. "
"Therefore, ``length`` is :math:`O(n)`. Adding an item to an unordered "
"list will always be O(1) since we simply place the new node at the head "
"of the linked list. However, ``search`` and ``remove``, as well as "
"``add`` for an ordered list, all require the traversal process. Although "
"on average they may need to traverse only half of the nodes, these "
"methods are all :math:`O(n)` since in the worst case each will process "
"every node in the list."
msgstr ""

#: ../../_sources/BasicDS/ImplementinganOrderedList.rst:284
msgid ""
"You may also have noticed that the performance of this implementation "
"differs from the actual performance given earlier for Python lists. This "
"suggests that linked lists are not the way Python lists are implemented. "
"The actual implementation of a Python list is based on the notion of an "
"array.  We discuss this in more detail in Chapter 8."
msgstr ""

