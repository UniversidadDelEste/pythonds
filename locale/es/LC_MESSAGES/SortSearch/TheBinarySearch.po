# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/SortSearch/TheBinarySearch.rst:6
msgid "The Binary Search"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:8
msgid ""
"It is possible to take greater advantage of the ordered list if we are "
"clever with our comparisons. In the sequential search, when we compare "
"against the first item, there are at most :math:`n-1` more items to look "
"through if the first item is not what we are looking for. Instead of "
"searching the list in sequence, a **binary search** will start by "
"examining the middle item. If that item is the one we are searching for, "
"we are done. If it is not the correct item, we can use the ordered nature"
" of the list to eliminate half of the remaining items. If the item we are"
" searching for is greater than the middle item, we know that the entire "
"lower half of the list as well as the middle item can be eliminated from "
"further consideration. The item, if it is in the list, must be in the "
"upper half."
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:21
msgid ""
"We can then repeat the process with the upper half. Start at the middle "
"item and compare it against what we are looking for. Again, we either "
"find it or split the list in half, therefore eliminating another large "
"part of our possible search space. :ref:`Figure 3 <fig_binsearch>` shows "
"how this algorithm can quickly find the value 54. The complete function "
"is shown in :ref:`CodeLens 3 <lst_binarysearchpy>`."
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:34
msgid ".. image:: SortSearch/Figures/binsearch.png"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:34
msgid "Figure 3: Binary Search of an Ordered List of Integers"
msgstr ""

msgid ""
"\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"search3\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\">Binary Search of "
"an Ordered List (search3)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var search3_trace = {\"code\": \"def binarySearch(alist, item):\\n    "
"first = 0\\n    last = len(alist)-1\\n    found = False\\n\\n    while "
"first<=last and not found:\\n        midpoint = (first + last)//2\\n"
"        if alist[midpoint] == item:\\n            found = True\\n        "
"else:\\n            if item < alist[midpoint]:\\n                last = "
"midpoint-1\\n            else:\\n                first = midpoint+1\\n\\n"
"    return found\\n\\ntestlist = [0, 1, 2, 8, 13, 17, 19, 32, "
"42,]\\nprint(binarySearch(testlist, 3))\\nprint(binarySearch(testlist, "
"13))\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, "
"\"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\"], \"stdout\": \"\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null]}, \"line\": 18, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", "
"1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", "
"null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 19, "
"\"event\": \"step_line\"}, {\"ordered_globals\": [\"binarySearch\", "
"\"testlist\"], \"stdout\": \"\", \"func_name\": \"binarySearch\", "
"\"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"item\": 3,"
" \"alist\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": "
"false, \"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f1\", "
"\"ordered_varnames\": [\"alist\", \"item\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 1, \"event\": "
"\"call\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\","
" 2]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\"]}], \"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": "
"[\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, "
"item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, "
"\"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"binarySearch\", \"testlist\"], \"stdout\": \"\", \"func_name\": "
"\"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1, "
"\"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"first\": 0},"
" \"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\"]}], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42]}, \"line\": 3, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": \"\","
" \"func_name\": \"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1,"
" \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"last\": 8, "
"\"first\": 0}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f1\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"first\", \"last\"]}], "
"\"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", "
"1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", "
"null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 4, "
"\"event\": \"step_line\"}, {\"ordered_globals\": [\"binarySearch\", "
"\"testlist\"], \"stdout\": \"\", \"func_name\": \"binarySearch\", "
"\"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"found\": "
"false, \"alist\": [\"REF\", 2], \"last\": 8, \"item\": 3, \"first\": 0}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\"]}], \"globals\": {\"testlist\": "
"[\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": "
"[\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0,"
" 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 6, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": \"\","
" \"func_name\": \"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1,"
" \"encoded_locals\": {\"found\": false, \"alist\": [\"REF\", 2], "
"\"last\": 8, \"item\": 3, \"first\": 0}, \"is_highlighted\": true, "
"\"is_parent\": false, \"func_name\": \"binarySearch\", \"is_zombie\": "
"false, \"parent_frame_id_list\": [], \"unique_hash\": "
"\"binarySearch_f1\", \"ordered_varnames\": [\"alist\", \"item\", "
"\"first\", \"last\", \"found\"]}], \"globals\": {\"testlist\": [\"REF\", "
"2], \"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42]}, \"line\": 7, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": \"\","
" \"func_name\": \"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1,"
" \"encoded_locals\": {\"last\": 8, \"midpoint\": 4, \"alist\": [\"REF\", "
"2], \"item\": 3, \"found\": false, \"first\": 0}, \"is_highlighted\": "
"true, \"is_parent\": false, \"func_name\": \"binarySearch\", "
"\"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": "
"\"binarySearch_f1\", \"ordered_varnames\": [\"alist\", \"item\", "
"\"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 8, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 8, \"midpoint\": 4, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 0}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 11, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 8, \"midpoint\": 4, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 0}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 12, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 3, \"midpoint\": 4, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 0}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 6, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 3, \"midpoint\": 4, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 0}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 7, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 3, \"midpoint\": 1, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 0}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 8, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 3, \"midpoint\": 1, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 0}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 11, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 3, \"midpoint\": 1, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 0}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 14, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 3, \"midpoint\": 1, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 2}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 6, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 3, \"midpoint\": 1, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 2}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 7, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 3, \"midpoint\": 2, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 2}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 8, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 3, \"midpoint\": 2, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 2}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 11, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 3, \"midpoint\": 2, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 2}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 14, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 3, \"midpoint\": 2, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 3}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 6, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 3, \"midpoint\": 2, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 3}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 7, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 3, \"midpoint\": 3, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 3}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 8, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 3, \"midpoint\": 3, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 3}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 11, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 3, \"midpoint\": 3, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 3}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 12, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 2, \"midpoint\": 3, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 3}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 6, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 2, \"midpoint\": 3, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"found\": false, \"first\": 3}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 16, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"last\": 2, \"midpoint\": 3, "
"\"alist\": [\"REF\", 2], \"item\": 3, \"__return__\": false, \"found\": "
"false, \"first\": 3}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f1\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"first\", \"last\", "
"\"found\", \"midpoint\", \"__return__\"]}], \"globals\": {\"testlist\": "
"[\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": "
"[\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0,"
" 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 16, \"event\": \"return\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": "
"\"False\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", "
"1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", "
"null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 20, "
"\"event\": \"step_line\"}, {\"ordered_globals\": [\"binarySearch\", "
"\"testlist\"], \"stdout\": \"False\\n\", \"func_name\": \"binarySearch\","
" \"stack_to_render\": [{\"frame_id\": 2, \"encoded_locals\": {\"item\": "
"13, \"alist\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": "
"false, \"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f2\", "
"\"ordered_varnames\": [\"alist\", \"item\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 1, \"event\": "
"\"call\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"False\\n\", \"func_name\": \"binarySearch\", "
"\"stack_to_render\": [{\"frame_id\": 2, \"encoded_locals\": {\"item\": "
"13, \"alist\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": "
"false, \"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f2\", "
"\"ordered_varnames\": [\"alist\", \"item\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 2, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"False\\n\", \"func_name\": \"binarySearch\", "
"\"stack_to_render\": [{\"frame_id\": 2, \"encoded_locals\": {\"item\": "
"13, \"alist\": [\"REF\", 2], \"first\": 0}, \"is_highlighted\": true, "
"\"is_parent\": false, \"func_name\": \"binarySearch\", \"is_zombie\": "
"false, \"parent_frame_id_list\": [], \"unique_hash\": "
"\"binarySearch_f2\", \"ordered_varnames\": [\"alist\", \"item\", "
"\"first\"]}], \"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\":"
" [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, "
"item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, "
"\"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"binarySearch\", \"testlist\"], \"stdout\": \"False\\n\", "
"\"func_name\": \"binarySearch\", \"stack_to_render\": [{\"frame_id\": 2, "
"\"encoded_locals\": {\"item\": 13, \"alist\": [\"REF\", 2], \"last\": 8, "
"\"first\": 0}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f2\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"first\", \"last\"]}], "
"\"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", "
"1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", "
"null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 4, "
"\"event\": \"step_line\"}, {\"ordered_globals\": [\"binarySearch\", "
"\"testlist\"], \"stdout\": \"False\\n\", \"func_name\": \"binarySearch\","
" \"stack_to_render\": [{\"frame_id\": 2, \"encoded_locals\": {\"found\": "
"false, \"alist\": [\"REF\", 2], \"last\": 8, \"item\": 13, \"first\": 0},"
" \"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f2\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\"]}], \"globals\": {\"testlist\": "
"[\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": "
"[\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0,"
" 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 6, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": "
"\"False\\n\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 2, \"encoded_locals\": {\"found\": false, \"alist\": "
"[\"REF\", 2], \"last\": 8, \"item\": 13, \"first\": 0}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f2\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\"]}], \"globals\": {\"testlist\": "
"[\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": "
"[\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0,"
" 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 7, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": "
"\"False\\n\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 2, \"encoded_locals\": {\"last\": 8, \"midpoint\": 4, "
"\"alist\": [\"REF\", 2], \"item\": 13, \"found\": false, \"first\": 0}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f2\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 8, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"False\\n\", \"func_name\": \"binarySearch\", "
"\"stack_to_render\": [{\"frame_id\": 2, \"encoded_locals\": {\"last\": 8,"
" \"midpoint\": 4, \"alist\": [\"REF\", 2], \"item\": 13, \"found\": "
"false, \"first\": 0}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f2\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"first\", \"last\", "
"\"found\", \"midpoint\"]}], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42]}, \"line\": 9, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": "
"\"False\\n\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 2, \"encoded_locals\": {\"last\": 8, \"midpoint\": 4, "
"\"alist\": [\"REF\", 2], \"item\": 13, \"found\": true, \"first\": 0}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f2\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"first\", \"last\", \"found\", \"midpoint\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 6, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"False\\n\", \"func_name\": \"binarySearch\", "
"\"stack_to_render\": [{\"frame_id\": 2, \"encoded_locals\": {\"last\": 8,"
" \"midpoint\": 4, \"alist\": [\"REF\", 2], \"item\": 13, \"found\": true,"
" \"first\": 0}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f2\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"first\", \"last\", "
"\"found\", \"midpoint\"]}], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42]}, \"line\": 16, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": "
"\"False\\n\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 2, \"encoded_locals\": {\"last\": 8, \"midpoint\": 4, "
"\"alist\": [\"REF\", 2], \"item\": 13, \"__return__\": true, \"found\": "
"true, \"first\": 0}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f2\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"first\", \"last\", "
"\"found\", \"midpoint\", \"__return__\"]}], \"globals\": {\"testlist\": "
"[\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": "
"[\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0,"
" 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 16, \"event\": \"return\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": "
"\"False\\nTrue\\n\", \"func_name\": \"<module>\", \"stack_to_render\": "
"[], \"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\","
" 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", "
"null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 20, "
"\"event\": \"return\"}]};\n"
"var search3_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        search3_vis = new ExecutionVisualizer('search3',search3_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: "
"redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(search3_vis,'search3');\n"
"        styleButtons('search3');\n"
"        allVisualizers.push(search3_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component "
"search3_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#search3_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', "
"'div_id':'search3'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (search3_vis) {\n"
"        search3_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:63
msgid ""
"Before we move on to the analysis, we should note that this algorithm is "
"a great example of a divide and conquer strategy. Divide and conquer "
"means that we divide the problem into smaller pieces, solve the smaller "
"pieces in some way, and then reassemble the whole problem to get the "
"result. When we perform a binary search of a list, we first check the "
"middle item. If the item we are searching for is less than the middle "
"item, we can simply perform a binary search of the left half of the "
"original list. Likewise, if the item is greater, we can perform a binary "
"search of the right half. Either way, this is a recursive call to the "
"binary search function passing a smaller list. :ref:`CodeLens 4 "
"<lst_recbinarysearch>` shows this recursive version."
msgstr ""

msgid ""
"\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"search4\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\">A Binary Search--"
"Recursive Version (search4)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var search4_trace = {\"code\": \"def binarySearch(alist, item):\\n    if "
"len(alist) == 0:\\n        return False\\n    else:\\n        midpoint = "
"len(alist)//2\\n        if alist[midpoint]==item:\\n          return "
"True\\n        else:\\n          if item<alist[midpoint]:\\n            "
"return binarySearch(alist[:midpoint],item)\\n          else:\\n"
"            return binarySearch(alist[midpoint+1:],item)\\n\\ntestlist = "
"[0, 1, 2, 8, 13, 17, 19, 32, 42,]\\nprint(binarySearch(testlist, "
"3))\\nprint(binarySearch(testlist, 13))\", \"trace\": "
"[{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\","
" \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, "
"\"event\": \"step_line\"}, {\"ordered_globals\": [\"binarySearch\"], "
"\"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": "
"[\"FUNCTION\", \"binarySearch(alist, item)\", null]}, \"line\": 14, "
"\"event\": \"step_line\"}, {\"ordered_globals\": [\"binarySearch\", "
"\"testlist\"], \"stdout\": \"\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42]}, \"line\": 15, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": \"\","
" \"func_name\": \"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1,"
" \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2]}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\"]}], \"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": "
"[\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, "
"item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, "
"\"line\": 1, \"event\": \"call\"}, {\"ordered_globals\": "
"[\"binarySearch\", \"testlist\"], \"stdout\": \"\", \"func_name\": "
"\"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1, "
"\"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2]}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\"]}], \"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": "
"[\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, "
"item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, "
"\"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"binarySearch\", \"testlist\"], \"stdout\": \"\", \"func_name\": "
"\"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1, "
"\"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2]}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\"]}], \"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": "
"[\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, "
"item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, "
"\"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"binarySearch\", \"testlist\"], \"stdout\": \"\", \"func_name\": "
"\"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1, "
"\"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\": "
"4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42]}, \"line\": 6, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": \"\","
" \"func_name\": \"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1,"
" \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\":"
" 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42]}, \"line\": 9, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": \"\","
" \"func_name\": \"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1,"
" \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\":"
" 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42]}, \"line\": 10, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": \"\","
" \"func_name\": \"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1,"
" \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\":"
" 4}, \"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 2, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 3]}, \"is_highlighted\": true, "
"\"is_parent\": false, \"func_name\": \"binarySearch\", \"is_zombie\": "
"false, \"parent_frame_id_list\": [], \"unique_hash\": "
"\"binarySearch_f2\", \"ordered_varnames\": [\"alist\", \"item\"]}], "
"\"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", "
"1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", "
"null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42], \"3\": "
"[\"LIST\", 0, 1, 2, 8]}, \"line\": 1, \"event\": \"call\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": \"\","
" \"func_name\": \"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1,"
" \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\":"
" 4}, \"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 2, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 3]}, \"is_highlighted\": true, "
"\"is_parent\": false, \"func_name\": \"binarySearch\", \"is_zombie\": "
"false, \"parent_frame_id_list\": [], \"unique_hash\": "
"\"binarySearch_f2\", \"ordered_varnames\": [\"alist\", \"item\"]}], "
"\"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", "
"1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", "
"null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42], \"3\": "
"[\"LIST\", 0, 1, 2, 8]}, \"line\": 2, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": \"\","
" \"func_name\": \"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1,"
" \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\":"
" 4}, \"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 2, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 3]}, \"is_highlighted\": true, "
"\"is_parent\": false, \"func_name\": \"binarySearch\", \"is_zombie\": "
"false, \"parent_frame_id_list\": [], \"unique_hash\": "
"\"binarySearch_f2\", \"ordered_varnames\": [\"alist\", \"item\"]}], "
"\"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", "
"1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", "
"null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42], \"3\": "
"[\"LIST\", 0, 1, 2, 8]}, \"line\": 5, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": \"\","
" \"func_name\": \"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1,"
" \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\":"
" 4}, \"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 2, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 3], \"midpoint\": 2}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f2\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42], \"3\": [\"LIST\", 0, 1, 2, 8]}, \"line\": 6, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\","
" 2], \"midpoint\": 4}, \"is_highlighted\": false, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f1\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"midpoint\"]}, "
"{\"frame_id\": 2, \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", "
"3], \"midpoint\": 2}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f2\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"midpoint\"]}], \"globals\":"
" {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42], \"3\": [\"LIST\", 0, 1, 2, "
"8]}, \"line\": 9, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"binarySearch\", \"testlist\"], \"stdout\": \"\", \"func_name\": "
"\"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1, "
"\"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\": "
"4}, \"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 2, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 3], \"midpoint\": 2}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f2\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42], \"3\": [\"LIST\", 0, 1, 2, 8]}, \"line\": 12, \"event\":"
" \"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\","
" 2], \"midpoint\": 4}, \"is_highlighted\": false, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f1\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"midpoint\"]}, "
"{\"frame_id\": 2, \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", "
"3], \"midpoint\": 2}, \"is_highlighted\": false, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f2\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"midpoint\"]}, "
"{\"frame_id\": 3, \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", "
"4]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f3\", \"ordered_varnames\": [\"alist\", "
"\"item\"]}], \"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": "
"[\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, "
"item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42], \"3\":"
" [\"LIST\", 0, 1, 2, 8], \"4\": [\"LIST\", 8]}, \"line\": 1, \"event\": "
"\"call\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\","
" 2], \"midpoint\": 4}, \"is_highlighted\": false, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f1\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"midpoint\"]}, "
"{\"frame_id\": 2, \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", "
"3], \"midpoint\": 2}, \"is_highlighted\": false, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f2\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"midpoint\"]}, "
"{\"frame_id\": 3, \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", "
"4]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f3\", \"ordered_varnames\": [\"alist\", "
"\"item\"]}], \"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": "
"[\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, "
"item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42], \"3\":"
" [\"LIST\", 0, 1, 2, 8], \"4\": [\"LIST\", 8]}, \"line\": 2, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\","
" 2], \"midpoint\": 4}, \"is_highlighted\": false, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f1\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"midpoint\"]}, "
"{\"frame_id\": 2, \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", "
"3], \"midpoint\": 2}, \"is_highlighted\": false, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f2\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"midpoint\"]}, "
"{\"frame_id\": 3, \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", "
"4]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f3\", \"ordered_varnames\": [\"alist\", "
"\"item\"]}], \"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": "
"[\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, "
"item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42], \"3\":"
" [\"LIST\", 0, 1, 2, 8], \"4\": [\"LIST\", 8]}, \"line\": 5, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\","
" 2], \"midpoint\": 4}, \"is_highlighted\": false, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f1\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"midpoint\"]}, "
"{\"frame_id\": 2, \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", "
"3], \"midpoint\": 2}, \"is_highlighted\": false, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f2\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"midpoint\"]}, "
"{\"frame_id\": 3, \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", "
"4], \"midpoint\": 0}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f3\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"midpoint\"]}], \"globals\":"
" {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42], \"3\": [\"LIST\", 0, 1, 2, "
"8], \"4\": [\"LIST\", 8]}, \"line\": 6, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": \"\","
" \"func_name\": \"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1,"
" \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\":"
" 4}, \"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 2, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 3], \"midpoint\": 2}, "
"\"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f2\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 3, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 4], \"midpoint\": 0}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f3\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42], \"3\": [\"LIST\", 0, 1, 2, 8], \"4\": [\"LIST\", 8]}, "
"\"line\": 9, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"binarySearch\", \"testlist\"], \"stdout\": \"\", \"func_name\": "
"\"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1, "
"\"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\": "
"4}, \"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 2, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 3], \"midpoint\": 2}, "
"\"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f2\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 3, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 4], \"midpoint\": 0}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f3\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42], \"3\": [\"LIST\", 0, 1, 2, 8], \"4\": [\"LIST\", 8]}, "
"\"line\": 10, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"binarySearch\", \"testlist\"], \"stdout\": \"\", \"func_name\": "
"\"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1, "
"\"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\": "
"4}, \"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 2, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 3], \"midpoint\": 2}, "
"\"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f2\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 3, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 4], \"midpoint\": 0}, "
"\"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f3\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 4, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 5]}, \"is_highlighted\": true, "
"\"is_parent\": false, \"func_name\": \"binarySearch\", \"is_zombie\": "
"false, \"parent_frame_id_list\": [], \"unique_hash\": "
"\"binarySearch_f4\", \"ordered_varnames\": [\"alist\", \"item\"]}], "
"\"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", "
"1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", "
"null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42], \"3\": "
"[\"LIST\", 0, 1, 2, 8], \"4\": [\"LIST\", 8], \"5\": [\"LIST\"]}, "
"\"line\": 1, \"event\": \"call\"}, {\"ordered_globals\": "
"[\"binarySearch\", \"testlist\"], \"stdout\": \"\", \"func_name\": "
"\"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1, "
"\"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\": "
"4}, \"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 2, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 3], \"midpoint\": 2}, "
"\"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f2\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 3, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 4], \"midpoint\": 0}, "
"\"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f3\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 4, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 5]}, \"is_highlighted\": true, "
"\"is_parent\": false, \"func_name\": \"binarySearch\", \"is_zombie\": "
"false, \"parent_frame_id_list\": [], \"unique_hash\": "
"\"binarySearch_f4\", \"ordered_varnames\": [\"alist\", \"item\"]}], "
"\"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", "
"1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", "
"null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42], \"3\": "
"[\"LIST\", 0, 1, 2, 8], \"4\": [\"LIST\", 8], \"5\": [\"LIST\"]}, "
"\"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"binarySearch\", \"testlist\"], \"stdout\": \"\", \"func_name\": "
"\"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1, "
"\"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\": "
"4}, \"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 2, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 3], \"midpoint\": 2}, "
"\"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f2\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 3, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 4], \"midpoint\": 0}, "
"\"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f3\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 4, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 5]}, \"is_highlighted\": true, "
"\"is_parent\": false, \"func_name\": \"binarySearch\", \"is_zombie\": "
"false, \"parent_frame_id_list\": [], \"unique_hash\": "
"\"binarySearch_f4\", \"ordered_varnames\": [\"alist\", \"item\"]}], "
"\"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", "
"1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", "
"null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42], \"3\": "
"[\"LIST\", 0, 1, 2, 8], \"4\": [\"LIST\", 8], \"5\": [\"LIST\"]}, "
"\"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"binarySearch\", \"testlist\"], \"stdout\": \"\", \"func_name\": "
"\"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1, "
"\"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\": "
"4}, \"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 2, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 3], \"midpoint\": 2}, "
"\"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f2\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 3, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 4], \"midpoint\": 0}, "
"\"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f3\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 4, \"encoded_locals\": "
"{\"__return__\": false, \"item\": 3, \"alist\": [\"REF\", 5]}, "
"\"is_highlighted\": true, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f4\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"__return__\"]}], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42], \"3\": [\"LIST\", 0, 1, 2, 8], \"4\": [\"LIST\", 8], "
"\"5\": [\"LIST\"]}, \"line\": 3, \"event\": \"return\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": \"\","
" \"func_name\": \"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1,"
" \"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\":"
" 4}, \"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 2, \"encoded_locals\": "
"{\"item\": 3, \"alist\": [\"REF\", 3], \"midpoint\": 2}, "
"\"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f2\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 3, \"encoded_locals\": "
"{\"__return__\": false, \"item\": 3, \"alist\": [\"REF\", 4], "
"\"midpoint\": 0}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f3\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"midpoint\", "
"\"__return__\"]}], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42], \"3\": [\"LIST\", 0, 1, 2, 8], \"4\": [\"LIST\", 8]}, "
"\"line\": 10, \"event\": \"return\"}, {\"ordered_globals\": "
"[\"binarySearch\", \"testlist\"], \"stdout\": \"\", \"func_name\": "
"\"binarySearch\", \"stack_to_render\": [{\"frame_id\": 1, "
"\"encoded_locals\": {\"item\": 3, \"alist\": [\"REF\", 2], \"midpoint\": "
"4}, \"is_highlighted\": false, \"is_parent\": false, \"func_name\": "
"\"binarySearch\", \"is_zombie\": false, \"parent_frame_id_list\": [], "
"\"unique_hash\": \"binarySearch_f1\", \"ordered_varnames\": [\"alist\", "
"\"item\", \"midpoint\"]}, {\"frame_id\": 2, \"encoded_locals\": "
"{\"__return__\": false, \"item\": 3, \"alist\": [\"REF\", 3], "
"\"midpoint\": 2}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f2\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"midpoint\", "
"\"__return__\"]}], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42], \"3\": [\"LIST\", 0, 1, 2, 8]}, \"line\": 12, \"event\":"
" \"return\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 1, \"encoded_locals\": {\"__return__\": false, \"item\": "
"3, \"alist\": [\"REF\", 2], \"midpoint\": 4}, \"is_highlighted\": true, "
"\"is_parent\": false, \"func_name\": \"binarySearch\", \"is_zombie\": "
"false, \"parent_frame_id_list\": [], \"unique_hash\": "
"\"binarySearch_f1\", \"ordered_varnames\": [\"alist\", \"item\", "
"\"midpoint\", \"__return__\"]}], \"globals\": {\"testlist\": [\"REF\", "
"2], \"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42]}, \"line\": 10, \"event\": \"return\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": "
"\"False\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", "
"1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", "
"null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 16, "
"\"event\": \"step_line\"}, {\"ordered_globals\": [\"binarySearch\", "
"\"testlist\"], \"stdout\": \"False\\n\", \"func_name\": \"binarySearch\","
" \"stack_to_render\": [{\"frame_id\": 5, \"encoded_locals\": {\"item\": "
"13, \"alist\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": "
"false, \"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f5\", "
"\"ordered_varnames\": [\"alist\", \"item\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 1, \"event\": "
"\"call\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"False\\n\", \"func_name\": \"binarySearch\", "
"\"stack_to_render\": [{\"frame_id\": 5, \"encoded_locals\": {\"item\": "
"13, \"alist\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": "
"false, \"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f5\", "
"\"ordered_varnames\": [\"alist\", \"item\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 2, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"False\\n\", \"func_name\": \"binarySearch\", "
"\"stack_to_render\": [{\"frame_id\": 5, \"encoded_locals\": {\"item\": "
"13, \"alist\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": "
"false, \"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f5\", "
"\"ordered_varnames\": [\"alist\", \"item\"]}], \"globals\": "
"{\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 5, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"False\\n\", \"func_name\": \"binarySearch\", "
"\"stack_to_render\": [{\"frame_id\": 5, \"encoded_locals\": {\"item\": "
"13, \"alist\": [\"REF\", 2], \"midpoint\": 4}, \"is_highlighted\": true, "
"\"is_parent\": false, \"func_name\": \"binarySearch\", \"is_zombie\": "
"false, \"parent_frame_id_list\": [], \"unique_hash\": "
"\"binarySearch_f5\", \"ordered_varnames\": [\"alist\", \"item\", "
"\"midpoint\"]}], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42]}, \"line\": 6, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": "
"\"False\\n\", \"func_name\": \"binarySearch\", \"stack_to_render\": "
"[{\"frame_id\": 5, \"encoded_locals\": {\"item\": 13, \"alist\": "
"[\"REF\", 2], \"midpoint\": 4}, \"is_highlighted\": true, \"is_parent\": "
"false, \"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f5\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"midpoint\"]}], \"globals\":"
" {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\", 1]}, \"heap\": "
"{\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", null], \"2\": "
"[\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 7, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"binarySearch\", \"testlist\"], "
"\"stdout\": \"False\\n\", \"func_name\": \"binarySearch\", "
"\"stack_to_render\": [{\"frame_id\": 5, \"encoded_locals\": "
"{\"__return__\": true, \"item\": 13, \"alist\": [\"REF\", 2], "
"\"midpoint\": 4}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"binarySearch\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"binarySearch_f5\", "
"\"ordered_varnames\": [\"alist\", \"item\", \"midpoint\", "
"\"__return__\"]}], \"globals\": {\"testlist\": [\"REF\", 2], "
"\"binarySearch\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"binarySearch(alist, item)\", null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, "
"17, 19, 32, 42]}, \"line\": 7, \"event\": \"return\"}, "
"{\"ordered_globals\": [\"binarySearch\", \"testlist\"], \"stdout\": "
"\"False\\nTrue\\n\", \"func_name\": \"<module>\", \"stack_to_render\": "
"[], \"globals\": {\"testlist\": [\"REF\", 2], \"binarySearch\": [\"REF\","
" 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"binarySearch(alist, item)\", "
"null], \"2\": [\"LIST\", 0, 1, 2, 8, 13, 17, 19, 32, 42]}, \"line\": 16, "
"\"event\": \"return\"}]};\n"
"var search4_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        search4_vis = new ExecutionVisualizer('search4',search4_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: "
"redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(search4_vis,'search4');\n"
"        styleButtons('search4');\n"
"        allVisualizers.push(search4_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component "
"search4_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#search4_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', "
"'div_id':'search4'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (search4_vis) {\n"
"        search4_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:100
msgid "Analysis of Binary Search"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:102
msgid ""
"To analyze the binary search algorithm, we need to recall that each "
"comparison eliminates about half of the remaining items from "
"consideration. What is the maximum number of comparisons this algorithm "
"will require to check the entire list? If we start with *n* items, about "
":math:`\\frac{n}{2}` items will be left after the first comparison. After"
" the second comparison, there will be about :math:`\\frac{n}{4}`. Then "
":math:`\\frac{n}{8}`, :math:`\\frac{n}{16}`, and so on. How many times "
"can we split the list? :ref:`Table 3 <tbl_binaryanalysis>` helps us to "
"see the answer."
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:114
msgid "**Table 3: Tabular Analysis for a Binary Search**"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:117
msgid "**Comparisons**"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:117
msgid "**Approximate Number of Items Left**"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:119
msgid "1"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:119
msgid ":math:`\\frac {n}{2}`"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:120
msgid "2"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:120
msgid ":math:`\\frac {n}{4}`"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:121
msgid "3"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:121
msgid ":math:`\\frac {n}{8}`"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:122
msgid "..."
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:123
msgid "i"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:123
msgid ":math:`\\frac {n}{2^i}`"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:127
msgid ""
"When we split the list enough times, we end up with a list that has just "
"one item. Either that is the item we are looking for or it is not. Either"
" way, we are done. The number of comparisons necessary to get to this "
"point is *i* where :math:`\\frac {n}{2^i} =1`. Solving for *i* gives us "
":math:`i=\\log n`. The maximum number of comparisons is logarithmic with "
"respect to the number of items in the list. Therefore, the binary search "
"is :math:`O(\\log n)`."
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:135
msgid ""
"One additional analysis issue needs to be addressed. In the recursive "
"solution shown above, the recursive call,"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:138
msgid "``binarySearch(alist[:midpoint],item)``"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:140
msgid ""
"uses the slice operator to create the left half of the list that is then "
"passed to the next invocation (similarly for the right half as well). The"
" analysis that we did above assumed that the slice operator takes "
"constant time. However, we know that the slice operator in Python is "
"actually O(k). This means that the binary search using slice will not "
"perform in strict logarithmic time. Luckily this can be remedied by "
"passing the list along with the starting and ending indices. The indices "
"can be calculated as we did in :ref:`Listing 3 <lst_binarysearchpy>`. We "
"leave this implementation as an exercise."
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:150
msgid ""
"Even though a binary search is generally better than a sequential search,"
" it is important to note that for small values of *n*, the additional "
"cost of sorting is probably not worth it. In fact, we should always "
"consider whether it is cost effective to take on the extra work of "
"sorting to gain searching benefits. If we can sort once and then search "
"many times, the cost of the sort is not so significant. However, for "
"large lists, sorting even once can be so expensive that simply performing"
" a sequential search from the start may be the best choice."
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:159
msgid "Self Check"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:173
msgid "11, 5, 6, 8"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:173
msgid "12, 6, 11, 8"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:173
msgid "3, 5, 6, 8"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:173
msgid "18, 12, 6, 8"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:173
#: ../../_sources/SortSearch/TheBinarySearch.rst:185
msgid ""
"Looks like you might be guilty of an off-by-one error.  Remember the "
"first position is index 0."
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:173
msgid "Binary search starts at the midpoint and halves the list each time."
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:173
msgid ""
"Binary search does not start at the beginning and search sequentially, "
"its starts in the middle and halves the list after each compare."
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:173
msgid ""
"It appears that you are starting from the end and halving the list each "
"time."
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:172
msgid ""
"Q-13: Suppose you have the following sorted list [3, 5, 6, 8, 11, 12, 14,"
" 15, 17, 18] and are using the recursive binary search algorithm.  Which "
"group of numbers correctly shows the sequence of comparisons used to find"
" the key 8."
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:185
msgid "11, 14, 17"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:185
msgid "18, 17, 15"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:185
msgid "14, 17, 15"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:185
msgid "12, 17, 15"
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:185
msgid "Remember binary search starts in the middle and halves the list."
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:185
msgid ""
"Looks like you might be off by one, be careful that you are calculating "
"the midpont using integer arithmetic."
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:185
msgid ""
"Binary search starts at the midpoint and halves the list each time. It is"
" done when the list is empty."
msgstr ""

#: ../../_sources/SortSearch/TheBinarySearch.rst:185
msgid ""
"Q-14: Suppose you have the following sorted list [3, 5, 6, 8, 11, 12, 14,"
" 15, 17, 18] and are using the recursive binary search algorithm.  Which "
"group of numbers correctly shows the sequence of comparisons used to "
"search for the key 16?"
msgstr ""

