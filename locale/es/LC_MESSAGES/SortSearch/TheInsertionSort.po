# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/SortSearch/TheInsertionSort.rst:6
msgid "The Insertion Sort"
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:8
msgid ""
"The **insertion sort**, although still :math:`O(n^{2})`, works in a "
"slightly different way. It always maintains a sorted sublist in the lower"
" positions of the list. Each new item is then “inserted” back into the "
"previous sublist such that the sorted sublist is one item larger. "
":ref:`Figure 4 <fig_insertionsort>` shows the insertion sorting process. "
"The shaded items represent the ordered sublists as the algorithm makes "
"each pass."
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:20
msgid ".. image:: SortSearch/Figures/insertionsort.png"
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:20
msgid "Figure 4: ``insertionSort``"
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:23
msgid ""
"We begin by assuming that a list with one item (position :math:`0`) is "
"already sorted. On each pass, one for each item 1 through :math:`n-1`, "
"the current item is checked against those in the already sorted sublist. "
"As we look back into the already sorted sublist, we shift those items "
"that are greater to the right. When we reach a smaller item or the end of"
" the sublist, the current item can be inserted."
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:30
msgid ""
":ref:`Figure 5 <fig_insertionpass>` shows the fifth pass in detail. At "
"this point in the algorithm, a sorted sublist of five items consisting of"
" 17, 26, 54, 77, and 93 exists. We want to insert 31 back into the "
"already sorted items. The first comparison against 93 causes 93 to be "
"shifted to the right. 77 and 54 are also shifted. When the item 26 is "
"encountered, the shifting process stops and 31 is placed in the open "
"position. Now we have a sorted sublist of six items."
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:43
msgid ".. image:: SortSearch/Figures/insertionpass.png"
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:43
msgid "Figure 5: ``insertionSort``: Fifth Pass of the Sort"
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:46
msgid ""
"The implementation of ``insertionSort`` (:ref:`ActiveCode 1 "
"<lst_insertion>`) shows that there are again :math:`n-1` passes to sort "
"*n* items. The iteration starts at position 1 and moves through position "
":math:`n-1`, as these are the items that need to be inserted back into "
"the sorted sublists. Line 8 performs the shift operation that moves a "
"value up one position in the list, making room behind it for the "
"insertion. Remember that this is not a complete exchange as was performed"
" in the previous algorithms."
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:54
msgid ""
"The maximum number of comparisons for an insertion sort is the sum of the"
" first :math:`n-1` integers. Again, this is :math:`O(n^{2})`. However, in"
" the best case, only one comparison needs to be done on each pass. This "
"would be the case for an already sorted list."
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:59
msgid ""
"One note about shifting versus exchanging is also important. In general, "
"a shift operation requires approximately a third of the processing work "
"of an exchange since only one assignment is performed. In benchmark "
"studies, insertion sort will show very good performance."
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:83
msgid "data-caption='Insertion Sort'"
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:83
msgid ""
"def insertionSort(alist):\n"
"   for index in range(1,len(alist)):\n"
"\n"
"     currentvalue = alist[index]\n"
"     position = index\n"
"\n"
"     while position>0 and alist[position-1]>currentvalue:\n"
"         alist[position]=alist[position-1]\n"
"         position = position-1\n"
"\n"
"     alist[position]=currentvalue\n"
"\n"
"alist = [54,26,93,17,77,31,44,55,20]\n"
"insertionSort(alist)\n"
"print(alist)"
msgstr ""

msgid ""
"<script type=\"text/javascript\" "
"src=\"../_static/sortmodels.js\"></script>\n"
"<script type=\"text/javascript\" "
"src=\"../_static/sortviewers.js\"></script>\n"
"\n"
"<div id=\"insertion_anim\">\n"
"<canvas id=\"insertion_anim_canvas\" width=\"400\" height=\"400\" "
"style=\"border:4px solid blue\"></canvas>\n"
"<br />\n"
"<button onclick=\"insertion_anim_anim = "
"insertion_anim_init('insertion_anim')\">Initialize</button>\n"
"<button "
"onclick=\"insertion_anim_anim.run('insertion_anim_anim')\">Run</button>\n"
"<button onclick=\"insertion_anim_anim.stop()\">Stop</button> </br>\n"
"<button onclick=\"insertion_anim_anim.begin()\">Beginning</button>\n"
"<button onclick=\"insertion_anim_anim.forward()\">Step Forward</button>\n"
"<button onclick=\"insertion_anim_anim.backward()\">Step Backward</button>"
"\n"
"<button onclick=\"insertion_anim_anim.end()\">End</button>\n"
"\n"
"<script type=\"text/javascript\">\n"
"insertion_anim_init = function(divid)\n"
"{\n"
"   var a = new Animator(new InsertionSortModel(), new BarViewer(), divid)"
"\n"
"   a.init()\n"
"   return a\n"
"}\n"
"</script>\n"
"\n"
"</div>\n"
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:112
msgid "Self Check"
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:126
msgid "[4, 5, 12, 15, 14, 10, 8, 18, 19, 20]"
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:126
msgid "[15, 5, 4, 10, 12, 8, 14, 18, 19, 20]"
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:126
msgid "[4, 5, 15, 18, 12, 19, 14, 10, 8, 20]"
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:126
msgid "[15, 5, 4, 18, 12, 19, 14, 8, 10, 20]"
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:126
msgid "This is a bubble sort."
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:126
msgid "This is the result of selection sort."
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:126
msgid ""
"Insertion sort works at the start of the list.  Each pass produces a "
"longer sorted list."
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:126
msgid "Insertion sort works on the front of the list not the end."
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:125
msgid "Q-16:  Suppose you have the following list of numbers to sort: <br>"
msgstr ""

#: ../../_sources/SortSearch/TheInsertionSort.rst:126
msgid ""
"[15, 5, 4, 18, 12, 19, 14, 10, 8, 20] which list represents the partially"
" sorted list after three complete passes of insertion sort?"
msgstr ""

