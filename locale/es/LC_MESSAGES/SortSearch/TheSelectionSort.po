# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/SortSearch/TheSelectionSort.rst:6
msgid "The Selection Sort"
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:8
msgid ""
"The **selection sort** improves on the bubble sort by making only one "
"exchange for every pass through the list. In order to do this, a "
"selection sort looks for the largest value as it makes a pass and, after "
"completing the pass, places it in the proper location. As with a bubble "
"sort, after the first pass, the largest item is in the correct place. "
"After the second pass, the next largest is in place. This process "
"continues and requires :math:`n-1` passes to sort *n* items, since the "
"final item must be in place after the :math:`(n-1)` st pass."
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:17
msgid ""
":ref:`Figure 3 <fig_selectionsort>` shows the entire sorting process. On "
"each pass, the largest remaining item is selected and then placed in its "
"proper location. The first pass places 93, the second pass places 77, the"
" third places 55, and so on. The function is shown in :ref:`ActiveCode 1 "
"<lst_selectionsortcode>`."
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:29
msgid ".. image:: SortSearch/Figures/selectionsortnew.png"
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:29
msgid "Figure 3: ``selectionSort``"
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:50
msgid "data-caption='Selection Sort'"
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:50
msgid ""
"def selectionSort(alist):\n"
"   for fillslot in range(len(alist)-1,0,-1):\n"
"       positionOfMax=0\n"
"       for location in range(1,fillslot+1):\n"
"           if alist[location]>alist[positionOfMax]:\n"
"               positionOfMax = location\n"
"\n"
"       temp = alist[fillslot]\n"
"       alist[fillslot] = alist[positionOfMax]\n"
"       alist[positionOfMax] = temp\n"
"\n"
"alist = [54,26,93,17,77,31,44,55,20]\n"
"selectionSort(alist)\n"
"print(alist)"
msgstr ""

msgid ""
"<script type=\"text/javascript\" "
"src=\"../_static/sortmodels.js\"></script>\n"
"<script type=\"text/javascript\" "
"src=\"../_static/sortviewers.js\"></script>\n"
"\n"
"<div id=\"selection_anim\">\n"
"<canvas id=\"selection_anim_canvas\" width=\"400\" height=\"400\" "
"style=\"border:4px solid blue\"></canvas>\n"
"<br />\n"
"<button onclick=\"selection_anim_anim = "
"selection_anim_init('selection_anim')\">Initialize</button>\n"
"<button "
"onclick=\"selection_anim_anim.run('selection_anim_anim')\">Run</button>\n"
"<button onclick=\"selection_anim_anim.stop()\">Stop</button> </br>\n"
"<button onclick=\"selection_anim_anim.begin()\">Beginning</button>\n"
"<button onclick=\"selection_anim_anim.forward()\">Step Forward</button>\n"
"<button onclick=\"selection_anim_anim.backward()\">Step Backward</button>"
"\n"
"<button onclick=\"selection_anim_anim.end()\">End</button>\n"
"\n"
"<script type=\"text/javascript\">\n"
"selection_anim_init = function(divid)\n"
"{\n"
"   var a = new Animator(new SelectionSortModel(), new BarViewer(), divid)"
"\n"
"   a.init()\n"
"   return a\n"
"}\n"
"</script>\n"
"\n"
"</div>\n"
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:79
msgid ""
"You may see that the selection sort makes the same number of comparisons "
"as the bubble sort and is therefore also :math:`O(n^{2})`. However, due "
"to the reduction in the number of exchanges, the selection sort typically"
" executes faster in benchmark studies. In fact, for our list, the bubble "
"sort makes 20 exchanges, while the selection sort makes only 8."
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:87
msgid "Self Check"
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:101
msgid "[7, 11, 12, 1, 6, 14, 8, 18, 19, 20]"
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:101
msgid "[7, 11, 12, 14, 19, 1, 6, 18, 8, 20]"
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:101
msgid "[11, 7, 12, 14, 1, 6, 8, 18, 19, 20]"
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:101
msgid "[11, 7, 12, 14, 8, 1, 6, 18, 19, 20]"
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:101
msgid ""
"Selection sort is similar to bubble sort (which you appear to have done) "
"but uses fewer swaps"
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:101
msgid "This looks like an insertion sort."
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:101
msgid ""
"This one looks similar to the correct answer but instead of swapping the "
"numbers have been shifted to the left to make room for the correct "
"numbers."
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:101
msgid "Selection sort improves upon bubble sort by making fewer swaps."
msgstr ""

#: ../../_sources/SortSearch/TheSelectionSort.rst:100
msgid ""
"Q-22: Suppose you have the following list of numbers to sort: [11, 7, 12,"
" 14, 19, 1, 6, 18, 8, 20] which list represents the partially sorted list"
" after three complete passes of selection sort?"
msgstr ""

