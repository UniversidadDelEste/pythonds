# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/SortSearch/TheQuickSort.rst:6
msgid "The Quick Sort"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:8
msgid ""
"The **quick sort** uses divide and conquer to gain the same advantages as"
" the merge sort, while not using additional storage. As a trade-off, "
"however, it is possible that the list may not be divided in half. When "
"this happens, we will see that performance is diminished."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:13
msgid ""
"A quick sort first selects a value, which is called the **pivot value**. "
"Although there are many different ways to choose the pivot value, we will"
" simply use the first item in the list. The role of the pivot value is to"
" assist with splitting the list. The actual position where the pivot "
"value belongs in the final sorted list, commonly called the **split "
"point**, will be used to divide the list for subsequent calls to the "
"quick sort."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:21
msgid ""
":ref:`Figure 12 <fig_splitvalue>` shows that 54 will serve as our first "
"pivot value. Since we have looked at this example a few times already, we"
" know that 54 will eventually end up in the position currently holding "
"31. The **partition** process will happen next. It will find the split "
"point and at the same time move other items to the appropriate side of "
"the list, either less than or greater than the pivot value."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:34
msgid ".. image:: SortSearch/Figures/firstsplit.png"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:34
msgid "Figure 12: The First Pivot Value for a Quick Sort"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:40
msgid ""
"Partitioning begins by locating two position markers—let’s call them "
"``leftmark`` and ``rightmark``—at the beginning and end of the remaining "
"items in the list (positions 1 and 8 in :ref:`Figure 13 "
"<fig_partitionA>`). The goal of the partition process is to move items "
"that are on the wrong side with respect to the pivot value while also "
"converging on the split point. :ref:`Figure 13 <fig_partitionA>` shows "
"this process as we locate the position of 54."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:53
msgid ".. image:: SortSearch/Figures/partitionA.png"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:53
msgid "Figure 13: Finding the Split Point for 54"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:55
msgid ""
"We begin by incrementing ``leftmark`` until we locate a value that is "
"greater than the pivot value. We then decrement ``rightmark`` until we "
"find a value that is less than the pivot value. At this point we have "
"discovered two items that are out of place with respect to the eventual "
"split point. For our example, this occurs at 93 and 20. Now we can "
"exchange these two items and then repeat the process again."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:62
msgid ""
"At the point where ``rightmark`` becomes less than ``leftmark``, we stop."
" The position of ``rightmark`` is now the split point. The pivot value "
"can be exchanged with the contents of the split point and the pivot value"
" is now in place (:ref:`Figure 14 <fig_partitionB>`). In addition, all "
"the items to the left of the split point are less than the pivot value, "
"and all the items to the right of the split point are greater than the "
"pivot value. The list can now be divided at the split point and the quick"
" sort can be invoked recursively on the two halves."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:76
msgid ".. image:: SortSearch/Figures/partitionB.png"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:76
msgid "Figure 14: Completing the Partition Process to Find the Split Point for 54"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:79
msgid ""
"The ``quickSort`` function shown in :ref:`ActiveCode 1 <lst_quick>` "
"invokes a recursive function, ``quickSortHelper``. ``quickSortHelper`` "
"begins with the same base case as the merge sort. If the length of the "
"list is less than or equal to one, it is already sorted. If it is "
"greater, then it can be partitioned and recursively sorted. The "
"``partition`` function implements the process described earlier."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:136
msgid "data-caption='Quick Sort'"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:136
msgid ""
"def quickSort(alist):\n"
"   quickSortHelper(alist,0,len(alist)-1)\n"
"\n"
"def quickSortHelper(alist,first,last):\n"
"   if first<last:\n"
"\n"
"       splitpoint = partition(alist,first,last)\n"
"\n"
"       quickSortHelper(alist,first,splitpoint-1)\n"
"       quickSortHelper(alist,splitpoint+1,last)\n"
"\n"
"\n"
"def partition(alist,first,last):\n"
"   pivotvalue = alist[first]\n"
"\n"
"   leftmark = first+1\n"
"   rightmark = last\n"
"\n"
"   done = False\n"
"   while not done:\n"
"\n"
"       while leftmark <= rightmark and alist[leftmark] <= pivotvalue:\n"
"           leftmark = leftmark + 1\n"
"\n"
"       while alist[rightmark] >= pivotvalue and rightmark >= leftmark:\n"
"           rightmark = rightmark -1\n"
"\n"
"       if rightmark < leftmark:\n"
"           done = True\n"
"       else:\n"
"           temp = alist[leftmark]\n"
"           alist[leftmark] = alist[rightmark]\n"
"           alist[rightmark] = temp\n"
"\n"
"   temp = alist[first]\n"
"   alist[first] = alist[rightmark]\n"
"   alist[rightmark] = temp\n"
"\n"
"\n"
"   return rightmark\n"
"\n"
"alist = [54,26,93,17,77,31,44,55,20]\n"
"quickSort(alist)\n"
"print(alist)"
msgstr ""

msgid ""
"<script type=\"text/javascript\" "
"src=\"../_static/sortmodels.js\"></script>\n"
"<script type=\"text/javascript\" "
"src=\"../_static/sortviewers.js\"></script>\n"
"\n"
"<div id=\"quick_anim\">\n"
"<canvas id=\"quick_anim_canvas\" width=\"400\" height=\"400\" "
"style=\"border:4px solid blue\"></canvas>\n"
"<br />\n"
"<button onclick=\"quick_anim_anim = "
"quick_anim_init('quick_anim')\">Initialize</button>\n"
"<button onclick=\"quick_anim_anim.run('quick_anim_anim')\">Run</button>\n"
"<button onclick=\"quick_anim_anim.stop()\">Stop</button> </br>\n"
"<button onclick=\"quick_anim_anim.begin()\">Beginning</button>\n"
"<button onclick=\"quick_anim_anim.forward()\">Step Forward</button>\n"
"<button onclick=\"quick_anim_anim.backward()\">Step Backward</button>\n"
"<button onclick=\"quick_anim_anim.end()\">End</button>\n"
"\n"
"<script type=\"text/javascript\">\n"
"quick_anim_init = function(divid)\n"
"{\n"
"   var a = new Animator(new QuickSortModel(), new BarViewer(), divid)\n"
"   a.init()\n"
"   return a\n"
"}\n"
"</script>\n"
"\n"
"</div>\n"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:196
msgid ""
"To analyze the ``quickSort`` function, note that for a list of length "
"*n*, if the partition always occurs in the middle of the list, there will"
" again be :math:`\\log n` divisions. In order to find the split point, "
"each of the *n* items needs to be checked against the pivot value. The "
"result is :math:`n\\log n`. In addition, there is no need for additional "
"memory as in the merge sort process."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:203
msgid ""
"Unfortunately, in the worst case, the split points may not be in the "
"middle and can be very skewed to the left or the right, leaving a very "
"uneven division. In this case, sorting a list of *n* items divides into "
"sorting a list of 0 items and a list of :math:`n-1` items. Then sorting a"
" list of :math:`n-1` divides into a list of size 0 and a list of size "
":math:`n-2`, and so on. The result is an :math:`O(n^{2})` sort with all "
"of the overhead that recursion requires."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:211
msgid ""
"We mentioned earlier that there are different ways to choose the pivot "
"value. In particular, we can attempt to alleviate some of the potential "
"for an uneven division by using a technique called **median of three**. "
"To choose the pivot value, we will consider the first, the middle, and "
"the last element in the list. In our example, those are 54, 77, and 20. "
"Now pick the median value, in our case 54, and use it for the pivot value"
" (of course, that was the pivot value we used originally). The idea is "
"that in the case where the the first item in the list does not belong "
"toward the middle of the list, the median of three will choose a better "
"“middle” value. This will be particularly useful when the original list "
"is somewhat sorted to begin with. We leave the implementation of this "
"pivot value selection as an exercise."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:224
msgid "Self Check"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:238
msgid "[9, 3, 10, 13, 12]"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:238
msgid "[9, 3, 10, 13, 12, 14]"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:238
msgid "[9, 3, 10, 13, 12, 14, 17, 16, 15, 19]"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:238
msgid "[9, 3, 10, 13, 12, 14, 19, 16, 15, 17]"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:238
msgid ""
"It's important to remember that quicksort works on the entire list and "
"sorts it in place."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:238
msgid "Remember quicksort works on the entire list and sorts it in place."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:238
msgid ""
"The first partitioning works on the entire list, and the second "
"partitioning works on the left partition not the right."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:238
msgid ""
"The first partitioning works on the entire list, and the second "
"partitioning works on the left partition."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:237
msgid ""
"Q-19: Given the following list of numbers [14, 17, 13, 15, 19, 10, 3, 16,"
" 9, 12] which answer shows the contents of the list after the second "
"partitioning according to the quicksort algorithm?"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:253
msgid "1"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:253
msgid "9"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:253
msgid "16"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:253
msgid "19"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:253
msgid ""
"The three numbers used in selecting the pivot are 1, 9, 19.  1 is not the"
" median, and would be a very bad choice for the pivot since it is the "
"smallest number in the list."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:253
msgid "Good job."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:253
msgid ""
"although 16 would be the median of 1, 16, 19 the middle is at len(list) "
"// 2."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:253
msgid ""
"the three numbers used in selecting the pivot are 1, 9, 19.  9 is the "
"median.  19 would be a bad choice since it is almost the largest."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:250
msgid ""
"Q-20: Given the following list of numbers [1, 20, 11, 5, 2, 9, 16, 14, "
"13, 19] what would be the first pivot value using the median of 3 method?"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:266
msgid "Shell Sort"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:266
msgid "Quick Sort"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:266
msgid "Merge Sort"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:266
msgid "Insertion Sort"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:266
msgid "Shell sort is about ``n^1.5``"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:266
msgid ""
"Quick sort can be O(n log n), but if the pivot points are not well chosen"
" and the list is just so, it can be O(n^2)."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:266
msgid ""
"Merge Sort is the only guaranteed O(n log n) even in the worst case.  The"
" cost is that merge sort uses more memory."
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:266
msgid "Insertion sort is ``O(n^2)``"
msgstr ""

#: ../../_sources/SortSearch/TheQuickSort.rst:266
msgid ""
"Q-21: Which of the following sort algorithms are guaranteed to be O(n log"
" n) even in the worst case?"
msgstr ""

