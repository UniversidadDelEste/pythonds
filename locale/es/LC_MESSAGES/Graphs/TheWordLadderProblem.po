# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Graphs/TheWordLadderProblem.rst:6
msgid "The Word Ladder Problem"
msgstr ""

#: ../../_sources/Graphs/TheWordLadderProblem.rst:8
msgid ""
"To begin our study of graph algorithms let’s consider the following "
"puzzle called a word ladder. Transform the word “FOOL” into the word "
"“SAGE”. In a word ladder puzzle you must make the change occur gradually "
"by changing one letter at a time. At each step you must transform one "
"word into another word, you are not allowed to transform a word into a "
"non-word. The word ladder puzzle was invented in 1878 by Lewis Carroll, "
"the author of *Alice in Wonderland*. The following sequence of words "
"shows one possible solution to the problem posed above."
msgstr ""

#: ../../_sources/Graphs/TheWordLadderProblem.rst:19
msgid ""
"FOOL\n"
"POOL\n"
"POLL\n"
"POLE\n"
"PALE\n"
"SALE\n"
"SAGE"
msgstr ""

#: ../../_sources/Graphs/TheWordLadderProblem.rst:27
msgid ""
"There are many variations of the word ladder puzzle. For example you "
"might be given a particular number of steps in which to accomplish the "
"transformation, or you might need to use a particular word. In this "
"section we are interested in figuring out the smallest number of "
"transformations needed to turn the starting word into the ending word."
msgstr ""

#: ../../_sources/Graphs/TheWordLadderProblem.rst:33
msgid ""
"Not surprisingly, since this chapter is on graphs, we can solve this "
"problem using a graph algorithm. Here is an outline of where we are "
"going:"
msgstr ""

#: ../../_sources/Graphs/TheWordLadderProblem.rst:37
msgid "Represent the relationships between the words as a graph."
msgstr ""

#: ../../_sources/Graphs/TheWordLadderProblem.rst:39
msgid ""
"Use the graph algorithm known as breadth first search to find an "
"efficient path from the starting word to the ending word."
msgstr ""

