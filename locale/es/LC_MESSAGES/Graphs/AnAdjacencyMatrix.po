# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Graphs/AnAdjacencyMatrix.rst:6
msgid "An Adjacency Matrix"
msgstr ""

#: ../../_sources/Graphs/AnAdjacencyMatrix.rst:8
msgid ""
"One of the easiest ways to implement a graph is to use a two-dimensional "
"matrix. In this matrix implementation, each of the rows and columns "
"represent a vertex in the graph. The value that is stored in the cell at "
"the intersection of row :math:`v` and column :math:`w` indicates if there"
" is an edge from vertex :math:`v` to vertex :math:`w`. When two vertices "
"are connected by an edge, we say that they are **adjacent**. :ref:`Figure"
" 3 <fig_adjmat>` illustrates the adjacency matrix for the graph in "
":ref:`Figure 2 <fig_dgsimple>`. A value in a cell represents the weight "
"of the edge from vertex :math:`v` to vertex :math:`w`."
msgstr ""

#: ../../_sources/Graphs/AnAdjacencyMatrix.rst:23
msgid ".. image:: Graphs/Figures/adjMat.png"
msgstr ""

#: ../../_sources/Graphs/AnAdjacencyMatrix.rst:23
msgid "Figure 3: An Adjacency Matrix Representation for a Graph"
msgstr ""

#: ../../_sources/Graphs/AnAdjacencyMatrix.rst:25
msgid ""
"The advantage of the adjacency matrix is that it is simple, and for small"
" graphs it is easy to see which nodes are connected to other nodes. "
"However, notice that most of the cells in the matrix are empty. Because "
"most of the cells are empty we say that this matrix is “sparse.” A matrix"
" is not a very efficient way to store sparse data. In fact, in Python you"
" must go out of your way to even create a matrix structure like the one "
"in :ref:`Figure 3 <fig_adjmat>`."
msgstr ""

#: ../../_sources/Graphs/AnAdjacencyMatrix.rst:33
msgid ""
"The adjacency matrix is a good implementation for a graph when the number"
" of edges is large. But what do we mean by large? How many edges would be"
" needed to fill the matrix? Since there is one row and one column for "
"every vertex in the graph, the number of edges required to fill the "
"matrix is :math:`|V|^2`. A matrix is full when every vertex is connected "
"to every other vertex. There are few real problems that approach this "
"sort of connectivity. The problems we will look at in this chapter all "
"involve graphs that are sparsely connected."
msgstr ""

