# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:6
msgid "Implementing Breadth First Search"
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:8
msgid ""
"With the graph constructed we can now turn our attention to the algorithm"
" we will use to find the shortest solution to the word ladder problem. "
"The graph algorithm we are going to use is called the “breadth first "
"search” algorithm. **Breadth first search** (**BFS**) is one of the "
"easiest algorithms for searching a graph. It also serves as a prototype "
"for several other important graph algorithms that we will study later."
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:16
msgid ""
"Given a graph :math:`G` and a starting vertex :math:`s`, a breadth first "
"search proceeds by exploring edges in the graph to find all the vertices "
"in :math:`G` for which there is a path from :math:`s`. The remarkable "
"thing about a breadth first search is that it finds *all* the vertices "
"that are a distance :math:`k` from :math:`s` before it finds *any* "
"vertices that are a distance :math:`k+1`. One good way to visualize what "
"the breadth first search algorithm does is to imagine that it is building"
" a tree, one level of the tree at a time. A breadth first search adds all"
" children of the starting vertex before it begins to discover any of the "
"grandchildren."
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:27
msgid ""
"To keep track of its progress, BFS colors each of the vertices white, "
"gray, or black. All the vertices are initialized to white when they are "
"constructed. A white vertex is an undiscovered vertex. When a vertex is "
"initially discovered it is colored gray, and when BFS has completely "
"explored a vertex it is colored black. This means that once a vertex is "
"colored black, it has no white vertices adjacent to it. A gray node, on "
"the other hand, may have some white vertices adjacent to it, indicating "
"that there are still additional vertices to explore."
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:36
msgid ""
"The breadth first search algorithm shown in :ref:`Listing 2 "
"<lst_wordbucket2>` below uses the adjacency list graph representation we "
"developed earlier. In addition it uses a ``Queue``, a crucial point as we"
" will see, to decide which vertex to explore next."
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:40
msgid ""
"In addition the BFS algorithm uses an extended version of the ``Vertex`` "
"class. This new vertex class adds three new instance variables: distance,"
" predecessor, and color. Each of these instance variables also has the "
"appropriate getter and setter methods. The code for this expanded Vertex "
"class is included in the ``pythonds`` package, but we will not show it to"
" you here as there is nothing new to learn by seeing the additional "
"instance variables."
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:48
msgid ""
"BFS begins at the starting vertex ``s`` and colors ``start`` gray to show"
" that it is currently being explored. Two other values, the distance and "
"the predecessor, are initialized to 0 and ``None`` respectively for the "
"starting vertex. Finally, ``start`` is placed on a ``Queue``. The next "
"step is to begin to systematically explore vertices at the front of the "
"queue. We explore each new node at the front of the queue by iterating "
"over its adjacency list. As each node on the adjacency list is examined "
"its color is checked. If it is white, the vertex is unexplored, and four "
"things happen:"
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:58
msgid "The new, unexplored vertex ``nbr``, is colored gray."
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:60
msgid "The predecessor of ``nbr`` is set to the current node ``currentVert``"
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:62
msgid "The distance to ``nbr`` is set to the distance to ``currentVert + 1``"
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:64
msgid ""
"``nbr`` is added to the end of a queue. Adding ``nbr`` to the end of the "
"queue effectively schedules this node for further exploration, but not "
"until all the other vertices on the adjacency list of ``currentVert`` "
"have been explored."
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:72
msgid "**Listing 2**"
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:76
msgid ""
"from pythonds.graphs import Graph, Vertex\n"
"from pythonds.basic import Queue\n"
"\n"
"def bfs(g,start):\n"
"  start.setDistance(0)\n"
"  start.setPred(None)\n"
"  vertQueue = Queue()\n"
"  vertQueue.enqueue(start)\n"
"  while (vertQueue.size() > 0):\n"
"    currentVert = vertQueue.dequeue()\n"
"    for nbr in currentVert.getConnections():\n"
"      if (nbr.getColor() == 'white'):\n"
"        nbr.setColor('gray')\n"
"        nbr.setDistance(currentVert.getDistance() + 1)\n"
"        nbr.setPred(currentVert)\n"
"        vertQueue.enqueue(nbr)\n"
"    currentVert.setColor('black')"
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:94
msgid ""
"Let’s look at how the ``bfs`` function would construct the breadth first "
"tree corresponding to the graph in :ref:`Figure 1 <fig_wordladder>`. "
"Starting from fool we take all nodes that are adjacent to fool and add "
"them to the tree. The adjacent nodes include pool, foil, foul, and cool. "
"Each of these nodes are added to the queue of new nodes to expand. "
":ref:`Figure 3 <fig_bfs1>` shows the state of the in-progress tree along "
"with the queue after this step."
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:107
msgid ".. image:: Graphs/Figures/bfs1.png"
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:107
msgid "Figure 3: The First Step in the Breadth First Search"
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:109
msgid ""
"In the next step ``bfs`` removes the next node (pool) from the front of "
"the queue and repeats the process for all of its adjacent nodes. However,"
" when ``bfs`` examines the node cool, it finds that the color of cool has"
" already been changed to gray. This indicates that there is a shorter "
"path to cool and that cool is already on the queue for further expansion."
" The only new node added to the queue while examining pool is poll. The "
"new state of the tree and queue is shown in :ref:`Figure 4 <fig_bfs2>`."
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:122
msgid ".. image:: Graphs/Figures/bfs2.png"
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:122
msgid "Figure 4: The Second Step in the Breadth First Search"
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:126
msgid ""
"The next vertex on the queue is foil. The only new node that foil can add"
" to the tree is fail. As ``bfs`` continues to process the queue, neither "
"of the next two nodes add anything new to the queue or the tree. "
":ref:`Figure 5 <fig_bfs3>` shows the tree and the queue after expanding "
"all the vertices on the second level of the tree."
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:138
msgid ".. image:: Graphs/Figures/bfs3.png"
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:138
msgid "Figure 5: Breadth First Search Tree After Completing One Level"
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:146
msgid ".. image:: Graphs/Figures/bfsDone.png"
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:146
msgid "FIgure 6: Final Breadth First Search Tree"
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:149
msgid ""
"You should continue to work through the algorithm on your own so that you"
" are comfortable with how it works. :ref:`Figure 6 <fig_bfsDone>` shows "
"the final breadth first search tree after all the vertices in "
":ref:`Figure 3 <fig_wordladder>` have been expanded. The amazing thing "
"about the breadth first search solution is that we have not only solved "
"the FOOL–SAGE problem we started out with, but we have solved many other "
"problems along the way. We can start at any vertex in the breadth first "
"search tree and follow the predecessor arrows back to the root to find "
"the shortest word ladder from any word back to fool. The function below "
"(:ref:`Listing 3 <lst_wordbucket3>`) shows how to follow the predecessor "
"links to print out the word ladder."
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:162
msgid "**Listing 3**"
msgstr ""

#: ../../_sources/Graphs/ImplementingBreadthFirstSearch.rst:166
msgid ""
"def traverse(y):\n"
"    x = y\n"
"    while (x.getPred()):\n"
"        print(x.getId())\n"
"        x = x.getPred()\n"
"    print(x.getId())\n"
"\n"
"traverse(g.getVertex('sage'))"
msgstr ""

