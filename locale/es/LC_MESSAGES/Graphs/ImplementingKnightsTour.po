# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:6
msgid "Implementing Knight’s Tour"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:8
msgid ""
"The search algorithm we will use to solve the knight’s tour problem is "
"called **depth first search** (**DFS**).  Whereas the breadth first "
"search algorithm discussed in the previous section builds a search tree "
"one level at a time, a depth first search creates a search tree by "
"exploring one branch of the tree as deeply as possible. In this section "
"we will look at two algorithms that implement a depth first search. The "
"first algorithm we will look at directly solves the knight’s tour problem"
" by explicitly forbidding a node to be visited more than once. The second"
" implementation is more general, but allows nodes to be visited more than"
" once as the tree is constructed. The second version is used in "
"subsequent sections to develop additional graph algorithms."
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:20
msgid ""
"The depth first exploration of the graph is exactly what we need in order"
" to find a path that has exactly 63 edges. We will see that when the "
"depth first search algorithm finds a dead end (a place in the graph where"
" there are no more moves possible) it backs up the tree to the next "
"deepest vertex that allows it to make a legal move."
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:26
msgid ""
"The ``knightTour`` function takes four parameters: ``n``, the current "
"depth in the search tree; ``path``, a list of vertices visited up to this"
" point; ``u``, the vertex in the graph we wish to explore; and ``limit`` "
"the number of nodes in the path. The ``knightTour`` function is "
"recursive. When the ``knightTour`` function is called, it first checks "
"the base case condition. If we have a path that contains 64 vertices, we "
"return from ``knightTour`` with a status of ``True``, indicating that we "
"have found a successful tour. If the path is not long enough we continue "
"to explore one level deeper by choosing a new vertex to explore and "
"calling ``knightTour`` recursively for that vertex."
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:37
msgid ""
"DFS also uses colors to keep track of which vertices in the graph have "
"been visited. Unvisited vertices are colored white, and visited vertices "
"are colored gray. If all neighbors of a particular vertex have been "
"explored and we have not yet reached our goal length of 64 vertices, we "
"have reached a dead end. When we reach a dead end we must backtrack. "
"Backtracking happens when we return from ``knightTour`` with a status of "
"``False``. In the breadth first search we used a queue to keep track of "
"which vertex to visit next. Since depth first search is recursive, we are"
" implicitly using a stack to help us with our backtracking. When we "
"return from a call to ``knightTour`` with a status of ``False``, in line "
"11, we remain inside the ``while`` loop and look at the next vertex in "
"``nbrList``."
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:50
msgid "**Listing 3**"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:54
msgid ""
"from pythonds.graphs import Graph, Vertex\n"
"def knightTour(n,path,u,limit):\n"
"        u.setColor('gray')\n"
"        path.append(u)\n"
"        if n < limit:\n"
"            nbrList = list(u.getConnections())\n"
"            i = 0\n"
"            done = False\n"
"            while i < len(nbrList) and not done:\n"
"                if nbrList[i].getColor() == 'white':\n"
"                    done = knightTour(n+1, path, nbrList[i], limit)\n"
"                i = i + 1\n"
"            if not done:  # prepare to backtrack\n"
"                path.pop()\n"
"                u.setColor('white')\n"
"        else:\n"
"            done = True\n"
"        return done"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:74
msgid ""
"Let's look at a simple example of ``knightTour`` in action. You can refer"
" to the figures below to follow the steps of the search. For this example"
" we will assume that the call to the ``getConnections`` method on line 6 "
"orders the nodes in alphabetical order. We begin by calling "
"``knightTour(0,path,A,6)``"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:80
msgid ""
"``knightTour`` starts with node A :ref:`Figure 3 <fig_kta>`. The nodes "
"adjacent to A are B and D. Since B is before D alphabetically, DFS "
"selects B to expand next as shown in :ref:`Figure 4 <fig_ktb>`. Exploring"
" B happens when ``knightTour`` is called recursively. B is adjacent to C "
"and D, so ``knightTour`` elects to explore C next. However, as you can "
"see in :ref:`Figure 5 <fig_ktc>` node C is a dead end with no adjacent "
"white nodes. At this point we change the color of node C back to white. "
"The call to ``knightTour`` returns a value of ``False``. The return from "
"the recursive call effectively backtracks the search to vertex B (see "
":ref:`Figure 6 <fig_ktd>`). The next vertex on the list to explore is "
"vertex D, so ``knightTour`` makes a recursive call moving to node D (see "
":ref:`Figure 7 <fig_kte>`). From vertex D on, ``knightTour`` can continue"
" to make recursive calls until we get to node C again (see :ref:`Figure 8"
" <fig_ktf>`, :ref:`Figure 9 <fig_ktg>`, and  :ref:`Figure 10 <fig_kth>`)."
"  However, this time when we get to node C the test ``n < limit`` fails "
"so we know that we have exhausted all the nodes in the graph. At this "
"point we can return ``True`` to indicate that we have made a successful "
"tour of the graph. When we return the list, ``path`` has the values "
"``[A,B,D,E,F,C]``, which is the the order we need to traverse the graph "
"to visit each node exactly once."
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:106
msgid ".. image:: Graphs/Figures/ktdfsa.png"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:106
msgid "Figure 3: Start with node A"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:115
msgid ".. image:: Graphs/Figures/ktdfsb.png"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:115
msgid "Figure 4: Explore B"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:124
msgid ".. image:: Graphs/Figures/ktdfsc.png"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:124
msgid "Figure 5: Node C is a dead end"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:133
msgid ".. image:: Graphs/Figures/ktdfsd.png"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:133
msgid "Figure 6: Backtrack to B"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:142
msgid ".. image:: Graphs/Figures/ktdfse.png"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:142
msgid "Figure 7: Explore D"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:150
msgid ".. image:: Graphs/Figures/ktdfsf.png"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:150
msgid "Figure 8: Explore E"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:157
msgid ".. image:: Graphs/Figures/ktdfsg.png"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:157
msgid "Figure 9: Explore F"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:165
msgid ".. image:: Graphs/Figures/ktdfsh.png"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:165
msgid "Figure 10: Finish"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:169
msgid ""
":ref:`Figure 11 <fig_tour>` shows you what a complete tour around an "
"eight-by-eight board looks like. There are many possible tours; some are "
"symmetric. With some modification you can make circular tours that start "
"and end at the same square."
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:179
msgid ".. image:: Graphs/Figures/completeTour.png"
msgstr ""

#: ../../_sources/Graphs/ImplementingKnightsTour.rst:179
msgid "Figure 11: A Complete Tour of the Board"
msgstr ""

