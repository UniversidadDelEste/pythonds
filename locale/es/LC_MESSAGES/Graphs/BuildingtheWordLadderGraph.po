# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Graphs/BuildingtheWordLadderGraph.rst:6
msgid "Building the Word Ladder Graph"
msgstr ""

#: ../../_sources/Graphs/BuildingtheWordLadderGraph.rst:8
msgid ""
"Our first problem is to figure out how to turn a large collection of "
"words into a graph. What we would like is to have an edge from one word "
"to another if the two words are only different by a single letter. If we "
"can create such a graph, then any path from one word to another is a "
"solution to the word ladder puzzle. :ref:`Figure 1 <fig_wordladder>` "
"shows a small graph of some words that solve the FOOL to SAGE word ladder"
" problem. Notice that the graph is an undirected graph and that the edges"
" are unweighted."
msgstr ""

#: ../../_sources/Graphs/BuildingtheWordLadderGraph.rst:22
msgid ".. image:: Graphs/Figures/wordgraph.png"
msgstr ""

#: ../../_sources/Graphs/BuildingtheWordLadderGraph.rst:22
msgid "Figure 1: A Small Word Ladder Graph"
msgstr ""

#: ../../_sources/Graphs/BuildingtheWordLadderGraph.rst:24
msgid ""
"We could use several different approaches to create the graph we need to "
"solve this problem. Let’s start with the assumption that we have a list "
"of words that are all the same length. As a starting point, we can create"
" a vertex in the graph for every word in the list. To figure out how to "
"connect the words, we could compare each word in the list with every "
"other. When we compare we are looking to see how many letters are "
"different. If the two words in question are different by only one letter,"
" we can create an edge between them in the graph. For a small set of "
"words that approach would work fine; however let’s suppose we have a list"
" of 5,110 words. Roughly speaking, comparing one word to every other word"
" on the list is an :math:`O(n^2)` algorithm. For 5,110 words, :math:`n^2`"
" is more than 26 million comparisons."
msgstr ""

#: ../../_sources/Graphs/BuildingtheWordLadderGraph.rst:37
msgid ""
"We can do much better by using the following approach. Suppose that we "
"have a huge number of buckets, each of them with a four-letter word on "
"the outside, except that one of the letters in the label has been "
"replaced by an underscore. For example, consider :ref:`Figure 2 "
"<fig_wordbucket>`, we might have a bucket labeled “pop\\_.” As we process"
" each word in our list we compare the word with each bucket, using the "
"‘\\_’ as a wildcard, so both “pope” and “pops” would match “pop\\_.” "
"Every time we find a matching bucket, we put our word in that bucket. "
"Once we have all the words in the appropriate buckets we know that all "
"the words in the bucket must be connected."
msgstr ""

#: ../../_sources/Graphs/BuildingtheWordLadderGraph.rst:53
msgid ".. image:: Graphs/Figures/wordbuckets.png"
msgstr ""

#: ../../_sources/Graphs/BuildingtheWordLadderGraph.rst:53
msgid "Figure 2: Word Buckets for Words That are Different by One Letter"
msgstr ""

#: ../../_sources/Graphs/BuildingtheWordLadderGraph.rst:56
msgid ""
"In Python, we can implement the scheme we have just described by using a "
"dictionary. The labels on the buckets we have just described are the keys"
" in our dictionary. The value stored for that key is a list of words. "
"Once we have the dictionary built we can create the graph. We start our "
"graph by creating a vertex for each word in the graph. Then we create "
"edges between all the vertices we find for words found under the same key"
" in the dictionary. :ref:`Listing 1 <lst_wordbucket1>` shows the Python "
"code required to build the graph."
msgstr ""

#: ../../_sources/Graphs/BuildingtheWordLadderGraph.rst:67
msgid "**Listing 1**"
msgstr ""

#: ../../_sources/Graphs/BuildingtheWordLadderGraph.rst:71
msgid ""
"from pythonds.graphs import Graph\n"
"\n"
"def buildGraph(wordFile):\n"
"    d = {}\n"
"    g = Graph()\n"
"    wfile = open(wordFile,'r')\n"
"    # create buckets of words that differ by one letter\n"
"    for line in wfile:\n"
"        word = line[:-1]\n"
"        for i in range(len(word)):\n"
"            bucket = word[:i] + '_' + word[i+1:]\n"
"            if bucket in d:\n"
"                d[bucket].append(word)\n"
"            else:\n"
"                d[bucket] = [word]\n"
"    # add vertices and edges for words in the same bucket\n"
"    for bucket in d.keys():\n"
"        for word1 in d[bucket]:\n"
"            for word2 in d[bucket]:\n"
"                if word1 != word2:\n"
"                    g.addEdge(word1,word2)\n"
"    return g"
msgstr ""

#: ../../_sources/Graphs/BuildingtheWordLadderGraph.rst:94
#, python-format
msgid ""
"Since this is our first real-world graph problem, you might be wondering "
"how sparse is the graph? The list of four-letter words we have for this "
"problem is 5,110 words long. If we were to use an adjacency matrix, the "
"matrix would have 5,110 \\* 5,110 = 26,112,100 cells. The graph "
"constructed by the ``buildGraph`` function has exactly 53,286 edges, so "
"the matrix would have only 0.20% of the cells filled! That is a very "
"sparse matrix indeed."
msgstr ""

