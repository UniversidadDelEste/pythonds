# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Graphs/AnalysisofDijkstrasAlgorithm.rst:6
msgid "Analysis of Dijkstra’s Algorithm"
msgstr ""

#: ../../_sources/Graphs/AnalysisofDijkstrasAlgorithm.rst:9
msgid ""
"Finally, let us look at the running time of Dijkstra’s algorithm. We "
"first note that building the priority queue takes :math:`O(V)` time since"
" we initially add every vertex in the graph to the priority queue. Once "
"the queue is constructed the ``while`` loop is executed once for every "
"vertex since vertices are all added at the beginning and only removed "
"after that. Within that loop each call to ``delMin``, takes "
":math:`O(\\log V)` time. Taken together that part of the loop and the "
"calls to delMin take :math:`O(V \\log(V))`. The ``for`` loop is executed "
"once for each edge in the graph, and within the ``for`` loop the call to "
"``decreaseKey`` takes time :math:`O(E\\log(V)).` So the combined running "
"time is :math:`O((V+E) \\log(V)).`"
msgstr ""

