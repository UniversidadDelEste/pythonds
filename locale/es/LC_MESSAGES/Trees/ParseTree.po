# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving
# with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures "
"3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Trees/ParseTree.rst:6
msgid "Parse Tree"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:8
msgid ""
"With the implementation of our tree data structure complete, we now look "
"at an example of how a tree can be used to solve some real problems. In "
"this section we will look at parse trees. Parse trees can be used to "
"represent real-world constructions like sentences or mathematical "
"expressions."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:19
msgid ""
".. image:: Trees/Figures/nlParse.png\n"
"   :alt: image"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:19
msgid "Figure 1: A Parse Tree for a Simple Sentence"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:21
msgid ""
":ref:`Figure 1 <fig_nlparse>` shows the hierarchical structure of a "
"simple sentence. Representing a sentence as a tree structure allows us to"
" work with the individual parts of the sentence by using subtrees."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:31
msgid ""
".. image:: Trees/Figures/meParse.png\n"
"   :alt: image"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:31
msgid "Figure 2: Parse Tree for :math:`((7+3)*(5-2))`"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:33
msgid ""
"We can also represent a mathematical expression such as :math:`((7 + 3) *"
" (5 - 2))` as a parse tree, as shown in :ref:`Figure 2 <fig_meparse>`. We"
" have already looked at fully parenthesized expressions, so what do we "
"know about this expression? We know that multiplication has a higher "
"precedence than either addition or subtraction. Because of the "
"parentheses, we know that before we can do the multiplication we must "
"evaluate the parenthesized addition and subtraction expressions. The "
"hierarchy of the tree helps us understand the order of evaluation for the"
" whole expression. Before we can evaluate the top-level multiplication, "
"we must evaluate the addition and the subtraction in the subtrees. The "
"addition, which is the left subtree, evaluates to 10. The subtraction, "
"which is the right subtree, evaluates to 3. Using the hierarchical "
"structure of trees, we can simply replace an entire subtree with one node"
" once we have evaluated the expressions in the children. Applying this "
"replacement procedure gives us the simplified tree shown in :ref:`Figure "
"3 <fig_mesimple>`."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:56
msgid ""
".. image:: Trees/Figures/meSimple.png\n"
"   :alt: image"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:56
msgid "Figure 3: A Simplified Parse Tree for :math:`((7+3)*(5-2))`"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:58
msgid ""
"In the rest of this section we are going to examine parse trees in more "
"detail. In particular we will look at"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:61
msgid ""
"How to build a parse tree from a fully parenthesized mathematical "
"expression."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:64
msgid "How to evaluate the expression stored in a parse tree."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:66
msgid "How to recover the original mathematical expression from a parse tree."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:69
msgid ""
"The first step in building a parse tree is to break up the expression "
"string into a list of tokens. There are four different kinds of tokens to"
" consider: left parentheses, right parentheses, operators, and operands. "
"We know that whenever we read a left parenthesis we are starting a new "
"expression, and hence we should create a new tree to correspond to that "
"expression. Conversely, whenever we read a right parenthesis, we have "
"finished an expression. We also know that operands are going to be leaf "
"nodes and children of their operators. Finally, we know that every "
"operator is going to have both a left and a right child."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:79
msgid "Using the information from above we can define four rules as follows:"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:81
msgid ""
"If the current token is a ``'('``, add a new node as the left child of "
"the current node, and descend to the left child."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:84
msgid ""
"If the current token is in the list ``['+','-','/','*']``, set the root "
"value of the current node to the operator represented by the current "
"token. Add a new node as the right child of the current node and descend "
"to the right child."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:89
msgid ""
"If the current token is a number, set the root value of the current node "
"to the number and return to the parent."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:92
msgid "If the current token is a ``')'``, go to the parent of the current node."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:95
msgid ""
"Before writing the Python code, let’s look at an example of the rules "
"outlined above in action. We will use the expression :math:`(3 + (4 * "
"5))`. We will parse this expression into the following list of character "
"tokens ``['(', '3', '+',`` ``'(', '4', '*', '5' ,')',')']``. Initially we"
" will start out with a parse tree that consists of an empty root node. "
":ref:`Figure 4 <fig_bldExpstep>` illustrates the structure and contents "
"of the parse tree, as each new token is processed."
msgstr ""

msgid ""
".. image:: Trees/Figures/buildExp1.png\n"
"   :alt: image"
msgstr ""

msgid ""
".. image:: Trees/Figures/buildExp2.png\n"
"   :alt: image"
msgstr ""

msgid ""
".. image:: Trees/Figures/buildExp3.png\n"
"   :alt: image"
msgstr ""

msgid ""
".. image:: Trees/Figures/buildExp4.png\n"
"   :alt: image"
msgstr ""

msgid ""
".. image:: Trees/Figures/buildExp5.png\n"
"   :alt: image"
msgstr ""

msgid ""
".. image:: Trees/Figures/buildExp6.png\n"
"   :alt: image"
msgstr ""

msgid ""
".. image:: Trees/Figures/buildExp7.png\n"
"   :alt: image"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:149
msgid ""
".. image:: Trees/Figures/buildExp8.png\n"
"   :alt: image"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:149
msgid "Figure 4: Tracing Parse Tree Construction"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:151
msgid ""
"Using :ref:`Figure 4 <fig_bldExpstep>`, let’s walk through the example "
"step by step:"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:154
msgid "Create an empty tree."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:156
msgid ""
"Read ( as the first token. By rule 1, create a new node as the left child"
" of the root. Make the current node this new child."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:159
msgid ""
"Read 3 as the next token. By rule 3, set the root value of the current "
"node to 3 and go back up the tree to the parent."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:162
msgid ""
"Read + as the next token. By rule 2, set the root value of the current "
"node to + and add a new node as the right child. The new right child "
"becomes the current node."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:166
msgid ""
"Read a ( as the next token. By rule 1, create a new node as the left "
"child of the current node. The new left child becomes the current node."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:170
msgid ""
"Read a 4 as the next token. By rule 3, set the value of the current node "
"to 4. Make the parent of 4 the current node."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:173
msgid ""
"Read \\* as the next token. By rule 2, set the root value of the current "
"node to \\* and create a new right child. The new right child becomes the"
" current node."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:177
msgid ""
"Read 5 as the next token. By rule 3, set the root value of the current "
"node to 5. Make the parent of 5 the current node."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:180
msgid ""
"Read ) as the next token. By rule 4 we make the parent of \\* the current"
" node."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:183
msgid ""
"Read ) as the next token. By rule 4 we make the parent of + the current "
"node. At this point there is no parent for + so we are done."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:186
msgid ""
"From the example above, it is clear that we need to keep track of the "
"current node as well as the parent of the current node. The tree "
"interface provides us with a way to get children of a node, through the "
"``getLeftChild`` and ``getRightChild`` methods, but how can we keep track"
" of the parent? A simple solution to keeping track of parents as we "
"traverse the tree is to use a stack. Whenever we want to descend to a "
"child of the current node, we first push the current node on the stack. "
"When we want to return to the parent of the current node, we pop the "
"parent off the stack."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:196
msgid ""
"Using the rules described above, along with the ``Stack`` and "
"``BinaryTree`` operations, we are now ready to write a Python function to"
" create a parse tree. The code for our parse tree builder is presented in"
" :ref:`ActiveCode 1 <lst_buildparse>`."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:241
msgid "data-caption='Building a Parse Tree'"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:241
msgid ""
"from pythonds.basic.stack import Stack\n"
"from pythonds.trees.binaryTree import BinaryTree\n"
"\n"
"def buildParseTree(fpexp):\n"
"    fplist = fpexp.split()\n"
"    pStack = Stack()\n"
"    eTree = BinaryTree('')\n"
"    pStack.push(eTree)\n"
"    currentTree = eTree\n"
"    for i in fplist:\n"
"        if i == '(':\n"
"            currentTree.insertLeft('')\n"
"            pStack.push(currentTree)\n"
"            currentTree = currentTree.getLeftChild()\n"
"        elif i not in ['+', '-', '*', '/', ')']:\n"
"            currentTree.setRootVal(int(i))\n"
"            parent = pStack.pop()\n"
"            currentTree = parent\n"
"        elif i in ['+', '-', '*', '/']:\n"
"            currentTree.setRootVal(i)\n"
"            currentTree.insertRight('')\n"
"            pStack.push(currentTree)\n"
"            currentTree = currentTree.getRightChild()\n"
"        elif i == ')':\n"
"            currentTree = pStack.pop()\n"
"        else:\n"
"            raise ValueError\n"
"    return eTree\n"
"\n"
"pt = buildParseTree(\"( ( 10 + 5 ) * 3 )\")\n"
"pt.postorder()  #defined and explained in the next section"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:242
msgid ""
"The four rules for building a parse tree are coded as the first four "
"clauses of the ``if`` statement on lines 11, 15, 19, and 24 of "
":ref:`ActiveCode 1 <lst_buildparse>`. In each case you can see that the "
"code implements the rule, as described above, with a few calls to the "
"``BinaryTree`` or ``Stack`` methods. The only error checking we do in "
"this function is in the ``else`` clause where we raise a ``ValueError`` "
"exception if we get a token from the list that we do not recognize."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:251
msgid ""
"Now that we have built a parse tree, what can we do with it? As a first "
"example, we will write a function to evaluate the parse tree, returning "
"the numerical result. To write this function, we will make use of the "
"hierarchical nature of the tree. Look back at :ref:`Figure 2 "
"<fig_meparse>`. Recall that we can replace the original tree with the "
"simplified tree shown in :ref:`Figure 3 <fig_mesimple>`. This suggests "
"that we can write an algorithm that evaluates a parse tree by recursively"
" evaluating each subtree."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:260
msgid ""
"As we have done with past recursive algorithms, we will begin the design "
"for the recursive evaluation function by identifying the base case. A "
"natural base case for recursive algorithms that operate on trees is to "
"check for a leaf node. In a parse tree, the leaf nodes will always be "
"operands. Since numerical objects like integers and floating points "
"require no further interpretation, the ``evaluate`` function can simply "
"return the value stored in the leaf node. The recursive step that moves "
"the function toward the base case is to call ``evaluate`` on both the "
"left and the right children of the current node. The recursive call "
"effectively moves us down the tree, toward a leaf node."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:271
msgid ""
"To put the results of the two recursive calls together, we can simply "
"apply the operator stored in the parent node to the results returned from"
" evaluating both children. In the example from :ref:`Figure 3 "
"<fig_mesimple>` we see that the two children of the root evaluate to "
"themselves, namely 10 and 3. Applying the multiplication operator gives "
"us a final result of 30."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:278
msgid ""
"The code for a recursive ``evaluate`` function is shown in :ref:`Listing "
"1 <lst_eval>`. First, we obtain references to the left and the right "
"children of the current node. If both the left and right children "
"evaluate to ``None``, then we know that the current node is really a leaf"
" node. This check is on line 7. If the current node is not a leaf node, "
"look up the operator in the current node and apply it to the results from"
" recursively evaluating the left and right children."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:286
msgid ""
"To implement the arithmetic, we use a dictionary with the keys ``'+', "
"'-', '*'``, and ``'/'``. The values stored in the dictionary are "
"functions from Python’s operator module. The operator module provides us "
"with the functional versions of many commonly used operators. When we "
"look up an operator in the dictionary, the corresponding function object "
"is retrieved. Since the retrieved object is a function, we can call it in"
" the usual way ``function(param1,param2)``. So the lookup "
"``opers['+'](2,2)`` is equivalent to ``operator.add(2,2)``."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:297
msgid "**Listing 1**"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:299
msgid ""
"def evaluate(parseTree):\n"
"    opers = {'+':operator.add, '-':operator.sub, '*':operator.mul, "
"'/':operator.truediv}\n"
"\n"
"    leftC = parseTree.getLeftChild()\n"
"    rightC = parseTree.getRightChild()\n"
"\n"
"    if leftC and rightC:\n"
"        fn = opers[parseTree.getRootVal()]\n"
"        return fn(evaluate(leftC),evaluate(rightC))\n"
"    else:\n"
"        return parseTree.getRootVal()"
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:317
msgid ""
"Finally, we will trace the ``evaluate`` function on the parse tree we "
"created in :ref:`Figure 4 <fig_bldExpstep>`. When we first call "
"``evaluate``, we pass the root of the entire tree as the parameter "
"``parseTree``. Then we obtain references to the left and right children "
"to make sure they exist. The recursive call takes place on line 9. We "
"begin by looking up the operator in the root of the tree, which is "
"``'+'``. The ``'+'`` operator maps to the ``operator.add`` function call,"
" which takes two parameters. As usual for a Python function call, the "
"first thing Python does is to evaluate the parameters that are passed to "
"the function. In this case both parameters are recursive function calls "
"to our ``evaluate`` function. Using left-to-right evaluation, the first "
"recursive call goes to the left. In the first recursive call the "
"``evaluate`` function is given the left subtree. We find that the node "
"has no left or right children, so we are in a leaf node. When we are in a"
" leaf node we just return the value stored in the leaf node as the result"
" of the evaluation. In this case we return the integer 3."
msgstr ""

#: ../../_sources/Trees/ParseTree.rst:334
msgid ""
"At this point we have one parameter evaluated for our top-level call to "
"``operator.add``. But we are not done yet. Continuing the left-to-right "
"evaluation of the parameters, we now make a recursive call to evaluate "
"the right child of the root. We find that the node has both a left and a "
"right child so we look up the operator stored in this node, ``'*'``, and "
"call this function using the left and right children as the parameters. "
"At this point you can see that both recursive calls will be to leaf "
"nodes, which will evaluate to the integers four and five respectively. "
"With the two parameters evaluated, we return the result of "
"``operator.mul(4,5)``. At this point we have evaluated the operands for "
"the top level ``'+'`` operator and all that is left to do is finish the "
"call to ``operator.add(3,20)``. The result of the evaluation of the "
"entire expression tree for :math:`(3 + (4 * 5))` is 23."
msgstr ""

