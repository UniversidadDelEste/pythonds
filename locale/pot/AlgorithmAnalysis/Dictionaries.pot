# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:6
msgid "Dictionaries"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:10
msgid "The second major Python data structure is the dictionary. As you probably recall, dictionaries differ from lists in that you can access items in a dictionary by a key rather than a position. Later in this book you will see that there are many ways to implement a dictionary. The thing that is most important to notice right now is that the get item and set item operations on a dictionary are :math:`O(1)`. Another important dictionary operation is the contains operation. Checking to see whether a key is in the dictionary or not is also :math:`O(1)`. The efficiency of all dictionary operations is summarized in :ref:`Table 3 <tbl_dictbigo>`. One important side note on dictionary performance is that the efficiencies we provide in the table are for average performance. In some rare cases the contains, get item, and set item operations can degenerate into :math:`O(n)` performance but we will get into that in a later chapter when we talk about the different ways that a dictionary could be implemented."
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:28
msgid "**Table 3: Big-O Efficiency of Python Dictionary Operations**"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:31
msgid "operation"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:31
msgid "Big-O Efficiency"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:33
msgid "copy"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:33
#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:38
msgid "O(n)"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:34
msgid "get item"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:34
#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:35
#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:36
#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:37
msgid "O(1)"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:35
msgid "set item"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:36
msgid "delete item"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:37
msgid "contains (in)"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:38
msgid "iteration"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:43
msgid "For our last performance experiment we will compare the performance of the contains operation between lists and dictionaries. In the process we will confirm that the contains operator for lists is :math:`O(n)` and the contains operator for dictionaries is :math:`O(1)`. The experiment we will use to compare the two is simple. Weâ€™ll make a list with a range of numbers in it. Then we will pick numbers at random and check to see if the numbers are in the list. If our performance tables are correct the bigger the list the longer it should take to determine if any one number is contained in the list."
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:53
msgid "We will repeat the same experiment for a dictionary that contains numbers as the keys. In this experiment we should see that determining whether or not a number is in the dictionary is not only much faster, but the time it takes to check should remain constant even as the dictionary grows larger."
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:59
msgid ":ref:`Listing 6 <lst_listvdict>` implements this comparison. Notice that we are performing exactly the same operation, ``number in container``. The difference is that on line 7 ``x`` is a list, and on line 9 ``x`` is a dictionary."
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:66
msgid "**Listing 6**"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:69
msgid "import timeit\n"
"import random\n"
"\n"
"for i in range(10000,1000001,20000):\n"
"    t = timeit.Timer(\"random.randrange(%d) in x\"%i,\n"
"                     \"from __main__ import random,x\")\n"
"    x = list(range(i))\n"
"    lst_time = t.timeit(number=1000)\n"
"    x = {j:None for j in range(i)}\n"
"    d_time = t.timeit(number=1000)\n"
"    print(\"%d,%10.3f,%10.3f\" % (i, lst_time, d_time))"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:87
msgid ":ref:`Figure 4 <fig_listvdict>` summarizes the results of running :ref:`Listing 6 <lst_listvdict>`. You can see that the dictionary is consistently faster. For the smallest list size of 10,000 elements a dictionary is 89.4 times faster than a list. For the largest list size of 990,000 elements the dictionary is 11,603 times faster! You can also see that the time it takes for the contains operator on the list grows linearly with the size of the list. This verifies the assertion that the contains operator on a list is :math:`O(n)`. It can also be seen that the time for the contains operator on a dictionary is constant even as the dictionary size grows. In fact for a dictionary size of 10,000 the contains operation took 0.004 milliseconds and for the dictionary size of 990,000 it also took 0.004 milliseconds."
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:104
msgid ".. image:: AlgorithmAnalysis/Figures/listvdict.png"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:104
msgid "Figure 4: Comparing the ``in`` Operator for Python Lists and Dictionaries"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:106
msgid "Since Python is an evolving language, there are always changes going on behind the scenes. The latest information on the performance of Python data structures can be found on the Python website. As of this writing the Python wiki has a nice time complexity page that can be found at the `Time Complexity Wiki <http://wiki.python.org/moin/TimeComplexity>`_."
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:114
msgid "Self Check"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:130
msgid "list.pop(0)"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:130
msgid "list.pop()"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:130
msgid "list.append()"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:130
msgid "list[10]"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:130
#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:144
msgid "all of the above are O(1)"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:130
msgid "When you remove the first element of a list, all the other elements of the list must be shifted forward."
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:130
msgid "Removing an element from the end of the list is a constant operation."
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:130
msgid "Appending to the end of the list is a constant operation"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:130
msgid "Indexing a list is a constant operation"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:130
msgid "There is one operation that requires all other list elements to be moved."
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:129
msgid "Q-4: Which of the list operations shown below is not O(1)?"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:144
msgid "'x' in mydict"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:144
msgid "del mydict['x']"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:144
msgid "mydict['x'] == 10"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:144
msgid "mydict['x'] = mydict['x'] + 1"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:144
msgid "in is a constant operation for a dictionary because you do not have to iterate but there is a better answer."
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:144
msgid "deleting an element from a dictionary is a constant operation but there is a better answer."
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:144
msgid "Assignment to a dictionary key is constant but there is a better answer."
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:144
msgid "Re-assignment to a dictionary key is constant but there is a better answer."
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:144
msgid "The only dictionary operations that are not O(1) are those that require iteration."
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:144
msgid "Q-5: Which of the dictionary operations shown below is O(1)?"
msgstr ""

#: ../../_sources/AlgorithmAnalysis/Dictionaries.rst:None
msgid "<div id=\"pythonopsperf\" class=\"video_popup\" >\n"
"<video controls preload=\"none\"  poster=\"../_static/function_intro.png\">\n"
"    <source src=\"http://media.interactivepython.org/pythondsVideos/pythonops.mov\" type=\"video/mp4\"></source>\n"
"    <source src=\"http://media.interactivepython.org/pythondsVideos/pythonops.webm\" type=\"video/webm\"></source>\n"
"    No supported video types\n"
"</video>\n"
"</div>\n"
"<script>\n"
"   jQuery(function($) {\n"
"      var rb = new RunestoneBase();\n"
"      $('#pythonopsperf_thumb').click(function(e) {\n"
"         $('#pythonopsperf').show();\n"
"         $('#pythonopsperf_thumb').hide();\n"
"         rb.logBookEvent({'event':'video','act':'play','div_id': 'pythonopsperf'});\n"
"         // Log the run event\n"
"      });\n"
"      $('#pythonopsperf video').one(\"click\", function(){\n"
"        this.play();\n"
"      });\n"
"      $('#pythonopsperf video').one(\"play\", function(){\n"
"        rb.logBookEvent({'event':'video','act':'play','div_id': 'pythonopsperf'});\n"
"      });\n"
"   });\n"
"</script>\n"
""
msgstr ""

