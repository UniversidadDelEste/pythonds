# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Graphs/AnAdjacencyList.rst:6
msgid "An Adjacency List"
msgstr ""

#: ../../_sources/Graphs/AnAdjacencyList.rst:8
msgid "A more space-efficient way to implement a sparsely connected graph is to use an adjacency list. In an adjacency list implementation we keep a master list of all the vertices in the Graph object and then each vertex object in the graph maintains a list of the other vertices that it is connected to. In our implementation of the ``Vertex`` class we will use a dictionary rather than a list where the dictionary keys are the vertices, and the values are the weights. :ref:`Figure 4 <fig_adjlist>` illustrates the adjacency list representation for the graph in :ref:`Figure 2 <fig_dgsimple>`."
msgstr ""

#: ../../_sources/Graphs/AnAdjacencyList.rst:23
msgid ".. image:: Graphs/Figures/adjlist.png"
msgstr ""

#: ../../_sources/Graphs/AnAdjacencyList.rst:23
msgid "Figure 4: An Adjacency List Representation of a Graph"
msgstr ""

#: ../../_sources/Graphs/AnAdjacencyList.rst:25
msgid "The advantage of the adjacency list implementation is that it allows us to compactly represent a sparse graph. The adjacency list also allows us to easily find all the links that are directly connected to a particular vertex."
msgstr ""

