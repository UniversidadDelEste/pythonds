# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Graphs/Implementation.rst:6
msgid "Implementation"
msgstr ""

#: ../../_sources/Graphs/Implementation.rst:8
msgid "Using dictionaries, it is easy to implement the adjacency list in Python. In our implementation of the Graph abstract data type we will create two classes (see :ref:`Listing 1 <lst_vertex>` and :ref:`Listing 2 <lst_graph>`), ``Graph``, which holds the master list of vertices, and ``Vertex``, which will represent each vertex in the graph."
msgstr ""

#: ../../_sources/Graphs/Implementation.rst:13
msgid "Each ``Vertex`` uses a dictionary to keep track of the vertices to which it is connected, and the weight of each edge. This dictionary is called ``connectedTo``. The listing below shows the code for the ``Vertex`` class. The constructor simply initializes the ``id``, which will typically be a string, and the ``connectedTo`` dictionary. The ``addNeighbor`` method is used add a connection from this vertex to another. The ``getConnections`` method returns all of the vertices in the adjacency list, as represented by the ``connectedTo`` instance variable. The ``getWeight`` method returns the weight of the edge from this vertex to the vertex passed as a parameter."
msgstr ""

#: ../../_sources/Graphs/Implementation.rst:26
msgid "**Listing 1**"
msgstr ""

#: ../../_sources/Graphs/Implementation.rst:30
msgid "class Vertex:\n"
"    def __init__(self,key):\n"
"        self.id = key\n"
"        self.connectedTo = {}\n"
"\n"
"    def addNeighbor(self,nbr,weight=0):\n"
"        self.connectedTo[nbr] = weight\n"
"\n"
"    def __str__(self):\n"
"        return str(self.id) + ' connectedTo: ' + str([x.id for x in self.connectedTo])\n"
"\n"
"    def getConnections(self):\n"
"        return self.connectedTo.keys()\n"
"\n"
"    def getId(self):\n"
"        return self.id\n"
"\n"
"    def getWeight(self,nbr):\n"
"        return self.connectedTo[nbr]"
msgstr ""

#: ../../_sources/Graphs/Implementation.rst:50
msgid "The ``Graph`` class, shown in the next listing, contains a dictionary that maps vertex names to vertex objects. In :ref:`Figure 4 <fig_adjlist>` this dictionary object is represented by the shaded gray box. ``Graph`` also provides methods for adding vertices to a graph and connecting one vertex to another. The ``getVertices`` method returns the names of all of the vertices in the graph. In addition, we have implemented the ``__iter__`` method to make it easy to iterate over all the vertex objects in a particular graph. Together, the two methods allow you to iterate over the vertices in a graph by name, or by the objects themselves."
msgstr ""

#: ../../_sources/Graphs/Implementation.rst:63
msgid "**Listing 2**"
msgstr ""

#: ../../_sources/Graphs/Implementation.rst:67
msgid "class Graph:\n"
"    def __init__(self):\n"
"        self.vertList = {}\n"
"        self.numVertices = 0\n"
"\n"
"    def addVertex(self,key):\n"
"        self.numVertices = self.numVertices + 1\n"
"        newVertex = Vertex(key)\n"
"        self.vertList[key] = newVertex\n"
"        return newVertex\n"
"\n"
"    def getVertex(self,n):\n"
"        if n in self.vertList:\n"
"            return self.vertList[n]\n"
"        else:\n"
"            return None\n"
"\n"
"    def __contains__(self,n):\n"
"        return n in self.vertList\n"
"\n"
"    def addEdge(self,f,t,cost=0):\n"
"        if f not in self.vertList:\n"
"            nv = self.addVertex(f)\n"
"        if t not in self.vertList:\n"
"            nv = self.addVertex(t)\n"
"        self.vertList[f].addNeighbor(self.vertList[t], cost)\n"
"\n"
"    def getVertices(self):\n"
"        return self.vertList.keys()\n"
"\n"
"    def __iter__(self):\n"
"        return iter(self.vertList.values())"
msgstr ""

#: ../../_sources/Graphs/Implementation.rst:100
msgid "Using the ``Graph`` and ``Vertex`` classes just defined, the following Python session creates the graph in :ref:`Figure 2 <fig_dgsimple>`. First we create six vertices numbered 0 through 5. Then we display the vertex dictionary. Notice that for each key 0 through 5 we have created an instance of a ``Vertex``. Next, we add the edges that connect the vertices together. Finally, a nested loop verifies that each edge in the graph is properly stored. You should check the output of the edge list at the end of this session against :ref:`Figure 2 <fig_dgsimple>`."
msgstr ""

#: ../../_sources/Graphs/Implementation.rst:111
msgid ">>> g = Graph()\n"
">>> for i in range(6):\n"
"...    g.addVertex(i)\n"
">>> g.vertList\n"
"{0: <adjGraph.Vertex instance at 0x41e18>,\n"
" 1: <adjGraph.Vertex instance at 0x7f2b0>,\n"
" 2: <adjGraph.Vertex instance at 0x7f288>,\n"
" 3: <adjGraph.Vertex instance at 0x7f350>,\n"
" 4: <adjGraph.Vertex instance at 0x7f328>,\n"
" 5: <adjGraph.Vertex instance at 0x7f300>}\n"
">>> g.addEdge(0,1,5)\n"
">>> g.addEdge(0,5,2)\n"
">>> g.addEdge(1,2,4)\n"
">>> g.addEdge(2,3,9)\n"
">>> g.addEdge(3,4,7)\n"
">>> g.addEdge(3,5,3)\n"
">>> g.addEdge(4,0,1)\n"
">>> g.addEdge(5,4,8)\n"
">>> g.addEdge(5,2,1)\n"
">>> for v in g:\n"
"...    for w in v.getConnections():\n"
"...        print(\"( %s , %s )\" % (v.getId(), w.getId()))\n"
"...\n"
"( 0 , 5 )\n"
"( 0 , 1 )\n"
"( 1 , 2 )\n"
"( 2 , 3 )\n"
"( 3 , 4 )\n"
"( 3 , 5 )\n"
"( 4 , 0 )\n"
"( 5 , 4 )\n"
"( 5 , 2 )"
msgstr ""

