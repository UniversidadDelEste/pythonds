# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Graphs/BuildingtheKnightsTourGraph.rst:6
msgid "Building the Knight’s Tour Graph"
msgstr ""

#: ../../_sources/Graphs/BuildingtheKnightsTourGraph.rst:8
msgid "To represent the knight’s tour problem as a graph we will use the following two ideas: Each square on the chessboard can be represented as a node in the graph. Each legal move by the knight can be represented as an edge in the graph. :ref:`Figure 1 <fig_knightmoves>` illustrates the legal moves by a knight and the corresponding edges in a graph."
msgstr ""

#: ../../_sources/Graphs/BuildingtheKnightsTourGraph.rst:19
msgid ".. image:: Graphs/Figures/knightmoves.png"
msgstr ""

#: ../../_sources/Graphs/BuildingtheKnightsTourGraph.rst:19
msgid "Figure 1: Legal Moves for a Knight on Square 12, and the Corresponding Graph"
msgstr ""

#: ../../_sources/Graphs/BuildingtheKnightsTourGraph.rst:21
msgid "To build the full graph for an n-by-n board we can use the Python function shown in :ref:`Listing 1 <lst_knighttour1>`. The ``knightGraph`` function makes one pass over the entire board. At each square on the board the ``knightGraph`` function calls a helper, ``genLegalMoves``, to create a list of legal moves for that position on the board. All legal moves are then converted into edges in the graph. Another helper function ``posToNodeId`` converts a location on the board in terms of a row and a column into a linear vertex number similar to the vertex numbers shown in :ref:`Figure 1 <fig_knightmoves>`."
msgstr ""

#: ../../_sources/Graphs/BuildingtheKnightsTourGraph.rst:33
msgid "**Listing 1**"
msgstr ""

#: ../../_sources/Graphs/BuildingtheKnightsTourGraph.rst:37
msgid "from pythonds.graphs import Graph\n"
"\n"
"def knightGraph(bdSize):\n"
"    ktGraph = Graph()\n"
"    for row in range(bdSize):\n"
"       for col in range(bdSize):\n"
"           nodeId = posToNodeId(row,col,bdSize)\n"
"           newPositions = genLegalMoves(row,col,bdSize)\n"
"           for e in newPositions:\n"
"               nid = posToNodeId(e[0],e[1],bdSize)\n"
"               ktGraph.addEdge(nodeId,nid)\n"
"    return ktGraph\n"
"\n"
"def posToNodeId(row, column, board_size):\n"
"    return (row * board_size) + column"
msgstr ""

#: ../../_sources/Graphs/BuildingtheKnightsTourGraph.rst:53
msgid "The ``genLegalMoves`` function (:ref:`Listing 2 <lst_knighttour2>`) takes the position of the knight on the board and generates each of the eight possible moves. The ``legalCoord`` helper function (:ref:`Listing 2 <lst_knighttour2>`) makes sure that a particular move that is generated is still on the board."
msgstr ""

#: ../../_sources/Graphs/BuildingtheKnightsTourGraph.rst:60
msgid "**Listing 2**"
msgstr ""

#: ../../_sources/Graphs/BuildingtheKnightsTourGraph.rst:65
msgid "def genLegalMoves(x,y,bdSize):\n"
"    newMoves = []\n"
"    moveOffsets = [(-1,-2),(-1,2),(-2,-1),(-2,1),\n"
"                   ( 1,-2),( 1,2),( 2,-1),( 2,1)]\n"
"    for i in moveOffsets:\n"
"        newX = x + i[0]\n"
"        newY = y + i[1]\n"
"        if legalCoord(newX,bdSize) and \\\n"
"                        legalCoord(newY,bdSize):\n"
"            newMoves.append((newX,newY))\n"
"    return newMoves\n"
"\n"
"def legalCoord(x,bdSize):\n"
"    if x >= 0 and x < bdSize:\n"
"        return True\n"
"    else:\n"
"        return False"
msgstr ""

#: ../../_sources/Graphs/BuildingtheKnightsTourGraph.rst:83
msgid ":ref:`Figure 2 <fig_bigknight>` shows the complete graph of possible moves on an eight-by-eight board. There are exactly 336 edges in the graph. Notice that the vertices corresponding to the edges of the board have fewer connections (legal moves) than the vertices in the middle of the board. Once again we can see how sparse the graph is. If the graph was fully connected there would be 4,096 edges. Since there are only 336 edges, the adjacency matrix would be only 8.2 percent full."
msgstr ""

#: ../../_sources/Graphs/BuildingtheKnightsTourGraph.rst:96
msgid ".. image:: Graphs/Figures/bigknight.png"
msgstr ""

#: ../../_sources/Graphs/BuildingtheKnightsTourGraph.rst:96
msgid "Figure 2: All Legal Moves for a Knight on an :math:`8 \\times 8` Chessboard"
msgstr ""

