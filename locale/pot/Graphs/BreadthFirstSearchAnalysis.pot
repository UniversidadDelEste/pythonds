# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Graphs/BreadthFirstSearchAnalysis.rst:6
msgid "Breadth First Search Analysis"
msgstr ""

#: ../../_sources/Graphs/BreadthFirstSearchAnalysis.rst:8
msgid "Before we continue with other graph algorithms let us analyze the run time performance of the breadth first search algorithm. The first thing to observe is that the while loop is executed, at most, one time for each vertex in the graph :math:`|V|`. You can see that this is true because a vertex must be white before it can be examined and added to the queue. This gives us :math:`O(V)` for the while loop. The for loop, which is nested inside the while is executed at most once for each edge in the graph, :math:`|E|`. The reason is that every vertex is dequeued at most once and we examine an edge from node :math:`u` to node :math:`v` only when node :math:`u` is dequeued. This gives us :math:`O(E)` for the for loop. combining the two loops gives us :math:`O(V + E)`."
msgstr ""

#: ../../_sources/Graphs/BreadthFirstSearchAnalysis.rst:20
msgid "Of course doing the breadth first search is only part of the task. Following the links from the starting node to the goal node is the other part of the task. The worst case for this would be if the graph was a single long chain. In this case traversing through all of the vertices would be :math:`O(V)`. The normal case is going to be some fraction of :math:`|V|` but we would still write :math:`O(V)`."
msgstr ""

#: ../../_sources/Graphs/BreadthFirstSearchAnalysis.rst:27
msgid "Finally, at least for this problem, there is the time required to build the initial graph. We leave the analysis of the ``buildGraph`` function as an exercise for you."
msgstr ""

