# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Trees/SearchTreeImplementation.rst:6
msgid "Search Tree Implementation"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:8
msgid "A binary search tree relies on the property that keys that are less than the parent are found in the left subtree, and keys that are greater than the parent are found in the right subtree. We will call this the **bst property**. As we implement the Map interface as described above, the bst property will guide our implementation. :ref:`Figure 1 <fig_simpleBST>` illustrates this property of a binary search tree, showing the keys without any associated values. Notice that the property holds for each parent and child. All of the keys in the left subtree are less than the key in the root. All of the keys in the right subtree are greater than the root."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:25
msgid ".. image:: Trees/Figures/simpleBST.png"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:25
msgid "Figure 1: A Simple Binary Search Tree"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:28
msgid "Now that you know what a binary search tree is, we will look at how a binary search tree is constructed. The search tree in :ref:`Figure 1 <fig_simpleBST>` represents the nodes that exist after we have inserted the following keys in the order shown: :math:`70,31,93,94,14,23,73`. Since 70 was the first key inserted into the tree, it is the root. Next, 31 is less than 70, so it becomes the left child of 70. Next, 93 is greater than 70, so it becomes the right child of 70. Now we have two levels of the tree filled, so the next key is going to be the left or right child of either 31 or 93. Since 94 is greater than 70 and 93, it becomes the right child of 93. Similarly 14 is less than 70 and 31, so it becomes the left child of 31. 23 is also less than 31, so it must be in the left subtree of 31. However, it is greater than 14, so it becomes the right child of 14."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:42
msgid "To implement the binary search tree, we will use the nodes and references approach similar to the one we used to implement the linked list, and the expression tree. However, because we must be able create and work with a binary search tree that is empty, our implementation will use two classes. The first class we will call ``BinarySearchTree``, and the second class we will call ``TreeNode``. The ``BinarySearchTree`` class has a reference to the ``TreeNode`` that is the root of the binary search tree. In most cases the external methods defined in the outer class simply check to see if the tree is empty. If there are nodes in the tree, the request is just passed on to a private method defined in the ``BinarySearchTree`` class that takes the root as a parameter. In the case where the tree is empty or we want to delete the key at the root of the tree, we must take special action. The code for the ``BinarySearchTree`` class constructor along with a few other miscellaneous functions is shown in :ref:`Listing 1 <lst_bst1>`."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:60
msgid "**Listing 1**"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:64
msgid "class BinarySearchTree:\n"
"\n"
"    def __init__(self):\n"
"        self.root = None\n"
"        self.size = 0\n"
"\n"
"    def length(self):\n"
"        return self.size\n"
"\n"
"    def __len__(self):\n"
"        return self.size\n"
"\n"
"    def __iter__(self):\n"
"        return self.root.__iter__()"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:80
msgid "The ``TreeNode`` class provides many helper functions that make the work done in the ``BinarySearchTree`` class methods much easier. The constructor for a ``TreeNode``, along with these helper functions, is shown in :ref:`Listing 2 <lst_bst2>`. As you can see in the listing many of these helper functions help to classify a node according to its own position as a child, (left or right) and the kind of children the node has. The ``TreeNode`` class will also explicitly keep track of the parent as an attribute of each node. You will see why this is important when we discuss the implementation for the ``del`` operator."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:91
msgid "Another interesting aspect of the implementation of ``TreeNode`` in :ref:`Listing 2 <lst_bst2>` is that we use Pythonâ€™s optional parameters. Optional parameters make it easy for us to create a ``TreeNode`` under several different circumstances. Sometimes we will want to construct a new ``TreeNode`` that already has both a ``parent`` and a ``child``. With an existing parent and child, we can pass parent and child as parameters. At other times we will just create a ``TreeNode`` with the key value pair, and we will not pass any parameters for ``parent`` or ``child``. In this case, the default values of the optional parameters are used."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:104
msgid "**Listing 2**"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:108
msgid "class TreeNode:\n"
"   def __init__(self,key,val,left=None,right=None,\n"
"                                       parent=None):\n"
"        self.key = key\n"
"        self.payload = val\n"
"        self.leftChild = left\n"
"        self.rightChild = right\n"
"        self.parent = parent\n"
"\n"
"    def hasLeftChild(self):\n"
"        return self.leftChild\n"
"\n"
"    def hasRightChild(self):\n"
"        return self.rightChild\n"
"\n"
"    def isLeftChild(self):\n"
"        return self.parent and self.parent.leftChild == self\n"
"\n"
"    def isRightChild(self):\n"
"        return self.parent and self.parent.rightChild == self\n"
"\n"
"    def isRoot(self):\n"
"        return not self.parent\n"
"\n"
"    def isLeaf(self):\n"
"        return not (self.rightChild or self.leftChild)\n"
"\n"
"    def hasAnyChildren(self):\n"
"        return self.rightChild or self.leftChild\n"
"\n"
"    def hasBothChildren(self):\n"
"        return self.rightChild and self.leftChild\n"
"\n"
"    def replaceNodeData(self,key,value,lc,rc):\n"
"        self.key = key\n"
"        self.payload = value\n"
"        self.leftChild = lc\n"
"        self.rightChild = rc\n"
"        if self.hasLeftChild():\n"
"            self.leftChild.parent = self\n"
"        if self.hasRightChild():\n"
"            self.rightChild.parent = self"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:152
msgid "Now that we have the ``BinarySearchTree`` shell and the ``TreeNode`` it is time to write the ``put`` method that will allow us to build our binary search tree. The ``put`` method is a method of the ``BinarySearchTree`` class. This method will check to see if the tree already has a root. If there is not a root then ``put`` will create a new ``TreeNode`` and install it as the root of the tree. If a root node is already in place then ``put`` calls the private, recursive, helper function ``_put`` to search the tree according to the following algorithm:"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:162
msgid "Starting at the root of the tree, search the binary tree comparing the new key to the key in the current node. If the new key is less than the current node, search the left subtree. If the new key is greater than the current node, search the right subtree."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:167
msgid "When there is no left (or right) child to search, we have found the position in the tree where the new node should be installed."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:170
msgid "To add a node to the tree, create a new ``TreeNode`` object and insert the object at the point discovered in the previous step."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:173
msgid ":ref:`Listing 3 <lst_bst3>` shows the Python code for inserting a new node in the tree. The ``_put`` function is written recursively following the steps outlined above. Notice that when a new child is inserted into the tree, the ``currentNode`` is passed to the new tree as the parent."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:178
msgid "One important problem with our implementation of insert is that duplicate keys are not handled properly. As our tree is implemented a duplicate key will create a new node with the same key value in the right subtree of the node having the original key. The result of this is that the node with the new key will never be found during a search. A better way to handle the insertion of a duplicate key is for the value associated with the new key to replace the old value. We leave fixing this bug as an exercise for you."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:189
msgid "**Listing 3**"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:193
msgid "def put(self,key,val):\n"
"    if self.root:\n"
"        self._put(key,val,self.root)\n"
"    else:\n"
"        self.root = TreeNode(key,val)\n"
"    self.size = self.size + 1\n"
"\n"
"def _put(self,key,val,currentNode):\n"
"    if key < currentNode.key:\n"
"        if currentNode.hasLeftChild():\n"
"               self._put(key,val,currentNode.leftChild)\n"
"        else:\n"
"               currentNode.leftChild = TreeNode(key,val,parent=currentNode)\n"
"    else:\n"
"        if currentNode.hasRightChild():\n"
"               self._put(key,val,currentNode.rightChild)\n"
"        else:\n"
"               currentNode.rightChild = TreeNode(key,val,parent=currentNode)"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:213
msgid "With the ``put`` method defined, we can easily overload the ``[]`` operator for assignment by having the ``__setitem__`` method call (see :ref:`Listing 4 <lst_bst4>`) the put method. This allows us to write Python statements like ``myZipTree['Plymouth'] = 55446``, just like a Python dictionary."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:221
msgid "**Listing 4**"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:225
msgid "def __setitem__(self,k,v):\n"
"    self.put(k,v)"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:229
msgid ":ref:`Figure 2 <fig_bstput>` illustrates the process for inserting a new node into a binary search tree. The lightly shaded nodes indicate the nodes that were visited during the insertion process."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:238
msgid ".. image:: Trees/Figures/bstput.png"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:238
msgid "Figure 2: Inserting a Node with Key = 19"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:240
msgid "Self Check"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:252
msgid "<img src=\"../_static/bintree_a.png\">"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:252
msgid "<img src=\"../_static/bintree_b.png\">"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:252
msgid "<img src=\"../_static/bintree_c.png\">"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:252
msgid "Remember, starting at the root keys less than the root must be in the left subtree, while keys greater than the root go in the right subtree."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:252
msgid "good job."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:252
msgid "This looks like a binary tree that satisfies the full tree property needed for a heap."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:251
msgid "Q-27: Which of the trees shows a correct binary search tree given that the keys were inserted in the following order 5, 30, 2, 40, 25, 4."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:255
msgid "Once the tree is constructed, the next task is to implement the retrieval of a value for a given key. The ``get`` method is even easier than the ``put`` method because it simply searches the tree recursively until it gets to a non-matching leaf node or finds a matching key. When a matching key is found, the value stored in the payload of the node is returned."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:262
msgid ":ref:`Listing 5 <lst_bst5>` shows the code for ``get``, ``_get`` and ``__getitem__``. The search code in the ``_get`` method uses the same logic for choosing the left or right child as the ``_put`` method. Notice that the ``_get`` method returns a ``TreeNode`` to ``get``, this allows ``_get`` to be used as a flexible helper method for other ``BinarySearchTree`` methods that may need to make use of other data from the ``TreeNode`` besides the payload."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:270
msgid "By implementing the ``__getitem__`` method we can write a Python statement that looks just like we are accessing a dictionary, when in fact we are using a binary search tree, for example ``z = myZipTree['Fargo']``.  As you can see, all the ``__getitem__`` method does is call ``get``."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:282
msgid "**Listing 5**"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:286
msgid "def get(self,key):\n"
"    if self.root:\n"
"        res = self._get(key,self.root)\n"
"        if res:\n"
"               return res.payload\n"
"        else:\n"
"               return None\n"
"    else:\n"
"        return None\n"
"\n"
"def _get(self,key,currentNode):\n"
"    if not currentNode:\n"
"        return None\n"
"    elif currentNode.key == key:\n"
"        return currentNode\n"
"    elif key < currentNode.key:\n"
"        return self._get(key,currentNode.leftChild)\n"
"    else:\n"
"        return self._get(key,currentNode.rightChild)\n"
"\n"
"def __getitem__(self,key):\n"
"    return self.get(key)"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:309
msgid "Using ``get``, we can implement the ``in`` operation by writing a ``__contains__`` method for the ``BinarySearchTree``. The ``__contains__`` method will simply call ``get`` and return ``True`` if ``get`` returns a value, or ``False`` if it returns ``None``. The code for ``__contains__`` is shown in :ref:`Listing 6 <lst_bst6>`."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:317
msgid "**Listing 6**"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:321
msgid "def __contains__(self,key):\n"
"    if self._get(key,self.root):\n"
"        return True\n"
"    else:\n"
"        return False"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:327
msgid "Recall that ``__contains__`` overloads the ``in`` operator and allows us to write statements such as:"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:332
msgid "if 'Northfield' in myZipTree:\n"
"    print(\"oom ya ya\")"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:335
msgid "Finally, we turn our attention to the most challenging method in the binary search tree, the deletion of a key (see :ref:`Listing 7 <lst_bst7>`). The first task is to find the node to delete by searching the tree. If the tree has more than one node we search using the ``_get`` method to find the ``TreeNode`` that needs to be removed. If the tree only has a single node, that means we are removing the root of the tree, but we still must check to make sure the key of the root matches the key that is to be deleted. In either case if the key is not found the ``del`` operator raises an error."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:346
msgid "**Listing 7**"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:350
msgid "def delete(self,key):\n"
"   if self.size > 1:\n"
"      nodeToRemove = self._get(key,self.root)\n"
"      if nodeToRemove:\n"
"          self.remove(nodeToRemove)\n"
"          self.size = self.size-1\n"
"      else:\n"
"          raise KeyError('Error, key not in tree')\n"
"   elif self.size == 1 and self.root.key == key:\n"
"      self.root = None\n"
"      self.size = self.size - 1\n"
"   else:\n"
"      raise KeyError('Error, key not in tree')\n"
"\n"
"def __delitem__(self,key):\n"
"    self.delete(key)"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:367
msgid "Once weâ€™ve found the node containing the key we want to delete, there are three cases that we must consider:"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:370
msgid "The node to be deleted has no children (see :ref:`Figure 3 <fig_bstdel1>`)."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:372
msgid "The node to be deleted has only one child (see :ref:`Figure 4 <fig_bstdel2>`)."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:374
msgid "The node to be deleted has two children (see :ref:`Figure 5 <fig_bstdel3>`)."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:376
msgid "The first case is straightforward (see :ref:`Listing 8 <lst_bst8>`). If the current node has no children all we need to do is delete the node and remove the reference to this node in the parent. The code for this case is shown in here."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:383
msgid "**Listing 8**"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:388
msgid "if currentNode.isLeaf():\n"
"    if currentNode == currentNode.parent.leftChild:\n"
"        currentNode.parent.leftChild = None\n"
"    else:\n"
"        currentNode.parent.rightChild = None"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:400
msgid ".. image:: Trees/Figures/bstdel1.png"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:400
msgid "Figure 3: Deleting Node 16, a Node without Children"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:402
msgid "The second case is only slightly more complicated (see :ref:`Listing 9 <lst_bst9>`). If a node has only a single child, then we can simply promote the child to take the place of its parent. The code for this case is shown in the next listing. As you look at this code you will see that there are six cases to consider. Since the cases are symmetric with respect to either having a left or right child we will just discuss the case where the current node has a left child. The decision proceeds as follows:"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:410
msgid "If the current node is a left child then we only need to update the parent reference of the left child to point to the parent of the current node, and then update the left child reference of the parent to point to the current nodeâ€™s left child."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:415
msgid "If the current node is a right child then we only need to update the parent reference of the left child to point to the parent of the current node, and then update the right child reference of the parent to point to the current nodeâ€™s left child."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:420
msgid "If the current node has no parent, it must be the root. In this case we will just replace the ``key``, ``payload``, ``leftChild``, and ``rightChild`` data by calling the ``replaceNodeData`` method on the root."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:427
msgid "**Listing 9**"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:431
msgid "else: # this node has one child\n"
"   if currentNode.hasLeftChild():\n"
"      if currentNode.isLeftChild():\n"
"          currentNode.leftChild.parent = currentNode.parent\n"
"          currentNode.parent.leftChild = currentNode.leftChild\n"
"      elif currentNode.isRightChild():\n"
"          currentNode.leftChild.parent = currentNode.parent\n"
"          currentNode.parent.rightChild = currentNode.leftChild\n"
"      else:\n"
"          currentNode.replaceNodeData(currentNode.leftChild.key,\n"
"                             currentNode.leftChild.payload,\n"
"                             currentNode.leftChild.leftChild,\n"
"                             currentNode.leftChild.rightChild)\n"
"   else:\n"
"      if currentNode.isLeftChild():\n"
"          currentNode.rightChild.parent = currentNode.parent\n"
"          currentNode.parent.leftChild = currentNode.rightChild\n"
"      elif currentNode.isRightChild():\n"
"          currentNode.rightChild.parent = currentNode.parent\n"
"          currentNode.parent.rightChild = currentNode.rightChild\n"
"      else:\n"
"          currentNode.replaceNodeData(currentNode.rightChild.key,\n"
"                             currentNode.rightChild.payload,\n"
"                             currentNode.rightChild.leftChild,\n"
"                             currentNode.rightChild.rightChild)"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:462
msgid ".. image:: Trees/Figures/bstdel2.png"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:462
msgid "Figure 4: Deleting Node 25, a Node That Has a Single Child"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:464
msgid "The third case is the most difficult case to handle (see :ref:`Listing 10 <lst_bst10>`). If a node has two children, then it is unlikely that we can simply promote one of them to take the nodeâ€™s place. We can, however, search the tree for a node that can be used to replace the one scheduled for deletion. What we need is a node that will preserve the binary search tree relationships for both of the existing left and right subtrees. The node that will do this is the node that has the next-largest key in the tree. We call this node the **successor**, and we will look at a way to find the successor shortly. The successor is guaranteed to have no more than one child, so we know how to remove it using the two cases for deletion that we have already implemented. Once the successor has been removed, we simply put it in the tree in place of the node to be deleted."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:482
msgid ".. image:: Trees/Figures/bstdel3.png"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:482
msgid "Figure 5: Deleting Node 5, a Node with Two Children"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:484
msgid "The code to handle the third case is shown in the next listing. Notice that we make use of the helper methods ``findSuccessor`` and ``findMin`` to find the successor. To remove the successor, we make use of the method ``spliceOut``. The reason we use ``spliceOut`` is that it goes directly to the node we want to splice out and makes the right changes. We could call ``delete`` recursively, but then we would waste time re-searching for the key node."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:494
msgid "**Listing 10**"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:498
msgid "elif currentNode.hasBothChildren(): #interior\n"
"        succ = currentNode.findSuccessor()\n"
"        succ.spliceOut()\n"
"        currentNode.key = succ.key\n"
"        currentNode.payload = succ.payload"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:504
msgid "The code to find the successor is shown below (see :ref:`Listing 11 <lst_bst11>`) and as you can see is a method of the ``TreeNode`` class. This code makes use of the same properties of binary search trees that cause an inorder traversal to print out the nodes in the tree from smallest to largest. There are three cases to consider when looking for the successor:"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:510
msgid "If the node has a right child, then the successor is the smallest key in the right subtree."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:513
msgid "If the node has no right child and is the left child of its parent, then the parent is the successor."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:516
msgid "If the node is the right child of its parent, and itself has no right child, then the successor to this node is the successor of its parent, excluding this node."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:520
msgid "The first condition is the only one that matters for us when deleting a node from a binary search tree. However, the ``findSuccessor`` method has other uses that we will explore in the exercises at the end of this chapter."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:525
msgid "The ``findMin`` method is called to find the minimum key in a subtree. You should convince yourself that the minimum valued key in any binary search tree is the leftmost child of the tree. Therefore the ``findMin`` method simply follows the ``leftChild`` references in each node of the subtree until it reaches a node that does not have a left child."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:533
msgid "**Listing 11**"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:538
msgid "def findSuccessor(self):\n"
"    succ = None\n"
"    if self.hasRightChild():\n"
"        succ = self.rightChild.findMin()\n"
"    else:\n"
"        if self.parent:\n"
"               if self.isLeftChild():\n"
"                   succ = self.parent\n"
"               else:\n"
"                   self.parent.rightChild = None\n"
"                   succ = self.parent.findSuccessor()\n"
"                   self.parent.rightChild = self\n"
"    return succ\n"
"\n"
"def findMin(self):\n"
"    current = self\n"
"    while current.hasLeftChild():\n"
"        current = current.leftChild\n"
"    return current\n"
"\n"
"def spliceOut(self):\n"
"    if self.isLeaf():\n"
"        if self.isLeftChild():\n"
"               self.parent.leftChild = None\n"
"        else:\n"
"               self.parent.rightChild = None\n"
"    elif self.hasAnyChildren():\n"
"        if self.hasLeftChild():\n"
"               if self.isLeftChild():\n"
"                  self.parent.leftChild = self.leftChild\n"
"               else:\n"
"                  self.parent.rightChild = self.leftChild\n"
"               self.leftChild.parent = self.parent\n"
"        else:\n"
"               if self.isLeftChild():\n"
"                  self.parent.leftChild = self.rightChild\n"
"               else:\n"
"                  self.parent.rightChild = self.rightChild\n"
"               self.rightChild.parent = self.parent"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:582
msgid "We need to look at one last interface method for the binary search tree. Suppose that we would like to simply iterate over all the keys in the tree in order. This is definitely something we have done with dictionaries, so why not trees? You already know how to traverse a binary tree in order, using the ``inorder`` traversal algorithm. However, writing an iterator requires a bit more work, since an iterator should return only one node each time the iterator is called."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:590
msgid "Python provides us with a very powerful function to use when creating an iterator. The function is called ``yield``. ``yield`` is similar to ``return`` in that it returns a value to the caller. However, ``yield`` also takes the additional step of freezing the state of the function so that the next time the function is called it continues executing from the exact point it left off earlier. Functions that create objects that can be iterated are called generator functions."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:598
msgid "The code for an ``inorder`` iterator of a binary tree is shown in the next listing. Look at this code carefully; at first glance you might think that the code is not recursive. However, remember that ``__iter__`` overrides the ``for x in`` operation for iteration, so it really is recursive! Because it is recursive over ``TreeNode`` instances the ``__iter__`` method is defined in the ``TreeNode`` class."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:607
msgid "def __iter__(self):\n"
"   if self:\n"
"      if self.hasLeftChild():\n"
"             for elem in self.leftChiLd:\n"
"                yield elem\n"
"      yield self.key\n"
"      if self.hasRightChild():\n"
"             for elem in self.rightChild:\n"
"                yield elem"
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:617
msgid "At this point you may want to download the entire file containing the full version of the ``BinarySearchTree`` and ``TreeNode`` classes."
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:836
msgid ""
msgstr ""

#: ../../_sources/Trees/SearchTreeImplementation.rst:836
msgid "class TreeNode:\n"
"    def __init__(self,key,val,left=None,right=None,parent=None):\n"
"        self.key = key\n"
"        self.payload = val\n"
"        self.leftChild = left\n"
"        self.rightChild = right\n"
"        self.parent = parent\n"
"\n"
"    def hasLeftChild(self):\n"
"        return self.leftChild\n"
"\n"
"    def hasRightChild(self):\n"
"        return self.rightChild\n"
"\n"
"    def isLeftChild(self):\n"
"        return self.parent and self.parent.leftChild == self\n"
"\n"
"    def isRightChild(self):\n"
"        return self.parent and self.parent.rightChild == self\n"
"\n"
"    def isRoot(self):\n"
"        return not self.parent\n"
"\n"
"    def isLeaf(self):\n"
"        return not (self.rightChild or self.leftChild)\n"
"\n"
"    def hasAnyChildren(self):\n"
"        return self.rightChild or self.leftChild\n"
"\n"
"    def hasBothChildren(self):\n"
"        return self.rightChild and self.leftChild\n"
"\n"
"    def replaceNodeData(self,key,value,lc,rc):\n"
"        self.key = key\n"
"        self.payload = value\n"
"        self.leftChild = lc\n"
"        self.rightChild = rc\n"
"        if self.hasLeftChild():\n"
"            self.leftChild.parent = self\n"
"        if self.hasRightChild():\n"
"            self.rightChild.parent = self\n"
"\n"
"\n"
"class BinarySearchTree:\n"
"\n"
"    def __init__(self):\n"
"        self.root = None\n"
"        self.size = 0\n"
"\n"
"    def length(self):\n"
"        return self.size\n"
"\n"
"    def __len__(self):\n"
"        return self.size\n"
"\n"
"    def put(self,key,val):\n"
"        if self.root:\n"
"            self._put(key,val,self.root)\n"
"        else:\n"
"            self.root = TreeNode(key,val)\n"
"        self.size = self.size + 1\n"
"\n"
"    def _put(self,key,val,currentNode):\n"
"        if key < currentNode.key:\n"
"            if currentNode.hasLeftChild():\n"
"                   self._put(key,val,currentNode.leftChild)\n"
"            else:\n"
"                   currentNode.leftChild = TreeNode(key,val,parent=currentNode)\n"
"        else:\n"
"            if currentNode.hasRightChild():\n"
"                   self._put(key,val,currentNode.rightChild)\n"
"            else:\n"
"                   currentNode.rightChild = TreeNode(key,val,parent=currentNode)\n"
"\n"
"    def __setitem__(self,k,v):\n"
"       self.put(k,v)\n"
"\n"
"    def get(self,key):\n"
"       if self.root:\n"
"           res = self._get(key,self.root)\n"
"           if res:\n"
"                  return res.payload\n"
"           else:\n"
"                  return None\n"
"       else:\n"
"           return None\n"
"\n"
"    def _get(self,key,currentNode):\n"
"       if not currentNode:\n"
"           return None\n"
"       elif currentNode.key == key:\n"
"           return currentNode\n"
"       elif key < currentNode.key:\n"
"           return self._get(key,currentNode.leftChild)\n"
"       else:\n"
"           return self._get(key,currentNode.rightChild)\n"
"\n"
"    def __getitem__(self,key):\n"
"       return self.get(key)\n"
"\n"
"    def __contains__(self,key):\n"
"       if self._get(key,self.root):\n"
"           return True\n"
"       else:\n"
"           return False\n"
"\n"
"    def delete(self,key):\n"
"      if self.size > 1:\n"
"         nodeToRemove = self._get(key,self.root)\n"
"         if nodeToRemove:\n"
"             self.remove(nodeToRemove)\n"
"             self.size = self.size-1\n"
"         else:\n"
"             raise KeyError('Error, key not in tree')\n"
"      elif self.size == 1 and self.root.key == key:\n"
"         self.root = None\n"
"         self.size = self.size - 1\n"
"      else:\n"
"         raise KeyError('Error, key not in tree')\n"
"\n"
"    def __delitem__(self,key):\n"
"       self.delete(key)\n"
"\n"
"    def spliceOut(self):\n"
"       if self.isLeaf():\n"
"           if self.isLeftChild():\n"
"                  self.parent.leftChild = None\n"
"           else:\n"
"                  self.parent.rightChild = None\n"
"       elif self.hasAnyChildren():\n"
"           if self.hasLeftChild():\n"
"                  if self.isLeftChild():\n"
"                     self.parent.leftChild = self.leftChild\n"
"                  else:\n"
"                     self.parent.rightChild = self.leftChild\n"
"                  self.leftChild.parent = self.parent\n"
"           else:\n"
"                  if self.isLeftChild():\n"
"                     self.parent.leftChild = self.rightChild\n"
"                  else:\n"
"                     self.parent.rightChild = self.rightChild\n"
"                  self.rightChild.parent = self.parent\n"
"\n"
"    def findSuccessor(self):\n"
"      succ = None\n"
"      if self.hasRightChild():\n"
"          succ = self.rightChild.findMin()\n"
"      else:\n"
"          if self.parent:\n"
"                 if self.isLeftChild():\n"
"                     succ = self.parent\n"
"                 else:\n"
"                     self.parent.rightChild = None\n"
"                     succ = self.parent.findSuccessor()\n"
"                     self.parent.rightChild = self\n"
"      return succ\n"
"\n"
"    def findMin(self):\n"
"      current = self\n"
"      while current.hasLeftChild():\n"
"          current = current.leftChild\n"
"      return current\n"
"\n"
"    def remove(self,currentNode):\n"
"         if currentNode.isLeaf(): #leaf\n"
"           if currentNode == currentNode.parent.leftChild:\n"
"               currentNode.parent.leftChild = None\n"
"           else:\n"
"               currentNode.parent.rightChild = None\n"
"         elif currentNode.hasBothChildren(): #interior\n"
"           succ = currentNode.findSuccessor()\n"
"           succ.spliceOut()\n"
"           currentNode.key = succ.key\n"
"           currentNode.payload = succ.payload\n"
"\n"
"         else: # this node has one child\n"
"           if currentNode.hasLeftChild():\n"
"             if currentNode.isLeftChild():\n"
"                 currentNode.leftChild.parent = currentNode.parent\n"
"                 currentNode.parent.leftChild = currentNode.leftChild\n"
"             elif currentNode.isRightChild():\n"
"                 currentNode.leftChild.parent = currentNode.parent\n"
"                 currentNode.parent.rightChild = currentNode.leftChild\n"
"             else:\n"
"                 currentNode.replaceNodeData(currentNode.leftChild.key,\n"
"                                    currentNode.leftChild.payload,\n"
"                                    currentNode.leftChild.leftChild,\n"
"                                    currentNode.leftChild.rightChild)\n"
"           else:\n"
"             if currentNode.isLeftChild():\n"
"                 currentNode.rightChild.parent = currentNode.parent\n"
"                 currentNode.parent.leftChild = currentNode.rightChild\n"
"             elif currentNode.isRightChild():\n"
"                 currentNode.rightChild.parent = currentNode.parent\n"
"                 currentNode.parent.rightChild = currentNode.rightChild\n"
"             else:\n"
"                 currentNode.replaceNodeData(currentNode.rightChild.key,\n"
"                                    currentNode.rightChild.payload,\n"
"                                    currentNode.rightChild.leftChild,\n"
"                                    currentNode.rightChild.rightChild)\n"
"\n"
"\n"
"\n"
"\n"
"mytree = BinarySearchTree()\n"
"mytree[3]=\"red\"\n"
"mytree[4]=\"blue\"\n"
"mytree[6]=\"yellow\"\n"
"mytree[2]=\"at\"\n"
"\n"
"print(mytree[6])\n"
"print(mytree[2])"
msgstr ""

