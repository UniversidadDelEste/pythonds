# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Trees/TreeTraversals.rst:6
msgid "Tree Traversals"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:8
msgid "Now that we have examined the basic functionality of our tree data structure, it is time to look at some additional usage patterns for trees. These usage patterns can be divided into the three ways that we access the nodes of the tree. There are three commonly used patterns to visit all the nodes in a tree. The difference between these patterns is the order in which each node is visited. We call this visitation of the nodes a “traversal.” The three traversals we will look at are called **preorder**, **inorder**, and **postorder**. Let’s start out by defining these three traversals more carefully, then look at some examples where these patterns are useful."
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:22
msgid "preorder"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:20
msgid "In a preorder traversal, we visit the root node first, then recursively do a preorder traversal of the left subtree, followed by a recursive preorder traversal of the right subtree."
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:27
msgid "inorder"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:25
msgid "In an inorder traversal, we recursively do an inorder traversal on the left subtree, visit the root node, and finally do a recursive inorder traversal of the right subtree."
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:32
msgid "postorder"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:30
msgid "In a postorder traversal, we recursively do a postorder traversal of the left subtree and the right subtree followed by a visit to the root node."
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:34
msgid "Let’s look at some examples that illustrate each of these three kinds of traversals. First let’s look at the preorder traversal. As an example of a tree to traverse, we will represent this book as a tree. The book is the root of the tree, and each chapter is a child of the root. Each section within a chapter is a child of the chapter, and each subsection is a child of its section, and so on. :ref:`Figure 5 <fig_booktree>` shows a limited version of a book with only two chapters. Note that the traversal algorithm works for trees with any number of children, but we will stick with binary trees for now."
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:50
msgid ".. image:: Trees/Figures/booktree.png\n"
"   :alt: image"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:50
msgid "Figure 5: Representing a Book as a Tree"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:52
msgid "Suppose that you wanted to read this book from front to back. The preorder traversal gives you exactly that ordering. Starting at the root of the tree (the Book node) we will follow the preorder traversal instructions. We recursively call ``preorder`` on the left child, in this case Chapter1. We again recursively call ``preorder`` on the left child to get to Section 1.1. Since Section 1.1 has no children, we do not make any additional recursive calls. When we are finished with Section 1.1, we move up the tree to Chapter 1. At this point we still need to visit the right subtree of Chapter 1, which is Section 1.2. As before we visit the left subtree, which brings us to Section 1.2.1, then we visit the node for Section 1.2.2. With Section 1.2 finished, we return to Chapter 1. Then we return to the Book node and follow the same procedure for Chapter 2."
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:66
msgid "The code for writing tree traversals is surprisingly elegant, largely because the traversals are written recursively. :ref:`Listing 2 <lst_preorder1>` shows the Python code for a preorder traversal of a binary tree."
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:70
msgid "You may wonder, what is the best way to write an algorithm like preorder traversal? Should it be a function that simply uses a tree as a data structure, or should it be a method of the tree data structure itself? :ref:`Listing 2 <lst_preorder1>` shows a version of the preorder traversal written as an external function that takes a binary tree as a parameter. The external function is particularly elegant because our base case is simply to check if the tree exists. If the tree parameter is ``None``, then the function returns without taking any action."
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:82
msgid "**Listing 2**"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:86
msgid "def preorder(tree):\n"
"    if tree:\n"
"        print(tree.getRootVal())\n"
"        preorder(tree.getLeftChild())\n"
"        preorder(tree.getRightChild())"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:93
msgid "We can also implement ``preorder`` as a method of the ``BinaryTree`` class. The code for implementing ``preorder`` as an internal method is shown in :ref:`Listing 3 <lst_preorder2>`. Notice what happens when we move the code from internal to external. In general, we just replace ``tree`` with ``self``. However, we also need to modify the base case. The internal method must check for the existence of the left and the right children *before* making the recursive call to ``preorder``."
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:103
msgid "**Listing 3**"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:107
msgid "def preorder(self):\n"
"    print(self.key)\n"
"    if self.leftChild:\n"
"        self.leftChild.preorder()\n"
"    if self.rightChild:\n"
"        self.rightChild.preorder()"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:116
msgid "Which of these two ways to implement ``preorder`` is best? The answer is that implementing ``preorder`` as an external function is probably better in this case. The reason is that you very rarely want to just traverse the tree. In most cases you are going to want to accomplish something else while using one of the basic traversal patterns. In fact, we will see in the next example that the ``postorder`` traversal pattern follows very closely with the code we wrote earlier to evaluate a parse tree. Therefore we will write the rest of the traversals as external functions."
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:126
msgid "The algorithm for the ``postorder`` traversal, shown in :ref:`Listing 4 <lst_postorder1>`, is nearly identical to ``preorder`` except that we move the call to print to the end of the function."
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:132
msgid "**Listing 4**"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:136
msgid "def postorder(tree):\n"
"    if tree != None:\n"
"        postorder(tree.getLeftChild())\n"
"        postorder(tree.getRightChild())\n"
"        print(tree.getRootVal())"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:144
msgid "We have already seen a common use for the postorder traversal, namely evaluating a parse tree. Look back at :ref:`Listing 1 <lst_eval>` again. What we are doing is evaluating the left subtree, evaluating the right subtree, and combining them in the root through the function call to an operator. Assume that our binary tree is going to store only expression tree data. Let’s rewrite the evaluation function, but model it even more closely on the ``postorder`` code in :ref:`Listing 4 <lst_postorder1>` (see :ref:`Listing 5 <lst_postordereval>`)."
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:154
msgid "**Listing 5**"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:158
msgid "def postordereval(tree):\n"
"    opers = {'+':operator.add, '-':operator.sub, '*':operator.mul, '/':operator.truediv}\n"
"    res1 = None\n"
"    res2 = None\n"
"    if tree:\n"
"        res1 = postordereval(tree.getLeftChild())\n"
"        res2 = postordereval(tree.getRightChild())\n"
"        if res1 and res2:\n"
"            return opers[tree.getRootVal()](res1,res2)\n"
"        else:\n"
"            return tree.getRootVal()"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:174
msgid "Notice that the form in :ref:`Listing 4 <lst_postorder1>` is the same as the form in :ref:`Listing 5 <lst_postordereval>`, except that instead of printing the key at the end of the function, we return it. This allows us to save the values returned from the recursive calls in lines 6 and 7. We then use these saved values along with the operator on line 9."
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:180
msgid "The final traversal we will look at in this section is the inorder traversal. In the inorder traversal we visit the left subtree, followed by the root, and finally the right subtree. :ref:`Listing 6 <lst_inorder1>` shows our code for the inorder traversal. Notice that in all three of the traversal functions we are simply changing the position of the ``print`` statement with respect to the two recursive function calls."
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:189
msgid "**Listing 6**"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:194
msgid "def inorder(tree):\n"
"  if tree != None:\n"
"      inorder(tree.getLeftChild())\n"
"      print(tree.getRootVal())\n"
"      inorder(tree.getRightChild())"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:201
msgid "If we perform a simple inorder traversal of a parse tree we get our original expression back, without any parentheses. Let’s modify the basic inorder algorithm to allow us to recover the fully parenthesized version of the expression. The only modifications we will make to the basic template are as follows: print a left parenthesis *before* the recursive call to the left subtree, and print a right parenthesis *after* the recursive call to the right subtree. The modified code is shown in :ref:`Listing 7 <lst_printexp>`."
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:212
msgid "**Listing 7**"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:216
msgid "def printexp(tree):\n"
"  sVal = \"\"\n"
"  if tree:\n"
"      sVal = '(' + printexp(tree.getLeftChild())\n"
"      sVal = sVal + str(tree.getRootVal())\n"
"      sVal = sVal + printexp(tree.getRightChild())+')'\n"
"  return sVal"
msgstr ""

#: ../../_sources/Trees/TreeTraversals.rst:226
msgid "Notice that the ``printexp`` function as we have implemented it puts parentheses around each number. While not incorrect, the parentheses are clearly not needed. In the exercises at the end of this chapter you are asked to modify the ``printexp`` function to remove this set of parentheses."
msgstr ""

