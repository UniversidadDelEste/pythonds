# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Trees/ProgrammingExercises.rst:6
msgid "Programming Exercises"
msgstr ""

#: ../../_sources/Trees/ProgrammingExercises.rst:8
msgid "Extend the ``buildParseTree`` function to handle mathematical expressions that do not have spaces between every character."
msgstr ""

#: ../../_sources/Trees/ProgrammingExercises.rst:11
msgid "Modify the ``buildParseTree`` and ``evaluate`` functions to handle boolean statements (and, or, and not). Remember that “not” is a unary operator, so this will complicate your code somewhat."
msgstr ""

#: ../../_sources/Trees/ProgrammingExercises.rst:15
msgid "Using the ``findSuccessor`` method, write a non-recursive inorder traversal for a binary search tree."
msgstr ""

#: ../../_sources/Trees/ProgrammingExercises.rst:18
msgid "Modify the code for a binary search tree to make it threaded. Write a non-recursive inorder traversal method for the threaded binary search tree. A threaded binary tree maintains a reference from each node to its successor."
msgstr ""

#: ../../_sources/Trees/ProgrammingExercises.rst:23
msgid "Modify our implementation of the binary search tree so that it handles duplicate keys properly. That is, if a key is already in the tree then the new payload should replace the old rather than add another node with the same key."
msgstr ""

#: ../../_sources/Trees/ProgrammingExercises.rst:28
msgid "Create a binary heap with a limited heap size. In other words, the heap only keeps track of the ``n`` most important items. If the heap grows in size to more than ``n`` items the least important item is dropped."
msgstr ""

#: ../../_sources/Trees/ProgrammingExercises.rst:33
msgid "Clean up the ``printexp`` function so that it does not include an ‘extra’ set of parentheses around each number."
msgstr ""

#: ../../_sources/Trees/ProgrammingExercises.rst:36
msgid "Using the ``buildHeap`` method, write a sorting function that can sort a list in :math:`O(n\\log{n})` time."
msgstr ""

#: ../../_sources/Trees/ProgrammingExercises.rst:39
msgid "Write a function that takes a parse tree for a mathematical expression and calculates the derivative of the expression with respect to some variable."
msgstr ""

#: ../../_sources/Trees/ProgrammingExercises.rst:43
msgid "Implement a binary heap as a max heap."
msgstr ""

#: ../../_sources/Trees/ProgrammingExercises.rst:45
msgid "Using the ``BinaryHeap`` class, implement a new class called ``PriorityQueue``. Your ``PriorityQueue`` class should implement the constructor, plus the ``enqueue`` and ``dequeue`` methods."
msgstr ""

