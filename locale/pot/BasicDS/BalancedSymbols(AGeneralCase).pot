# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/BasicDS/BalancedSymbols(AGeneralCase).rst:6
msgid "Balanced Symbols (A General Case)"
msgstr ""

#: ../../_sources/BasicDS/BalancedSymbols(AGeneralCase).rst:8
msgid "The balanced parentheses problem shown above is a specific case of a more general situation that arises in many programming languages. The general problem of balancing and nesting different kinds of opening and closing symbols occurs frequently. For example, in Python square brackets, ``[`` and ``]``, are used for lists; curly braces, ``{`` and ``}``, are used for dictionaries; and parentheses, ``(`` and ``)``, are used for tuples and arithmetic expressions. It is possible to mix symbols as long as each maintains its own open and close relationship. Strings of symbols such as"
msgstr ""

#: ../../_sources/BasicDS/BalancedSymbols(AGeneralCase).rst:20
msgid "{ { ( [ ] [ ] ) } ( ) }\n"
"\n"
"[ [ { { ( ( ) ) } } ] ]\n"
"\n"
"[ ] [ ] [ ] ( ) { }"
msgstr ""

#: ../../_sources/BasicDS/BalancedSymbols(AGeneralCase).rst:26
msgid "are properly balanced in that not only does each opening symbol have a corresponding closing symbol, but the types of symbols match as well."
msgstr ""

#: ../../_sources/BasicDS/BalancedSymbols(AGeneralCase).rst:29
msgid "Compare those with the following strings that are not balanced:"
msgstr ""

#: ../../_sources/BasicDS/BalancedSymbols(AGeneralCase).rst:33
msgid "( [ ) ]\n"
"\n"
"( ( ( ) ] ) )\n"
"\n"
"[ { ( ) ]"
msgstr ""

#: ../../_sources/BasicDS/BalancedSymbols(AGeneralCase).rst:39
msgid "The simple parentheses checker from the previous section can easily be extended to handle these new types of symbols. Recall that each opening symbol is simply pushed on the stack to wait for the matching closing symbol to appear later in the sequence. When a closing symbol does appear, the only difference is that we must check to be sure that it correctly matches the type of the opening symbol on top of the stack. If the two symbols do not match, the string is not balanced. Once again, if the entire string is processed and nothing is left on the stack, the string is correctly balanced."
msgstr ""

#: ../../_sources/BasicDS/BalancedSymbols(AGeneralCase).rst:49
msgid "The Python program to implement this is shown in :ref:`ActiveCode 1 <lst_parcheck2>`. The only change appears in line 16 where we call a helper function, ``matches``, to assist with symbol-matching. Each symbol that is removed from the stack must be checked to see that it matches the current closing symbol. If a mismatch occurs, the boolean variable ``balanced`` is set to ``False``."
msgstr ""

#: ../../_sources/BasicDS/BalancedSymbols(AGeneralCase).rst:92
msgid "data-caption='Solving the General Balanced Symbol Problem'"
msgstr ""

#: ../../_sources/BasicDS/BalancedSymbols(AGeneralCase).rst:92
msgid "from pythonds.basic.stack import Stack\n"
"\n"
"def parChecker(symbolString):\n"
"    s = Stack()\n"
"    balanced = True\n"
"    index = 0\n"
"    while index < len(symbolString) and balanced:\n"
"        symbol = symbolString[index]\n"
"        if symbol in \"([{\":\n"
"            s.push(symbol)\n"
"        else:\n"
"            if s.isEmpty():\n"
"                balanced = False\n"
"            else:\n"
"                top = s.pop()\n"
"                if not matches(top,symbol):\n"
"                       balanced = False\n"
"        index = index + 1\n"
"    if balanced and s.isEmpty():\n"
"        return True\n"
"    else:\n"
"        return False\n"
"\n"
"def matches(open,close):\n"
"    opens = \"([{\"\n"
"    closers = \")]}\"\n"
"    return opens.index(open) == closers.index(close)\n"
"\n"
"\n"
"print(parChecker('{{([][])}()}'))\n"
"print(parChecker('[{()]'))"
msgstr ""

#: ../../_sources/BasicDS/BalancedSymbols(AGeneralCase).rst:93
msgid "These two examples show that stacks are very important data structures for the processing of language constructs in computer science. Almost any notation you can think of has some type of nested symbol that must be matched in a balanced order. There are a number of other important uses for stacks in computer science. We will continue to explore them in the next sections."
msgstr ""

