# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Introduction/GettingStartedwithData.rst:6
msgid "Getting Started with Data"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:8
msgid "We stated above that Python supports the object-oriented programming paradigm. This means that Python considers data to be the focal point of the problem-solving process. In Python, as well as in any other object-oriented programming language, we define a **class** to be a description of what the data look like (the state) and what the data can do (the behavior). Classes are analogous to abstract data types because a user of a class only sees the state and behavior of a data item. Data items are called **objects** in the object-oriented paradigm. An object is an instance of a class."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:19
msgid "Built-in Atomic Data Types"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:21
msgid "We will begin our review by considering the atomic data types. Python has two main built-in numeric classes that implement the integer and floating point data types. These Python classes are called ``int`` and ``float``. The standard arithmetic operations, +, -, \\*, /, and \\*\\* (exponentiation), can be used with parentheses forcing the order of operations away from normal operator precedence. Other very useful operations are the remainder (modulo) operator, %, and integer division, //. Note that when two integers are divided, the result is a floating point. The integer division operator returns the integer portion of the quotient by truncating any fractional part."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:47
msgid "data-caption='Basic Arithmetic Operators'"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:47
msgid "print(2+3*4)\n"
"print((2+3)*4)\n"
"print(2**10)\n"
"print(6/3)\n"
"print(7/3)\n"
"print(7//3)\n"
"print(7%3)\n"
"print(3/6)\n"
"print(3//6)\n"
"print(3%6)\n"
"print(2**100)"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:48
msgid "The boolean data type, implemented as the Python ``bool`` class, will be quite useful for representing truth values. The possible state values for a boolean object are ``True`` and ``False`` with the standard boolean operators, ``and``, ``or``, and ``not``."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:55
msgid ">>> True\n"
"True\n"
">>> False\n"
"False\n"
">>> False or True\n"
"True\n"
">>> not (False or True)\n"
"False\n"
">>> True and True\n"
"True"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:66
msgid "Boolean data objects are also used as results for comparison operators such as equality (==) and greater than (:math:`>`). In addition, relational operators and logical operators can be combined together to form complex logical questions. :ref:`Table 1 <tab_relational>` shows the relational and logical operators with examples shown in the session that follows."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:74
msgid "**Table 1: Relational and Logical Operators**"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:77
#: ../../_sources/Introduction/GettingStartedwithData.rst:188
#: ../../_sources/Introduction/GettingStartedwithData.rst:473
msgid "**Operation Name**"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:77
#: ../../_sources/Introduction/GettingStartedwithData.rst:188
#: ../../_sources/Introduction/GettingStartedwithData.rst:473
#: ../../_sources/Introduction/GettingStartedwithData.rst:608
msgid "**Operator**"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:77
#: ../../_sources/Introduction/GettingStartedwithData.rst:188
#: ../../_sources/Introduction/GettingStartedwithData.rst:239
#: ../../_sources/Introduction/GettingStartedwithData.rst:378
#: ../../_sources/Introduction/GettingStartedwithData.rst:473
#: ../../_sources/Introduction/GettingStartedwithData.rst:507
#: ../../_sources/Introduction/GettingStartedwithData.rst:608
#: ../../_sources/Introduction/GettingStartedwithData.rst:644
msgid "**Explanation**"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:79
msgid "less than"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:79
msgid ":math:`<`"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:79
msgid "Less than operator"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:80
msgid "greater than"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:80
msgid ":math:`>`"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:80
msgid "Greater than operator"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:81
msgid "less than or equal"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:81
msgid ":math:`<=`"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:81
msgid "Less than or equal to operator"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:82
msgid "greater than or equal"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:82
msgid ":math:`>=`"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:82
msgid "Greater than or equal to operator"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:83
msgid "equal"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:83
msgid ":math:`==`"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:83
msgid "Equality operator"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:84
msgid "not equal"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:84
msgid ":math:`!=`"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:84
msgid "Not equal operator"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:85
msgid "logical and"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:85
msgid ":math:`and`"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:85
msgid "Both operands True for result to be True"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:86
msgid "logical or"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:86
msgid ":math:`or`"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:86
msgid "One or the other operand is True for the result to be True"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:87
msgid "logical not"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:87
msgid ":math:`not`"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:87
msgid "Negates the truth value, False becomes True, True becomes False"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:98
msgid "data-caption='Basic Relational and Logical Operators'"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:98
msgid "print(5==10)\n"
"print(10 > 5)\n"
"print((5 >= 1) and (5 <= 10))"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:99
msgid "Identifiers are used in programming languages as names. In Python, identifiers start with a letter or an underscore (_), are case sensitive, and can be of any length. Remember that it is always a good idea to use names that convey meaning so that your program code is easier to read and understand."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:105
msgid "A Python variable is created when a name is used for the first time on the left-hand side of an assignment statement. Assignment statements provide a way to associate a name with a value. The variable will hold a reference to a piece of data and not the data itself. Consider the following session:"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:113
msgid ">>> theSum = 0\n"
">>> theSum\n"
"0\n"
">>> theSum = theSum + 1\n"
">>> theSum\n"
"1\n"
">>> theSum = True\n"
">>> theSum\n"
"True"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:123
msgid "The assignment statement ``theSum = 0`` creates a variable called ``theSum`` and lets it hold the reference to the data object ``0`` (see :ref:`Figure 3 <fig_assignment1>`). In general, the right-hand side of the assignment statement is evaluated and a reference to the resulting data object is “assigned” to the name on the left-hand side. At this point in our example, the type of the variable is integer as that is the type of the data currently being referred to by ``theSum``. If the type of the data changes (see :ref:`Figure 4 <fig_assignment2>`), as shown above with the boolean value ``True``, so does the type of the variable (``theSum`` is now of the type boolean). The assignment statement changes the reference being held by the variable. This is a dynamic characteristic of Python. The same variable can refer to many different types of data."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:141
msgid ".. image:: Introduction/Figures/assignment1.png"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:141
msgid "Figure 3: Variables Hold References to Data Objects"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:148
msgid ".. image:: Introduction/Figures/assignment2.png"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:148
msgid "Figure 4: Assignment Changes the Reference"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:151
msgid "Built-in Collection Data Types"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:153
msgid "In addition to the numeric and boolean classes, Python has a number of very powerful built-in collection classes. Lists, strings, and tuples are ordered collections that are very similar in general structure but have specific differences that must be understood for them to be used properly. Sets and dictionaries are unordered collections."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:159
msgid "A **list** is an ordered collection of zero or more references to Python data objects. Lists are written as comma-delimited values enclosed in square brackets. The empty list is simply ``[ ]``. Lists are heterogeneous, meaning that the data objects need not all be from the same class and the collection can be assigned to a variable as below. The following fragment shows a variety of Python data objects in a list."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:168
msgid ">>> [1,3,True,6.5]\n"
"[1, 3, True, 6.5]\n"
">>> myList = [1,3,True,6.5]\n"
">>> myList\n"
"[1, 3, True, 6.5]"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:174
msgid "Note that when Python evaluates a list, the list itself is returned. However, in order to remember the list for later processing, its reference needs to be assigned to a variable."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:178
msgid "Since lists are considered to be sequentially ordered, they support a number of operations that can be applied to any Python sequence. :ref:`Table 2 <tab_sequence>` reviews these operations and the following session gives examples of their use."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:185
msgid "**Table 2: Operations on Any Sequence in Python**"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:190
msgid "indexing"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:190
msgid "[ ]"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:190
msgid "Access an element of a sequence"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:191
msgid "concatenation"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:191
msgid "\\+"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:191
msgid "Combine sequences together"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:192
msgid "repetition"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:192
msgid "\\*"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:192
msgid "Concatenate a repeated number of times"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:193
#: ../../_sources/Introduction/GettingStartedwithData.rst:475
msgid "membership"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:193
#: ../../_sources/Introduction/GettingStartedwithData.rst:475
msgid "in"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:193
msgid "Ask whether an item is in a sequence"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:194
#: ../../_sources/Introduction/GettingStartedwithData.rst:476
msgid "length"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:194
#: ../../_sources/Introduction/GettingStartedwithData.rst:476
msgid "len"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:194
msgid "Ask the number of items in the sequence"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:195
msgid "slicing"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:195
msgid "[ : ]"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:195
msgid "Extract a part of a sequence"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:199
msgid "Note that the indices for lists (sequences) start counting with 0. The slice operation, myList[1:3], returns a list of items starting with the item indexed by 1 up to but not including the item indexed by 3."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:203
msgid "Sometimes, you will want to initialize a list. This can quickly be accomplished by using repetition. For example,"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:208
msgid ">>> myList = [0] * 6\n"
">>> myList\n"
"[0, 0, 0, 0, 0, 0]"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:212
msgid "One very important aside relating to the repetition operator is that the result is a repetition of references to the data objects in the sequence. This can best be seen by considering the following session:"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:225
msgid "data-caption='Repetition of References'"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:225
msgid "myList = [1,2,3,4]\n"
"A = [myList]*3\n"
"print(A)\n"
"myList[2]=45\n"
"print(A)"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:226
msgid "The variable ``A`` holds a collection of three references to the original list called ``myList``. Note that a change to one element of ``myList`` shows up in all three occurrences in ``A``."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:230
msgid "Lists support a number of methods that will be used to build data structures. :ref:`Table 3 <tab_listmethods>` provides a summary. Examples of their use follow."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:236
msgid "**Table 3: Methods Provided by Lists in Python**"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:239
#: ../../_sources/Introduction/GettingStartedwithData.rst:378
#: ../../_sources/Introduction/GettingStartedwithData.rst:507
#: ../../_sources/Introduction/GettingStartedwithData.rst:644
msgid "**Method Name**"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:239
#: ../../_sources/Introduction/GettingStartedwithData.rst:378
#: ../../_sources/Introduction/GettingStartedwithData.rst:507
#: ../../_sources/Introduction/GettingStartedwithData.rst:608
#: ../../_sources/Introduction/GettingStartedwithData.rst:644
msgid "**Use**"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:241
msgid "``append``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:241
msgid "``alist.append(item)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:241
msgid "Adds a new item to the end of a list"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:242
msgid "``insert``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:242
msgid "``alist.insert(i,item)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:242
msgid "Inserts an item at the ith position in a list"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:243
#: ../../_sources/Introduction/GettingStartedwithData.rst:244
#: ../../_sources/Introduction/GettingStartedwithData.rst:515
msgid "``pop``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:243
msgid "``alist.pop()``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:243
msgid "Removes and returns the last item in a list"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:244
msgid "``alist.pop(i)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:244
msgid "Removes and returns the ith item in a list"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:245
msgid "``sort``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:245
msgid "``alist.sort()``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:245
msgid "Modifies a list to be sorted"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:246
msgid "``reverse``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:246
msgid "``alist.reverse()``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:246
msgid "Modifies a list to be in reverse order"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:247
#: ../../_sources/Introduction/GettingStartedwithData.rst:612
msgid "``del``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:247
msgid "``del alist[i]``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:247
msgid "Deletes the item in the ith position"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:248
msgid "``index``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:248
msgid "``alist.index(item)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:248
#: ../../_sources/Introduction/GettingStartedwithData.rst:385
msgid "Returns the index of the first occurrence of ``item``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:249
#: ../../_sources/Introduction/GettingStartedwithData.rst:381
msgid "``count``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:249
msgid "``alist.count(item)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:249
msgid "Returns the number of occurrences of ``item``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:250
#: ../../_sources/Introduction/GettingStartedwithData.rst:514
msgid "``remove``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:250
msgid "``alist.remove(item)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:250
msgid "Removes the first occurrence of ``item``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:279
msgid "data-caption='Examples of List Methods'"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:279
msgid "myList = [1024, 3, True, 6.5]\n"
"myList.append(False)\n"
"print(myList)\n"
"myList.insert(2,4.5)\n"
"print(myList)\n"
"print(myList.pop())\n"
"print(myList)\n"
"print(myList.pop(1))\n"
"print(myList)\n"
"myList.pop(2)\n"
"print(myList)\n"
"myList.sort()\n"
"print(myList)\n"
"myList.reverse()\n"
"print(myList)\n"
"print(myList.count(6.5))\n"
"print(myList.index(4.5))\n"
"myList.remove(6.5)\n"
"print(myList)\n"
"del myList[0]\n"
"print(myList)"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:280
msgid "You can see that some of the methods, such as ``pop``, return a value and also modify the list. Others, such as ``reverse``, simply modify the list with no return value. ``pop`` will default to the end of the list but can also remove and return a specific item. The index range starting from 0 is again used for these methods. You should also notice the familiar “dot” notation for asking an object to invoke a method. ``myList.append(False)`` can be read as “ask the object ``myList`` to perform its ``append`` method and send it the value ``False``.” Even simple data objects such as integers can invoke methods in this way."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:292
msgid ">>> (54).__add__(21)\n"
"75\n"
">>>"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:296
msgid "In this fragment we are asking the integer object ``54`` to execute its ``add`` method (called ``__add__`` in Python) and passing it ``21`` as the value to add. The result is the sum, ``75``. Of course, we usually write this as ``54+21``. We will say much more about these methods later in this section."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:302
msgid "One common Python function that is often discussed in conjunction with lists is the ``range`` function. ``range`` produces a range object that represents a sequence of values. By using the ``list`` function, it is possible to see the value of the range object as a list. This is illustrated below."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:310
msgid ">>> range(10)\n"
"range(0, 10)\n"
">>> list(range(10))\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
">>> range(5,10)\n"
"range(5, 10)\n"
">>> list(range(5,10))\n"
"[5, 6, 7, 8, 9]\n"
">>> list(range(5,10,2))\n"
"[5, 7, 9]\n"
">>> list(range(10,1,-1))\n"
"[10, 9, 8, 7, 6, 5, 4, 3, 2]\n"
">>>"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:324
msgid "The range object represents a sequence of integers. By default, it will start with 0. If you provide more parameters, it will start and end at particular points and can even skip items. In our first example, ``range(10)``, the sequence starts with 0 and goes up to but does not include 10. In our second example, ``range(5,10)`` starts at 5 and goes up to but not including 10. ``range(5,10,2)`` performs similarly but skips by twos (again, 10 is not included)."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:332
msgid "**Strings** are sequential collections of zero or more letters, numbers and other symbols. We call these letters, numbers and other symbols *characters*. Literal string values are differentiated from identifiers by using quotation marks (either single or double)."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:339
msgid ">>> \"David\"\n"
"'David'\n"
">>> myName = \"David\"\n"
">>> myName[3]\n"
"'i'\n"
">>> myName*2\n"
"'DavidDavid'\n"
">>> len(myName)\n"
"5\n"
">>>"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:350
msgid "Since strings are sequences, all of the sequence operations described above work as you would expect. In addition, strings have a number of methods, some of which are shown in :ref:`Table 4<tab_stringmethods>`. For example,"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:356
msgid ">>> myName\n"
"'David'\n"
">>> myName.upper()\n"
"'DAVID'\n"
">>> myName.center(10)\n"
"'  David   '\n"
">>> myName.find('v')\n"
"2\n"
">>> myName.split('v')\n"
"['Da', 'id']"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:367
msgid "Of these, ``split`` will be very useful for processing data. ``split`` will take a string and return a list of strings using the split character as a division point. In the example, ``v`` is the division point. If no division is specified, the split method looks for whitespace characters such as tab, newline and space."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:375
msgid "**Table 4: Methods Provided by Strings in Python**"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:380
msgid "``center``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:380
msgid "``astring.center(w)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:380
msgid "Returns a string centered in a field of size ``w``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:381
msgid "``astring.count(item)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:381
msgid "Returns the number of occurrences of ``item`` in the string"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:382
msgid "``ljust``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:382
msgid "``astring.ljust(w)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:382
msgid "Returns a string left-justified in a field of size ``w``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:383
msgid "``lower``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:383
msgid "``astring.lower()``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:383
msgid "Returns a string in all lowercase"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:384
msgid "``rjust``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:384
msgid "``astring.rjust(w)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:384
msgid "Returns a string right-justified in a field of size ``w``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:385
msgid "``find``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:385
msgid "``astring.find(item)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:386
msgid "``split``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:386
msgid "``astring.split(schar)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:386
msgid "Splits a string into substrings at ``schar``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:390
msgid "A major difference between lists and strings is that lists can be modified while strings cannot. This is referred to as **mutability**. Lists are mutable; strings are immutable. For example, you can change an item in a list by using indexing and assignment. With a string that change is not allowed."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:398
msgid ">>> myList\n"
"[1, 3, True, 6.5]\n"
">>> myList[0]=2**10\n"
">>> myList\n"
"[1024, 3, True, 6.5]\n"
">>>\n"
">>> myName\n"
"'David'\n"
">>> myName[0]='X'\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<pyshell#84>\", line 1, in -toplevel-\n"
"    myName[0]='X'\n"
"TypeError: object doesn't support item assignment\n"
">>>"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:414
msgid "Tuples are very similar to lists in that they are heterogeneous sequences of data. The difference is that a tuple is immutable, like a string. A tuple cannot be changed. Tuples are written as comma-delimited values enclosed in parentheses. As sequences, they can use any operation described above. For example,"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:422
msgid ">>> myTuple = (2,True,4.96)\n"
">>> myTuple\n"
"(2, True, 4.96)\n"
">>> len(myTuple)\n"
"3\n"
">>> myTuple[0]\n"
"2\n"
">>> myTuple * 3\n"
"(2, True, 4.96, 2, True, 4.96, 2, True, 4.96)\n"
">>> myTuple[0:2]\n"
"(2, True)\n"
">>>"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:435
msgid "However, if you try to change an item in a tuple, you will get an error. Note that the error message provides location and reason for the problem."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:441
msgid ">>> myTuple[1]=False\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<pyshell#137>\", line 1, in -toplevel-\n"
"    myTuple[1]=False\n"
"TypeError: object doesn't support item assignment\n"
">>>"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:449
msgid "A set is an unordered collection of zero or more immutable Python data objects. Sets do not allow duplicates and are written as comma-delimited values enclosed in curly braces. The empty set is represented by ``set()``. Sets are heterogeneous, and the collection can be assigned to a variable as below."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:457
msgid ">>> {3,6,\"cat\",4.5,False}\n"
"{False, 4.5, 3, 6, 'cat'}\n"
">>> mySet = {3,6,\"cat\",4.5,False}\n"
">>> mySet\n"
"{False, 4.5, 3, 6, 'cat'}\n"
">>>"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:464
msgid "Even though sets are not considered to be sequential, they do support a few of the familiar operations presented earlier. :ref:`Table 5 <tab_setops>` reviews these operations and the following session gives examples of their use."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:470
msgid "**Table 5: Operations on a Set in Python**"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:475
msgid "Set membership"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:476
msgid "Returns the cardinality of the set"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:477
msgid "``|``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:477
msgid "``aset | otherset``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:477
#: ../../_sources/Introduction/GettingStartedwithData.rst:509
msgid "Returns a new set with all elements from both sets"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:478
msgid "``&``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:478
msgid "``aset & otherset``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:478
#: ../../_sources/Introduction/GettingStartedwithData.rst:510
msgid "Returns a new set with only those elements common to both sets"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:479
msgid "``-``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:479
msgid "``aset - otherset``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:479
msgid "Returns a new set with all items from the first set not in second"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:480
msgid "``<=``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:480
msgid "``aset <= otherset``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:480
msgid "Asks whether all elements of  the first set are in the second"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:486
msgid ">>> mySet\n"
"{False, 4.5, 3, 6, 'cat'}\n"
">>> len(mySet)\n"
"5\n"
">>> False in mySet\n"
"True\n"
">>> \"dog\" in mySet\n"
"False\n"
">>>"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:496
msgid "Sets support a number of methods that should be familiar to those who have worked with them in a mathematics setting. :ref:`Table 6 <tab_setmethods>` provides a summary. Examples of their use follow. Note that ``union``, ``intersection``, ``issubset``, and ``difference`` all have operators that can be used as well."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:504
msgid "**Table 6: Methods Provided by Sets in Python**"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:509
msgid "``union``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:509
msgid "``aset.union(otherset)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:510
msgid "``intersection``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:510
msgid "``aset.intersection(otherset)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:511
msgid "``difference``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:511
msgid "``aset.difference(otherset)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:511
msgid "Returns a new set with all items from first set not in second"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:512
msgid "``issubset``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:512
msgid "``aset.issubset(otherset)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:512
msgid "Asks whether all elements of one set are in the other"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:513
msgid "``add``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:513
msgid "``aset.add(item)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:513
msgid "Adds item to the set"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:514
msgid "``aset.remove(item)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:514
msgid "Removes item from the set"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:515
msgid "``aset.pop()``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:515
msgid "Removes an arbitrary element from the set"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:516
msgid "``clear``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:516
msgid "``aset.clear()``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:516
msgid "Removes all elements from the set"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:522
msgid ">>> mySet\n"
"{False, 4.5, 3, 6, 'cat'}\n"
">>> yourSet = {99,3,100}\n"
">>> mySet.union(yourSet)\n"
"{False, 4.5, 3, 100, 6, 'cat', 99}\n"
">>> mySet | yourSet\n"
"{False, 4.5, 3, 100, 6, 'cat', 99}\n"
">>> mySet.intersection(yourSet)\n"
"{3}\n"
">>> mySet & yourSet\n"
"{3}\n"
">>> mySet.difference(yourSet)\n"
"{False, 4.5, 6, 'cat'}\n"
">>> mySet - yourSet\n"
"{False, 4.5, 6, 'cat'}\n"
">>> {3,100}.issubset(yourSet)\n"
"True\n"
">>> {3,100}<=yourSet\n"
"True\n"
">>> mySet.add(\"house\")\n"
">>> mySet\n"
"{False, 4.5, 3, 6, 'house', 'cat'}\n"
">>> mySet.remove(4.5)\n"
">>> mySet\n"
"{False, 3, 6, 'house', 'cat'}\n"
">>> mySet.pop()\n"
"False\n"
">>> mySet\n"
"{3, 6, 'house', 'cat'}\n"
">>> mySet.clear()\n"
">>> mySet\n"
"set()\n"
">>>"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:556
msgid "Our final Python collection is an unordered structure called a **dictionary**. Dictionaries are collections of associated pairs of items where each pair consists of a key and a value. This key-value pair is typically written as key:value. Dictionaries are written as comma-delimited key:value pairs enclosed in curly braces. For example,"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:564
msgid ">>> capitals = {'Iowa':'DesMoines','Wisconsin':'Madison'}\n"
">>> capitals\n"
"{'Wisconsin': 'Madison', 'Iowa': 'DesMoines'}\n"
">>>"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:569
msgid "We can manipulate a dictionary by accessing a value via its key or by adding another key-value pair. The syntax for access looks much like a sequence access except that instead of using the index of the item we use the key value. To add a new value is similar."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:585
msgid "data-caption='Using a Dictionary'"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:585
msgid "capitals = {'Iowa':'DesMoines','Wisconsin':'Madison'}\n"
"print(capitals['Iowa'])\n"
"capitals['Utah']='SaltLakeCity'\n"
"print(capitals)\n"
"capitals['California']='Sacramento'\n"
"print(len(capitals))\n"
"for k in capitals:\n"
"   print(capitals[k],\" is the capital of \", k)"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:586
msgid "It is important to note that the dictionary is maintained in no particular order with respect to the keys. The first pair added (``'Utah':`` ``'SaltLakeCity'``) was placed first in the dictionary and the second pair added (``'California':`` ``'Sacramento'``) was placed last. The placement of a key is dependent on the idea of “hashing,” which will be explained in more detail in Chapter 4. We also show the length function performing the same role as with previous collections."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:594
msgid "Dictionaries have both methods and operators. :ref:`Table 7 <tab_dictopers>` and :ref:`Table 8 <tab_dictmethods>` describe them, and the session shows them in action. The ``keys``, ``values``, and ``items`` methods all return objects that contain the values of interest. You can use the ``list`` function to convert them to lists. You will also see that there are two variations on the ``get`` method. If the key is not present in the dictionary, ``get`` will return ``None``. However, a second, optional parameter can specify a return value instead."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:605
msgid "**Table 7: Operators Provided by Dictionaries in Python**"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:610
msgid "``[]``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:610
msgid "``myDict[k]``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:610
msgid "Returns the value associated with ``k``, otherwise its an error"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:611
msgid "``in``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:611
msgid "``key in adict``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:611
msgid "Returns ``True`` if key is in the   dictionary, ``False`` otherwise"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:612
msgid "del ``adict[key]``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:612
msgid "Removes the entry from the  dictionary"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:619
msgid ">>> phoneext={'david':1410,'brad':1137}\n"
">>> phoneext\n"
"{'brad': 1137, 'david': 1410}\n"
">>> phoneext.keys()\n"
"dict_keys(['brad', 'david'])\n"
">>> list(phoneext.keys())\n"
"['brad', 'david']\n"
">>> phoneext.values()\n"
"dict_values([1137, 1410])\n"
">>> list(phoneext.values())\n"
"[1137, 1410]\n"
">>> phoneext.items()\n"
"dict_items([('brad', 1137), ('david', 1410)])\n"
">>> list(phoneext.items())\n"
"[('brad', 1137), ('david', 1410)]\n"
">>> phoneext.get(\"kent\")\n"
">>> phoneext.get(\"kent\",\"NO ENTRY\")\n"
"'NO ENTRY'\n"
">>>"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:641
msgid "**Table 8: Methods Provided by Dictionaries in Python**"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:646
msgid "``keys``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:646
msgid "``adict.keys()``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:646
msgid "Returns the keys of the dictionary in a dict_keys object"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:647
msgid "``values``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:647
msgid "``adict.values()``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:647
msgid "Returns the values of the dictionary in a dict_values object"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:648
msgid "``items``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:648
msgid "``adict.items()``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:648
msgid "Returns the key-value pairs in a dict_items object"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:649
#: ../../_sources/Introduction/GettingStartedwithData.rst:650
msgid "``get``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:649
msgid "``adict.get(k)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:649
msgid "Returns the value associated with ``k``, ``None`` otherwise"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:650
msgid "``adict.get(k,alt)``"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:650
msgid "Returns the value associated with ``k``, ``alt`` otherwise"
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:656
msgid "This workspace is provided for your convenience.  You can use this activecode window to try out anything you like."
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:658
msgid ""
msgstr ""

#: ../../_sources/Introduction/GettingStartedwithData.rst:658
msgid "\n"
""
msgstr ""

