# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum
# This file is distributed under the same license as the Problem Solving with Algorithms and Data Structures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Problem Solving with Algorithms and Data Structures 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-01 14:03-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Introduction/InputandOutput.rst:6
msgid "Input and Output"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:8
msgid "We often have a need to interact with users, either to get data or to provide some sort of result. Most programs today use a dialog box as a way of asking the user to provide some type of input. While Python does have a way to create dialog boxes, there is a much simpler function that we can use. Python provides us with a function that allows us to ask a user to enter some data and returns a reference to the data in the form of a string. The function is called ``input``."
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:17
msgid "Python’s input function takes a single parameter that is a string. This string is often called the **prompt** because it contains some helpful text prompting the user to enter something. For example, you might call input as follows:"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:24
msgid "aName = input('Please enter your name: ')"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:26
msgid "Now whatever the user types after the prompt will be stored in the ``aName`` variable. Using the input function, we can easily write instructions that will prompt the user to enter data and then incorporate that data into further processing. For example, in the following two statements, the first asks the user for their name and the second prints the result of some simple processing based on the string that is provided."
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:40
msgid "data-caption='The input Function Returns a String'"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:40
msgid "aName = input(\"Please enter your name \")\n"
"print(\"Your name in all capitals is\",aName.upper(),\n"
"      \"and has length\", len(aName))"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:41
msgid "It is important to note that the value returned from the ``input`` function will be a string representing the exact characters that were entered after the prompt. If you want this string interpreted as another type, you must provide the type conversion explicitly. In the statements below, the string that is entered by the user is converted to a float so that it can be used in further arithmetic processing."
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:50
msgid "sradius = input(\"Please enter the radius of the circle \")\n"
"radius = float(sradius)\n"
"diameter = 2 * radius"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:55
msgid "String Formatting"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:57
msgid "We have already seen that the ``print`` function provides a very simple way to output values from a Python program. ``print`` takes zero or more parameters and displays them using a single blank as the default separator. It is possible to change the separator character by setting the ``sep`` argument. In addition, each print ends with a newline character by default. This behavior can be changed by setting the ``end`` argument. These variations are shown in the following session:"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:68
msgid ">>> print(\"Hello\")\n"
"Hello\n"
">>> print(\"Hello\",\"World\")\n"
"Hello World\n"
">>> print(\"Hello\",\"World\", sep=\"***\")\n"
"Hello***World\n"
">>> print(\"Hello\",\"World\", end=\"***\")\n"
"Hello World***>>>"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:77
msgid "It is often useful to have more control over the look of your output. Fortunately, Python provides us with an alternative called **formatted strings**. A formatted string is a template in which words or spaces that will remain constant are combined with placeholders for variables that will be inserted into the string. For example, the statement"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:85
msgid "print(aName, \"is\", age, \"years old.\")"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:87
msgid "contains the words ``is`` and ``years old``, but the name and the age will change depending on the variable values at the time of execution. Using a formatted string, we write the previous statement as"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:93
msgid "print(\"%s is %d years old.\" % (aName, age))"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:95
msgid "This simple example illustrates a new string expression. The ``%`` operator is a string operator called the **format operator**. The left side of the expression holds the template or format string, and the right side holds a collection of values that will be substituted into the format string. Note that the number of values in the collection on the right side corresponds with the number of ``%`` characters in the format string. Values are taken—in order, left to right—from the collection and inserted into the format string."
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:104
msgid "Let’s look at both sides of this formatting expression in more detail. The format string may contain one or more conversion specifications. A conversion character tells the format operator what type of value is going to be inserted into that position in the string. In the example above, the ``%s`` specifies a string, while the ``%d`` specifies an integer. Other possible type specifications include ``i``, ``u``, ``f``, ``e``, ``g``, ``c``, or ``%``. :ref:`Table 9 <tab_fmta>` summarizes all of the various type specifications."
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:115
msgid "**Table 9: String Formatting Conversion Characters**"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:118
msgid "**Character**"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:118
msgid "**Output Format**"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:120
msgid "``d``, ``i``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:120
msgid "Integer"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:121
msgid "``u``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:121
msgid "Unsigned integer"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:122
msgid "``f``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:122
msgid "Floating point as m.ddddd"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:123
msgid "``e``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:123
msgid "Floating point as m.ddddde+/-xx"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:124
msgid "``E``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:124
msgid "Floating point as m.dddddE+/-xx"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:125
msgid "``g``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:125
msgid "Use ``%e`` for exponents less than :math:`-4` or greater than :math:`+5`, otherwise use ``%f``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:126
msgid "``c``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:126
msgid "Single character"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:127
msgid "``s``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:127
msgid "String, or any Python data object that can be converted to a string by using the ``str`` function."
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:128
msgid "``%``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:128
msgid "Insert a literal % character"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:132
msgid "In addition to the format character, you can also include a format modifier between the ``%`` and the format character. Format modifiers may be used to left-justify or right-justifiy the value with a specified field width. Modifiers can also be used to specify the field width along with a number of digits after the decimal point. :ref:`Table 10 <tab_fmtaddsa>` explains these format modifiers"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:141
msgid "**Table 10: Additional formatting options**"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:144
msgid "**Modifier**"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:144
msgid "**Example**"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:144
msgid "**Description**"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:146
msgid "number"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:146
msgid "``%20d``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:146
msgid "Put the value in a field width of 20"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:147
msgid "``-``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:147
msgid "``%-20d``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:147
msgid "Put the value in a field 20 characters wide, left-justified"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:148
msgid "``+``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:148
msgid "``%+20d``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:148
msgid "Put the value in a field 20 characters wide, right-justified"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:149
msgid "``0``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:149
msgid "``%020d``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:149
msgid "Put the value in a field 20 characters wide, fill in with leading zeros."
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:150
msgid "``.``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:150
msgid "``%20.2f``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:150
msgid "Put the value in a field 20 characters wide with 2 characters to the right of the decimal point."
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:151
msgid "``(name)``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:151
msgid "``%(name)d``"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:151
msgid "Get the value from the supplied dictionary using ``name`` as the key."
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:155
msgid "The right side of the format operator is a collection of values that will be inserted into the format string. The collection will be either a tuple or a dictionary. If the collection is a tuple, the values are inserted in order of position. That is, the first element in the tuple corresponds to the first format character in the format string. If the collection is a dictionary, the values are inserted according to their keys. In this case all format characters must use the ``(name)`` modifier to specify the name of the key."
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:166
msgid ">>> price = 24\n"
">>> item = \"banana\"\n"
">>> print(\"The %s costs %d cents\"%(item,price))\n"
"The banana costs 24 cents\n"
">>> print(\"The %+10s costs %5.2f cents\"%(item,price))\n"
"The     banana costs 24.00 cents\n"
">>> print(\"The %+10s costs %10.2f cents\"%(item,price))\n"
"The     banana costs      24.00 cents\n"
">>> itemdict = {\"item\":\"banana\",\"cost\":24}\n"
">>> print(\"The %(item)s costs %(cost)7.1f cents\"%itemdict)\n"
"The banana costs    24.0 cents\n"
">>>"
msgstr ""

#: ../../_sources/Introduction/InputandOutput.rst:179
msgid "In addition to format strings that use format characters and format modifiers, Python strings also include a ``format`` method that can be used in conjunction with a new ``Formatter`` class to implement complex string formatting. More about these features can be found in the Python library reference manual."
msgstr ""

